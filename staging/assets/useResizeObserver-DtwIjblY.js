import{r as s}from"./index-DtHxqM--.js";const E=(t,r,g=[])=>{const[u,d]=s.useState(-1),[o,R]=s.useState(-1),e=s.useRef(null),a=s.useRef(r);return s.useEffect(()=>{a.current=r},[r]),s.useEffect(()=>{const h=()=>{var c,i;if(t.current){const n=window.getComputedStyle(t.current),w=(((c=t.current)==null?void 0:c.offsetWidth)||0)-(parseFloat((n==null?void 0:n.paddingLeft)||0),parseFloat((n==null?void 0:n.paddingRight)||0)),p=(((i=t.current)==null?void 0:i.offsetHeight)||0)-(parseFloat((n==null?void 0:n.paddingTop)||0),parseFloat((n==null?void 0:n.paddingLeft)||0));d(w),R(p)}};!(t!=null&&t.current)||u>=0&&o>=0||h()},[u,o,t.current,...g]),s.useLayoutEffect(()=>{if(!(t!=null&&t.current))return;const h=()=>{if(!(t!=null&&t.current)||!Array.isArray(e==null?void 0:e.current))return;const i=e.current[0];d(i.contentRect.width),R(i.contentRect.height),a.current&&a.current(i.contentRect)};let c=new ResizeObserver(i=>{e.current=i,window.requestAnimationFrame(()=>{h()})});return c.observe(t.current),()=>{c==null||c.disconnect(),c=null}},[t.current,...g]),{width:u,height:o}};export{E as u};
