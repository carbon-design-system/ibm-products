import{r as t,e as h}from"./index-DzvNrmz8.js";import{K as l,L as b,P as p}from"./index-5As4T26e.js";const u=t.createContext(b);function g({children:e,flags:o={},...r}){const n=t.useContext(u),a={...Object.keys(r).reduce((s,c)=>(s[c]=r[c],s),{}),...o},[f,m]=t.useState(n),[F,d]=t.useState(()=>{const s=l(a);return s.mergeWithScope(n),s});if(n!==f){const s=l(a);s.mergeWithScope(n),d(s),m(n)}return v(a,S,s=>{const c=l(s);c.mergeWithScope(n),d(c)}),h.createElement(u.Provider,{value:F},e)}g.propTypes={children:p.node,flags:p.objectOf(p.bool)};function v(e,o,r){const n=t.useRef(!1),i=t.useRef(r),[a,f]=t.useState(e);o(a,e)||f(e),t.useEffect(()=>{i.current=r}),t.useEffect(()=>{n.current&&i.current(a)},[a]),t.useEffect(()=>{n.current=!0},[])}function C(e){return t.useContext(u).enabled(e)}function P(){return t.useContext(u)}function S(e,o){if(e===o)return!0;for(const r of Object.keys(e))if(e[r]!==o[r])return!1;for(const r of Object.keys(o))if(o[r]!==e[r])return!1;return!0}g.__docgenInfo={description:"Supports individual feature flag values as props, merging them\nalong with the current `FeatureFlagContext` to provide consumers to check if\na feature flag is enabled or disabled in a given React tree",methods:[],displayName:"FeatureFlags",props:{flags:{defaultValue:{value:"{}",computed:!1},description:"Provide the feature flags to enabled or disabled in the current React tree, this has been deprecated. as we are going to pass individual boolean props for each flag.",type:{name:"objectOf",value:{name:"bool"}},required:!1},children:{description:"",type:{name:"node"},required:!1}}};export{g as F,P as a,C as u};
