import{r as B,c as g,p as k,e as a,P as t,T as C}from"./iframe-CoewCovk.js";import{g as b}from"./devtools-9nvRWAoA.js";import{g as F}from"./getSupportedLocale--Qslfae5.js";import{S as q}from"./SkeletonText-ZIMzN19w.js";import{T as R}from"./TooltipTrigger-zmfBqZ8V.js";import{I as X}from"./bucket-9-DpU5NVI1.js";import{aH as A}from"./bucket-0-CMdbbcAW.js";var r=(e=>(e.Default="default",e.Large="lg",e.XLarge="xl",e))(r||{}),h=(e=>(e.Dash="â€“",e.Slash="/",e))(h||{});const x="en-US",D=(e,o,l,s)=>o==null||typeof o!="number"?null:s?Intl.NumberFormat(e,{notation:"compact",minimumFractionDigits:l,maximumFractionDigits:Math.round(l)}).format(o):Intl.NumberFormat(e).format(o),O=e=>{switch(e){case"lg":return 20;case"xl":return 24;default:return 16}},i=`${k.prefix}--big-number-skeleton`,L="BigNumberSkeleton",m=B.forwardRef(({className:e,size:o,...l},s)=>{const p=g(e,i,{[`${i}--lg`]:o===r.Large,[`${i}--xl`]:o===r.XLarge});return a.createElement("div",{...l,className:p,ref:s,...b(L)},a.createElement(q,{className:`${i}__label`}),a.createElement(q,{heading:!0,className:`${i}__value`,width:"80%"}))});m.displayName=L;m.propTypes={className:t.string,size:t.oneOf([r.Default,r.Large,r.XLarge])};m.__docgenInfo={description:"",methods:[],displayName:"BigNumberSkeleton",props:{className:{description:"Provide an optional class to be applied to the containing node.",type:{name:"string"},required:!1},size:{description:"",type:{name:"enum",value:[{value:"BigNumberSize.Default",computed:!0},{value:"BigNumberSize.Large",computed:!0},{value:"BigNumberSize.XLarge",computed:!0}]},required:!1}}};const n=`${k.prefix}--big-number`,y="BigNumber",v=B.forwardRef(({className:e,forceShowTotal:o=!1,fractionDigits:l=1,iconButton:s,loading:p=!1,label:V,locale:I=x,percentage:N=!1,size:u="default",tooltipDescription:_,total:d,trending:z=!1,truncate:T=!0,value:c,...w},$)=>{const P=g(e,{[`${n}--lg`]:u==="lg",[`${n}--xl`]:u==="xl"}),E=F(I,x),f=D(E,c,l,T)??h.Dash,S=D(E,d,l,T)??"Unknown",U=o||!N&&d&&c&&d>c&&f!==S;return p?a.createElement(m,{...w,ref:$,className:e,size:u,...b(y)}):a.createElement("div",{...w,className:g(n,P,e),ref:$,...b(y)},a.createElement("span",{className:`${n}__row`},a.createElement("h4",{className:`${n}__label`},V),_&&a.createElement(C,{description:_,align:"right",className:`${n}__info`},a.createElement(R,{className:`${n}__tooltip-trigger`},a.createElement(X,{size:16})))),a.createElement("span",{className:`${n}__row`,role:"math"},z&&a.createElement(A,{className:`${n}__trend`,size:O(u)}),a.createElement("span",{className:`${n}__value`},N?a.createElement("div",{className:`${n}__percentage`},f,a.createElement("span",{className:`${n}__percentage-mark`},"%")):f),U&&a.createElement("span",{className:`${n}__total`},a.createElement("span",null,`${h.Slash}${S}`)),a.createElement("span",{className:`${n}__icon-button`},s)))});v.displayName=y;v.propTypes={className:t.string,forceShowTotal:t.bool,fractionDigits:t.number,iconButton:t.node,label:t.string.isRequired,loading:t.bool,locale:t.string,percentage:t.bool,size:t.oneOf(["default","lg","xl"]),tooltipDescription:t.string,total:t.number,trending:t.bool,truncate:t.bool,value:t.number};v.__docgenInfo={description:`BigNumber is used to display large values in a small area. The display of
values can be the value itself, or grouped in a \`numerator/denominator\` fashion.
Control over the total fraction decimals displayed as well as how the
values/totals are displayed are done via a locale prop. Other optional props
allow control over size, truncation, if the value is a percentage, the addition
of a button as well as tool tip functionality.
The default locale is English (\`en-US\`) if one is not provided or if the provided one is not supported.`,methods:[],displayName:"BigNumber",props:{className:{required:!1,tsType:{name:"string"},description:"Provide an optional class to be applied to the containing node.",type:{name:"string"}},forceShowTotal:{required:!1,tsType:{name:"boolean"},description:"The default behavior will hide `total` if `undefined` or is the same as `value`.\n\nSet to `true` to ignore the default behavior and show the `total`.",defaultValue:{value:"false",computed:!1},type:{name:"bool"}},fractionDigits:{required:!1,tsType:{name:"number"},description:"Specifies the number of fraction digits when truncating `value` and `total`.",defaultValue:{value:"1",computed:!1},type:{name:"number"}},iconButton:{required:!1,tsType:{name:"ReactNode"},description:"Displays an icon button next to `value`.",type:{name:"node"}},loading:{required:!1,tsType:{name:"boolean"},description:"When `true`, will show the loading state.",defaultValue:{value:"false",computed:!1},type:{name:"bool"}},label:{required:!0,tsType:{name:"string"},description:"Text label above the `value`.",type:{name:"string"}},locale:{required:!1,tsType:{name:"string"},description:"Determines how `value` and `total` will be formatted.",defaultValue:{value:"'en-US'",computed:!1},type:{name:"string"}},percentage:{required:!1,tsType:{name:"boolean"},description:"Appends a percent sign (_%_) after `value` and hides `total`.",defaultValue:{value:"false",computed:!1},type:{name:"bool"}},size:{required:!1,tsType:{name:"literal",value:"`${BigNumberSize}`"},description:"",defaultValue:{value:"'default'",computed:!1},type:{name:"enum",value:[{value:"'default'",computed:!1},{value:"'lg'",computed:!1},{value:"'xl'",computed:!1}]}},tooltipDescription:{required:!1,tsType:{name:"string"},description:"When applied, an information icon will be rendered next to the\n`label` and the description will be applied to its tooltip.",type:{name:"string"}},total:{required:!1,tsType:{name:"number"},description:'The number that will appear after the slash (i.e. the "denominator" of a fraction).\n\nThis number will not be rendered if it\'s the same as `value` or\n`percentage` is true. See also the **forceShowTotal** prop.',type:{name:"number"}},trending:{required:!1,tsType:{name:"boolean"},description:'When `true`, will render a "trending up" icon.',defaultValue:{value:"false",computed:!1},type:{name:"bool"}},truncate:{required:!1,tsType:{name:"boolean"},description:"Abbreviates the number when `true`. E.g. from _1,000_ to _1K_.",defaultValue:{value:"true",computed:!1},type:{name:"bool"}},value:{required:!1,tsType:{name:"number"},description:'The primary value to display (or the "numerator" of a fraction).',type:{name:"number"}}}};export{r as B,v as a};
