import{ep as s,e,S as l,r as d,B as m}from"./iframe-HX3uP5rF.js";import{I as r}from"./ImportModal-EzRGTkem.js";import"./ComposedModal-Perag1HR.js";import"./index-BEhuL1MR.js";import"./index-DaYmMccZ.js";import"./LayerContext-ukaL0H1D.js";import"./clamp--00YEiB8.js";import"./ButtonSet-oAnUf3Md.js";import"./InlineLoading-BBzqH8Wg.js";import"./bucket-6-CUA0OKoV.js";import"./mergeRefs-91-mP8KM.js";import"./requiredIfGivenPropIsTruthy-VsRXdxiC.js";import"./wrapFocus-DuBvmbL6.js";import"./Text-DBtsZOEn.js";import"./index-BzsQW5qN.js";import"./bucket-18-KiX7pVM7.js";import"./utils-CeAP7Zfj.js";import"./FileUploaderItem-B4GKOQLH.js";import"./bucket-19-DB0RW10U.js";import"./TextInput-CGHDlgIc.js";import"./useNormalizedInputProps-tAk74Vxi.js";import"./FormContext-D8zI7Kke.js";import"./devtools-CNhWTRl7.js";import"./usePortalTarget-CISdp02a.js";import"./index-D2lKpEPM.js";import"./props-helper-BQIeo-gE.js";import"./uuidv4-BN2rGLQG.js";import"./bucket-0-BYnxl-xo.js";const i=()=>{const{csfFile:o}=s("meta",["meta"]);return e.createElement(l,{altGuidelinesHref:[{href:"https://pages.github.ibm.com/carbon/ibm-products/patterns/import-and-upload/usage/",label:"Usage guidelines"},{href:"https://www.carbondesignsystem.com/components/modal/usage",label:"Carbon modal usage guidelines"},{href:"https://react.carbondesignsystem.com/?path=/docs/components-modal",label:"Carbon modal documentation"}]})};i.__docgenInfo={description:"",methods:[],displayName:"DocsPage"};const{action:c}=__STORYBOOK_MODULE_ACTIONS__,K={title:"Patterns/Prebuilt patterns/ImportModal",component:r,tags:["autodocs"],parameters:{docs:{page:i}},argTypes:{accept:{control:{type:"select",labels:{0:"image (png, jpeg or gif)",1:"document (doc or pdf)",2:"development (html, css or javascript)"}},options:[0,1,2],mapping:{0:["image/png","image/jpeg","image/gif"],1:["application/doc","application/docx","application/pdf"],2:["text/plain","text/css","text/html","text/javascript"]}},portalTarget:{control:!1}}},u={className:"test-class",defaultErrorBody:"Select a new file and try again.",defaultErrorHeader:"Import failed",description:"You can specify a file to import by either dragging it into the drag and drop area or by specifying a URL. (Maximum file size of 500KB)",fetchErrorBody:"Unable to fetch URL.",fetchErrorHeader:"Import failed",fileDropHeader:"Add files using drag and drop",fileDropLabel:"Drag and drop files here or click to upload",fileUploadLabel:"files uploaded",inputButtonIcon:!1,inputButtonText:"Add file",inputId:"test-id",inputLabel:"Add a file by specifying a URL",inputPlaceholder:"URL",invalidFileTypeErrorBody:"Invalid file type.",invalidFileTypeErrorHeader:"Import failed",invalidIconDescription:"Delete",maxFileSize:5e5,maxFileSizeErrorBody:"500kb max file size. Select a new file and try again.",maxFileSizeErrorHeader:"Import failed",onClose:c("onClose event"),onRequestSubmit:o=>console.log("file contents",o),open:!0,primaryButtonText:"Import",secondaryButtonText:"Cancel",title:"Import"},f=({...o},n)=>{const[p,a]=d.useState(n.viewMode!=="docs");return e.createElement(e.Fragment,null,e.createElement(r,{...o,open:p,onClose:()=>a(!1)}),e.createElement(m,{onClick:()=>a(!0)},"Launch modal"))},t=f.bind({});t.args={accept:0,...u};t.parameters={...t.parameters,docs:{...t.parameters?.docs,source:{originalSource:`({
  ...args
}, context) => {
  const [open, setOpen] = useState(context.viewMode !== 'docs');
  return <>
      <ImportModal {...args} open={open} onClose={() => setOpen(false)} />
      <Button onClick={() => setOpen(true)}>Launch modal</Button>
    </>;
}`,...t.parameters?.docs?.source}}};const Y=["Standard"];export{t as Standard,Y as __namedExportsOrder,K as default};
