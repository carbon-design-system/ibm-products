import{e,r as o}from"./index-CPiZ6Cnx.js";import{S as Ae}from"./StoryDocsPage-B0IyT778.js";import{a as T}from"./index-B-lxVbXh.js";import{B as y,p as P}from"./settings-41bnSjHp.js";import"./index-BPCFiO9b.js";import{B as _}from"./ButtonSet-BTIAcY4e.js";import{D as Be}from"./Dropdown-CFsOHIZw.js";import{F as G}from"./Form-qGY1F0CA.js";import{F as V}from"./FormGroup-BF7c02p3.js";import{T as Se,a as Ie,b as N,c as Fe,d as R}from"./Tabs-7FAt1tPn.js";import{T as Pe,a as De,b as Me,A as Ne,c as Re}from"./index-GAgccHqf.js";import{T as b}from"./TextInput-d19WJcLV.js";import{T as g,d as _e}from"./Tearsheet-s9t87V2u.js";import{a as ze,b as Le,c as $e,s as Ge}from"./_storybook-styles-XzCpCSKO.js";import{g as Ve}from"./props-helper-C4WGU-Xx.js";import{T as He}from"./TearsheetNarrow-BbmEHw8z.js";import{e as We}from"./bucket-9-qDf-0NK_.js";import"./_commonjsHelpers-BosuxZz1.js";import"./index-C-2_Eo4o.js";import"./iframe-necW5_o2.js";import"./index-B83en7q5.js";import"./index-ZKO_qc5e.js";import"./index-Dytf1aFS.js";import"./index-DrFu-skq.js";import"./story-helper-C7pmvIin.js";import"./v4-CtRu48qb.js";import"./events-OVwOsPzJ.js";import"./index-H2wBg9na.js";import"./index-B0LLDM2X.js";import"./extends-CF3RwP-h.js";import"./FormContext-CgeSXHS1.js";import"./mergeRefs-CTUecegF.js";import"./bucket-18-CAzey7tD.js";import"./index-CtW6Lsnp.js";import"./ComposedModal-CgRKyN5W.js";import"./index-C_tB4MqD.js";import"./LayerContext-BGhaVt7n.js";import"./InlineLoading-Cst7O9Fk.js";import"./bucket-6-CO2LLwKX.js";import"./requiredIfGivenPropIsTruthy-CU7JwK8h.js";import"./wrapFocus-Dfrp1CCV.js";import"./useControllableState-uQXf5Mu5.js";import"./useNoInteractiveChildren-DSuYsaq5.js";import"./useMatchMedia-BQGBdW8Y.js";import"./Text-DJS5NTiV.js";import"./bucket-17-VMH0CKri.js";import"./useNormalizedInputProps-CqoVIYpB.js";import"./useAnnouncer-Dwt0jqXi.js";import"./TearsheetShell-C1YcUbz9.js";import"./useResizeObserver-CZKdqPxj.js";import"./getNodeTextContent-C8IeKkUQ.js";import"./DefinitionTooltip-3iCit3mp.js";import"./usePortalTarget-DAnmNO4S.js";import"./feature-flags-CMZHtsao.js";import"./index-BI1fCQHV.js";import"./useFocus-C3l_bJTO.js";import"./usePreviousValue-CSEZflXC.js";import"./useIsomorphicEffect-CqAX3nH-.js";import"./ActionSet-DmJNgN-v.js";import"./devtools-Ca6Wku6c.js";const be=()=>e.createElement(Ae,{blocks:[{story:k},{story:E},{story:O},{story:F},{story:x},{story:w},{story:A},{story:B},{story:S},{title:"With AI Label",description:"An AI Label is intended for any scenario where something is being generated by AI to reinforce AI transparency, accountability, and explainability at the UI level. A Carbon AI Label can be provided to the Tearsheet component by including an `decorator` property on it and providing the carbon AILabel component as its own custom component.<br/> The `decorator` is versatile and can also be used to render other components.",source:{language:"html",code:`
<Tearsheet
  {...args}
  decorator={
    // carbon AILabel component
    <AILabel
      className="ai-label-container"
      autoAlign={false}
      align="bottom-right"
    >
      <AILabelContent>... ...</AILabelContent>
    </AILabel>
  }
>
  ...
</Tearsheet>
          `}}]});be.__docgenInfo={description:"",methods:[],displayName:"DocsPage"};const en={title:"IBM Products/Components/Tearsheet",component:g,tags:["autodocs"],parameters:{styles:Ge,layout:"fullscreen",docs:{page:be}},argTypes:{...Ve(_e),actions:{control:{type:"select",labels:$e},options:Le,mapping:ze({primary:"Replace",danger:"Delete",secondary:"Back",secondary2:"Keep Both",dangerGhost:"Abort",ghost:"Cancel"},T)},description:{control:{type:"text"}},headerActions:{control:{type:"select",labels:{0:"none",1:"drop-down",2:"buttons"}},options:[0,1,2],mapping:{0:null,1:e.createElement(Be,{id:"tss-had",label:"Choose an option",titleText:"Choose an option",items:["option 1","option 2","option 3","option 4"]}),2:e.createElement(_,null,e.createElement(y,{kind:"secondary",size:"sm",style:{width:"initial"}},"Secondary"),e.createElement(y,{kind:"primary",size:"sm",style:{width:"initial"}},"Primary"))}},label:{control:{type:"text"}},title:{control:{type:"text"}},influencer:{control:{disable:!0}},onClose:{control:{disable:!0}},navigation:{control:{disable:!0}},open:{control:{disable:!0}},portalTarget:{control:{disable:!0}},decorator:{control:{type:"select",labels:{0:"No AI Label",1:"with AI Label",2:"With non AI Label component"},default:0},description:"Optional prop that allows you to pass any component.",options:[0,1,2]},slug:{control:{type:"select",labels:{0:"No AI Slug",1:"with AI Slug"},default:0},description:'Deprecated: Property replaced by "decorator"',options:[0,1]}}},C="Close the tearsheet",v="This is a description for the tearsheet, providing an opportunity to   describe the flow over a couple of lines in the header of the tearsheet.",z=e.createElement("div",{className:"tearsheet-stories__dummy-content-block"},"Influencer"),L="The label of the tearsheet",ge=e.createElement("div",{className:"tearsheet-stories__dummy-content-block"},e.createElement(G,null,e.createElement("p",null,"Main content"),e.createElement(V,{legendId:"tearsheet-form-group",legendText:"FormGroup Legend"},e.createElement(b,{id:"tss-ft1",labelText:"Enter an important value here",style:{marginBottom:"1em"}}),e.createElement(b,{id:"tss-ft2",labelText:"Here is an entry field:",style:{marginBottom:"1em"}})))),I="Title of the tearsheet",c=a=>{switch(a){case 1:return e.createElement(Ne,{className:"decorator-container",size:"xs"},e.createElement(Re,null,e.createElement("div",null,e.createElement("p",{className:"secondary"},"AI Explained"),e.createElement("h1",null,"84%"),e.createElement("p",{className:"secondary bold"},"Confidence score"),e.createElement("p",{className:"secondary"},"This is not really Lorem Ipsum but the spell checker did not like the previous text with it's non-words which is why this unwieldy sentence, should one choose to call it that, here."),e.createElement("hr",null),e.createElement("p",{className:"secondary"},"Model type"),e.createElement("p",{className:"bold"},"Foundation model"))));case 2:return e.createElement(Pe,null,e.createElement(De,{label:"Additional information"},e.createElement(We,null)),e.createElement(Me,null,e.createElement("p",null,"Custom content here")));default:return}},Te=({actions:a,decorator:r,slug:s,...l},m)=>{const[f,t]=o.useState(!1);o.useEffect(()=>{setTimeout(()=>t(m.viewMode!=="docs"),0)},[]);const p=a&&Array.prototype.map.call(a,n=>{if(n.label==="Cancel"){const i=n.onClick;return{...n,onClick:u=>{t(!1),i(u)}}}return n}),h=o.useRef(void 0);return e.createElement(e.Fragment,null,e.createElement("style",null,`.${P.prefix}--tearsheet { opacity: 0 }`,";"),e.createElement(y,{onClick:()=>t(!0)},"Open Tearsheet"),e.createElement("div",{ref:h},e.createElement(g,{...l,actions:p,open:f,onClose:()=>t(!1),decorator:r&&c(r),slug:s&&c(s)},ge)))},Ce=e.createElement("div",{className:"tearsheet-stories__tabs"},e.createElement(Fe,{"aria-label":"Tab list"},e.createElement(R,null,"Tab 1"),e.createElement(R,null,"Tab 2"),e.createElement(R,null,"Tab 3"),e.createElement(R,null,"Tab 4"))),ve=({actions:a,decorator:r,slug:s,...l},m)=>{const[f,t]=o.useState(!1);o.useEffect(()=>{setTimeout(()=>t(m.viewMode!=="docs"),0)},[]);const p=a&&Array.prototype.map.call(a,n=>{if(n.label==="Cancel"){const i=n.onClick;return{...n,onClick:u=>{t(!1),i(u)}}}return n}),h=o.useRef(void 0);return e.createElement(e.Fragment,null,e.createElement("style",null,`.${P.prefix}--tearsheet { opacity: 0 }`,";"),e.createElement(y,{onClick:()=>t(!0)},"Open Tearsheet"),e.createElement("div",{ref:h},e.createElement(Se,{onChange:T("Tab selection changed")},e.createElement(g,{...l,actions:p,open:f,onClose:()=>t(!1),decorator:r&&c(r),slug:s&&c(s)},e.createElement(Ie,null,e.createElement(N,null,"Tab 1"),e.createElement(N,null,"Tab 2"),e.createElement(N,null,"Tab 3"),e.createElement(N,null,"Tab 4"))))))},Ke=({actions:a,decorator:r,slug:s,...l},m)=>{const[f,t]=o.useState(!1),p=o.useRef(void 0),h=a&&Array.prototype.map.call(a,i=>{if(i.label==="Cancel"){const u=i.onClick;return{...i,onClick:$=>{t(!1),u($)}}}return i}),n=o.useRef(void 0);return o.useEffect(()=>{setTimeout(()=>t(m.viewMode!=="docs"),0)},[]),e.createElement(e.Fragment,null,e.createElement("style",null,`.${P.prefix}--tearsheet { opacity: 0 }`,";"),e.createElement(y,{ref:p,onClick:()=>t(!0)},"Open Tearsheet"),e.createElement("div",{ref:n},e.createElement(g,{...l,actions:h,open:f,onClose:()=>t(!1),decorator:r&&c(r),slug:s&&c(s),launcherButtonRef:p},ge)))},Ue=({actions:a,decorator:r,slug:s,...l},m)=>{const[f,t]=o.useState(!1),p=a&&Array.prototype.map.call(a,n=>{if(n.label==="Cancel"){const i=n.onClick;return{...n,onClick:u=>{t(!1),i(u)}}}return n}),h=o.useRef(void 0);return o.useEffect(()=>{setTimeout(()=>t(m.viewMode!=="docs"),0)},[]),e.createElement(e.Fragment,null,e.createElement("style",null,`.${P.prefix}--tearsheet { opacity: 0 }`,";"),e.createElement(y,{onClick:()=>t(!0)},"Open Tearsheet"),e.createElement("div",{ref:h},e.createElement(g,{...l,actions:p,open:f,onClose:()=>t(!1),decorator:r&&c(r),slug:s&&c(s)},e.createElement("div",{className:"tearsheet-stories__dummy-content-block"},e.createElement(G,null,e.createElement("p",null,"Main content"),e.createElement(V,{legendId:"tearsheet-form-group",legendText:"FormGroup Legend"},e.createElement(b,{id:"tss-ft1",labelText:"Enter an important value here",style:{marginBottom:"1em"},disabled:!0}),e.createElement(b,{id:"tss-ft2",labelText:"Here is an entry field:",style:{marginBottom:"1em"}})))))))},je=({actions:a,decorator:r,slug:s,...l},m)=>{const[f,t]=o.useState(!1),p=a&&Array.prototype.map.call(a,n=>{if(n.label==="Cancel"){const i=n.onClick;return{...n,onClick:u=>{t(!1),i(u)}}}return n}),h=o.useRef(void 0);return o.useEffect(()=>{setTimeout(()=>t(m.viewMode!=="docs"),0)},[]),e.createElement(e.Fragment,null,e.createElement("style",null,`.${P.prefix}--tearsheet { opacity: 0 }`,";"),e.createElement(y,{onClick:()=>t(!0)},"Open Tearsheet"),e.createElement("div",{ref:h},e.createElement(g,{...l,actions:p,open:f,onClose:()=>t(!1),decorator:r&&c(r),slug:s&&c(s)},e.createElement("div",{className:"tearsheet-stories__dummy-content-block"},e.createElement(G,null,e.createElement("p",null,"Main content"),e.createElement(V,{legendId:"tearsheet-form-group",legendText:"FormGroup Legend"},e.createElement(b,{id:"tss-ft1",labelText:"This field's value is 'read only':",readOnly:!0,style:{marginBottom:"1em"},value:"Value"}),e.createElement(b,{id:"tss-ft2",labelText:"Here is an entry field:",style:{marginBottom:"1em"}})))))))},ke=({mixedSizes:a,actions:r,decorator:s,slug:l,...m},f)=>{const[t,p]=o.useState(!1),[h,n]=o.useState(!1),[i,u]=o.useState(!1),$=o.useRef(void 0),H=o.useRef(),Ee=Array.prototype.map.call(r,d=>{if(d.label==="Cancel"){const D=d.onClick;return{...d,onClick:M=>{p(!1),D(M)}}}return d}),Oe=Array.prototype.map.call(r,d=>{if(d.label==="Cancel"){const D=d.onClick;return{...d,onClick:M=>{n(!1),D(M)}}}return d}),xe=Array.prototype.map.call(r,d=>{if(d.label==="Cancel"){const D=d.onClick;return{...d,onClick:M=>{u(!1),D(M)}}}return d}),we=a?He:g;return o.useEffect(()=>{setTimeout(()=>{p(f.viewMode!=="docs"),n(f.viewMode!=="docs"),u(f.viewMode!=="docs")},0)},[]),e.createElement(e.Fragment,null,e.createElement("style",null,`.${P.prefix}--tearsheet { opacity: 0 }`,";"),e.createElement("div",{style:{height:"3rem"},"data-reserve-space":"for toggle buttons"}),e.createElement(_,{style:{display:"flex",position:"fixed",top:0,left:0,zIndex:1e4}},e.createElement(y,{onClick:()=>p(!t),ref:H},"Toggle tearsheet 1"),e.createElement(y,{onClick:()=>n(!h)},"Toggle tearsheet 2"),!a&&e.createElement(y,{onClick:()=>u(!i)},"Toggle tearsheet 3")),e.createElement("div",{ref:$},e.createElement(g,{...m,actions:Ee,headerActions:e.createElement(_,null,e.createElement(y,{kind:"primary",size:"sm",style:{width:"initial"},onClick:()=>n(!0),disabled:h},"Open tearsheet 2")),title:"Tearsheet 1",open:t,onClose:()=>p(!1),selectorPrimaryFocus:"#stacked-input-1",decorator:s&&c(s),slug:l&&c(l),launcherButtonRef:H},e.createElement("div",{className:"tearsheet-stories__dummy-content-block"},"Main content 1",e.createElement(b,{id:"stacked-input-1",labelText:"Enter an important value here"}))),e.createElement(we,{...m,actions:Oe,headerActions:e.createElement(_,null,e.createElement(y,{kind:"primary",size:"sm",style:{width:"initial"},onClick:()=>u(!0),disabled:i},"Open tearsheet 3")),title:"Tearsheet 2",open:h,onClose:()=>n(!1),selectorPrimaryFocus:"#stacked-input-2",decorator:s&&c(s),slug:l&&c(l)},e.createElement("div",{className:"tearsheet-stories__dummy-content-block"},"Main content 2",e.createElement(b,{id:"stacked-input-2",labelText:"Enter an important value here"}))),!a&&e.createElement(g,{...m,actions:xe,title:"Tearsheet 3",open:i,onClose:()=>u(!1),selectorPrimaryFocus:"#stacked-input-3",decorator:s&&c(s),slug:l&&c(l)},e.createElement("div",{className:"tearsheet-stories__dummy-content-block"},"Main content 3",e.createElement(b,{id:"stacked-input-3",labelText:"Enter an important value here"})))))},k=Te.bind({});k.storyName="Tearsheet";k.args={closeIconDescription:C,description:v,onClose:T("onClose called"),title:I,actions:7,selectorPrimaryFocus:"#tss-ft1"};const E=ve.bind({});E.storyName="Tearsheet with navigation";E.args={closeIconDescription:C,description:v,label:L,navigation:Ce,onClose:T("onClose called"),title:I,actions:7};const O=Te.bind({});O.storyName="Tearsheet with influencer";O.args={closeIconDescription:C,description:v,influencer:z,influencerPosition:"left",influencerWidth:"narrow",onClose:T("onClose called"),title:I,actions:7};const F=Ke.bind({});F.args={closeIconDescription:C,description:v,onClose:T("onClose called"),title:I,actions:7};const x=Ue.bind({});x.storyName="First Element Disabled";x.args={closeIconDescription:C,hasCloseIcon:!0,description:v,onClose:T("onClose called"),title:I,actions:7,selectorPrimaryFocus:"#tss-ft1"};const w=je.bind({});w.storyName="First Element ReadOnly";w.args={closeIconDescription:C,hasCloseIcon:!0,description:v,onClose:T("onClose called"),title:I,actions:7,selectorPrimaryFocus:"#tss-ft1"};const A=ve.bind({});A.storyName="Tearsheet with all header items and influencer";A.args={closeIconDescription:C,description:v,hasCloseIcon:!0,headerActions:2,influencer:z,influencerPosition:"left",influencerWidth:"narrow",label:L,navigation:Ce,onClose:T("onClose called"),title:I,actions:0,decorator:1,slug:0};const B=ke.bind({});B.storyName="Stacking tearsheets";B.args={closeIconDescription:C,description:v,height:"lower",influencer:z,label:L,actions:7};const S=ke.bind({});S.storyName="Stacking tearsheets, different sizes";S.args={mixedSizes:!0,closeIconDescription:C,description:v,height:"lower",influencer:z,label:L,actions:7};var W,K,U;k.parameters={...k.parameters,docs:{...(W=k.parameters)==null?void 0:W.docs,source:{originalSource:`({
  actions,
  decorator,
  slug,
  ...args
}, context) => {
  const [open, setOpen] = useState(false);
  useEffect(() => {
    setTimeout(() => setOpen(context.viewMode !== 'docs'), 0);
  }, []);
  const wiredActions = actions && Array.prototype.map.call(actions, action => {
    if (action.label === 'Cancel') {
      const previousClick = action.onClick;
      return {
        ...action,
        onClick: evt => {
          setOpen(false);
          previousClick(evt);
        }
      };
    }
    return action;
  });
  const ref = useRef(undefined);
  return <>
      <style>{\`.\${pkg.prefix}--tearsheet { opacity: 0 }\`};</style>
      <Button onClick={() => setOpen(true)}>Open Tearsheet</Button>
      <div ref={ref}>
        <Tearsheet {...args} actions={wiredActions} open={open} onClose={() => setOpen(false)} decorator={decorator && sampleDecorator(decorator)} slug={slug && sampleDecorator(slug)}>
          {mainContent}
        </Tearsheet>
      </div>
    </>;
}`,...(U=(K=k.parameters)==null?void 0:K.docs)==null?void 0:U.source}}};var j,q,J;E.parameters={...E.parameters,docs:{...(j=E.parameters)==null?void 0:j.docs,source:{originalSource:`({
  actions,
  decorator,
  slug,
  ...args
}, context) => {
  const [open, setOpen] = useState(false);
  useEffect(() => {
    setTimeout(() => setOpen(context.viewMode !== 'docs'), 0);
  }, []);
  const wiredActions = actions && Array.prototype.map.call(actions, action => {
    if (action.label === 'Cancel') {
      const previousClick = action.onClick;
      return {
        ...action,
        onClick: evt => {
          setOpen(false);
          previousClick(evt);
        }
      };
    }
    return action;
  });
  const ref = useRef(undefined);
  return <>
      <style>{\`.\${pkg.prefix}--tearsheet { opacity: 0 }\`};</style>
      <Button onClick={() => setOpen(true)}>Open Tearsheet</Button>
      <div ref={ref}>
        <Tabs onChange={action('Tab selection changed')}>
          <Tearsheet {...args} actions={wiredActions} open={open} onClose={() => setOpen(false)} decorator={decorator && sampleDecorator(decorator)} slug={slug && sampleDecorator(slug)}>
            <TabPanels>
              <TabPanel>Tab 1</TabPanel>
              <TabPanel>Tab 2</TabPanel>
              <TabPanel>Tab 3</TabPanel>
              <TabPanel>Tab 4</TabPanel>
            </TabPanels>
          </Tearsheet>
        </Tabs>
      </div>
    </>;
}`,...(J=(q=E.parameters)==null?void 0:q.docs)==null?void 0:J.source}}};var Q,X,Y;O.parameters={...O.parameters,docs:{...(Q=O.parameters)==null?void 0:Q.docs,source:{originalSource:`({
  actions,
  decorator,
  slug,
  ...args
}, context) => {
  const [open, setOpen] = useState(false);
  useEffect(() => {
    setTimeout(() => setOpen(context.viewMode !== 'docs'), 0);
  }, []);
  const wiredActions = actions && Array.prototype.map.call(actions, action => {
    if (action.label === 'Cancel') {
      const previousClick = action.onClick;
      return {
        ...action,
        onClick: evt => {
          setOpen(false);
          previousClick(evt);
        }
      };
    }
    return action;
  });
  const ref = useRef(undefined);
  return <>
      <style>{\`.\${pkg.prefix}--tearsheet { opacity: 0 }\`};</style>
      <Button onClick={() => setOpen(true)}>Open Tearsheet</Button>
      <div ref={ref}>
        <Tearsheet {...args} actions={wiredActions} open={open} onClose={() => setOpen(false)} decorator={decorator && sampleDecorator(decorator)} slug={slug && sampleDecorator(slug)}>
          {mainContent}
        </Tearsheet>
      </div>
    </>;
}`,...(Y=(X=O.parameters)==null?void 0:X.docs)==null?void 0:Y.source}}};var Z,ee,te;F.parameters={...F.parameters,docs:{...(Z=F.parameters)==null?void 0:Z.docs,source:{originalSource:`({
  actions,
  decorator,
  slug,
  ...args
}, context) => {
  const [open, setOpen] = useState(false);
  const buttonRef = useRef(undefined);
  const wiredActions = actions && Array.prototype.map.call(actions, action => {
    if (action.label === 'Cancel') {
      const previousClick = action.onClick;
      return {
        ...action,
        onClick: evt => {
          setOpen(false);
          previousClick(evt);
        }
      };
    }
    return action;
  });
  const ref = useRef(undefined);
  useEffect(() => {
    setTimeout(() => setOpen(context.viewMode !== 'docs'), 0);
  }, []);
  return <>
      <style>{\`.\${pkg.prefix}--tearsheet { opacity: 0 }\`};</style>
      <Button ref={buttonRef} onClick={() => setOpen(true)}>
        Open Tearsheet
      </Button>
      <div ref={ref}>
        <Tearsheet {...args} actions={wiredActions} open={open} onClose={() => setOpen(false)} decorator={decorator && sampleDecorator(decorator)} slug={slug && sampleDecorator(slug)} launcherButtonRef={buttonRef}>
          {mainContent}
        </Tearsheet>
      </div>
    </>;
}`,...(te=(ee=F.parameters)==null?void 0:ee.docs)==null?void 0:te.source}}};var ne,oe,se;x.parameters={...x.parameters,docs:{...(ne=x.parameters)==null?void 0:ne.docs,source:{originalSource:`({
  actions,
  decorator,
  slug,
  ...args
}, context) => {
  const [open, setOpen] = useState(false);
  const wiredActions = actions && Array.prototype.map.call(actions, action => {
    if (action.label === 'Cancel') {
      const previousClick = action.onClick;
      return {
        ...action,
        onClick: evt => {
          setOpen(false);
          previousClick(evt);
        }
      };
    }
    return action;
  });
  const ref = useRef(undefined);
  useEffect(() => {
    setTimeout(() => setOpen(context.viewMode !== 'docs'), 0);
  }, []);
  return <>
      <style>{\`.\${pkg.prefix}--tearsheet { opacity: 0 }\`};</style>
      <Button onClick={() => setOpen(true)}>Open Tearsheet</Button>
      <div ref={ref}>
        <Tearsheet {...args} actions={wiredActions} open={open} onClose={() => setOpen(false)} decorator={decorator && sampleDecorator(decorator)} slug={slug && sampleDecorator(slug)}>
          <div className="tearsheet-stories__dummy-content-block">
            <Form>
              <p>Main content</p>
              <FormGroup legendId="tearsheet-form-group" legendText="FormGroup Legend">
                <TextInput id="tss-ft1" labelText="Enter an important value here" style={
              // stylelint-disable-next-line carbon/layout-use
              {
                marginBottom: '1em'
              }} disabled />
                <TextInput id="tss-ft2" labelText="Here is an entry field:" style={
              // stylelint-disable-next-line carbon/layout-use
              {
                marginBottom: '1em'
              }} />
              </FormGroup>
            </Form>
          </div>
        </Tearsheet>
      </div>
    </>;
}`,...(se=(oe=x.parameters)==null?void 0:oe.docs)==null?void 0:se.source}}};var ae,re,le;w.parameters={...w.parameters,docs:{...(ae=w.parameters)==null?void 0:ae.docs,source:{originalSource:`({
  actions,
  decorator,
  slug,
  ...args
}, context) => {
  const [open, setOpen] = useState(false);
  const wiredActions = actions && Array.prototype.map.call(actions, action => {
    if (action.label === 'Cancel') {
      const previousClick = action.onClick;
      return {
        ...action,
        onClick: evt => {
          setOpen(false);
          previousClick(evt);
        }
      };
    }
    return action;
  });
  const ref = useRef(undefined);
  useEffect(() => {
    setTimeout(() => setOpen(context.viewMode !== 'docs'), 0);
  }, []);
  return <>
      <style>{\`.\${pkg.prefix}--tearsheet { opacity: 0 }\`};</style>
      <Button onClick={() => setOpen(true)}>Open Tearsheet</Button>
      <div ref={ref}>
        <Tearsheet {...args} actions={wiredActions} open={open} onClose={() => setOpen(false)} decorator={decorator && sampleDecorator(decorator)} slug={slug && sampleDecorator(slug)}>
          <div className="tearsheet-stories__dummy-content-block">
            <Form>
              <p>Main content</p>
              <FormGroup legendId="tearsheet-form-group" legendText="FormGroup Legend">
                <TextInput id="tss-ft1" labelText="This field's value is 'read only':" readOnly={true} style={
              // stylelint-disable-next-line carbon/layout-use
              {
                marginBottom: '1em'
              }} value="Value" />
                <TextInput id="tss-ft2" labelText="Here is an entry field:" style={
              // stylelint-disable-next-line carbon/layout-use
              {
                marginBottom: '1em'
              }} />
              </FormGroup>
            </Form>
          </div>
        </Tearsheet>
      </div>
    </>;
}`,...(le=(re=w.parameters)==null?void 0:re.docs)==null?void 0:le.source}}};var ie,ce,pe;A.parameters={...A.parameters,docs:{...(ie=A.parameters)==null?void 0:ie.docs,source:{originalSource:`({
  actions,
  decorator,
  slug,
  ...args
}, context) => {
  const [open, setOpen] = useState(false);
  useEffect(() => {
    setTimeout(() => setOpen(context.viewMode !== 'docs'), 0);
  }, []);
  const wiredActions = actions && Array.prototype.map.call(actions, action => {
    if (action.label === 'Cancel') {
      const previousClick = action.onClick;
      return {
        ...action,
        onClick: evt => {
          setOpen(false);
          previousClick(evt);
        }
      };
    }
    return action;
  });
  const ref = useRef(undefined);
  return <>
      <style>{\`.\${pkg.prefix}--tearsheet { opacity: 0 }\`};</style>
      <Button onClick={() => setOpen(true)}>Open Tearsheet</Button>
      <div ref={ref}>
        <Tabs onChange={action('Tab selection changed')}>
          <Tearsheet {...args} actions={wiredActions} open={open} onClose={() => setOpen(false)} decorator={decorator && sampleDecorator(decorator)} slug={slug && sampleDecorator(slug)}>
            <TabPanels>
              <TabPanel>Tab 1</TabPanel>
              <TabPanel>Tab 2</TabPanel>
              <TabPanel>Tab 3</TabPanel>
              <TabPanel>Tab 4</TabPanel>
            </TabPanels>
          </Tearsheet>
        </Tabs>
      </div>
    </>;
}`,...(pe=(ce=A.parameters)==null?void 0:ce.docs)==null?void 0:pe.source}}};var ue,de,me;B.parameters={...B.parameters,docs:{...(ue=B.parameters)==null?void 0:ue.docs,source:{originalSource:`({
  mixedSizes,
  actions,
  decorator,
  slug,
  ...args
}, context) => {
  const [open1, setOpen1] = useState(false);
  const [open2, setOpen2] = useState(false);
  const [open3, setOpen3] = useState(false);
  const ref = useRef(undefined);
  const openButton1 = useRef();
  const wiredActions1 = Array.prototype.map.call(actions, action => {
    if (action.label === 'Cancel') {
      const previousClick = action.onClick;
      return {
        ...action,
        onClick: evt => {
          setOpen1(false);
          previousClick(evt);
        }
      };
    }
    return action;
  });
  const wiredActions2 = Array.prototype.map.call(actions, action => {
    if (action.label === 'Cancel') {
      const previousClick = action.onClick;
      return {
        ...action,
        onClick: evt => {
          setOpen2(false);
          previousClick(evt);
        }
      };
    }
    return action;
  });
  const wiredActions3 = Array.prototype.map.call(actions, action => {
    if (action.label === 'Cancel') {
      const previousClick = action.onClick;
      return {
        ...action,
        onClick: evt => {
          setOpen3(false);
          previousClick(evt);
        }
      };
    }
    return action;
  });
  const VariableSizeTearsheet = mixedSizes ? TearsheetNarrow : Tearsheet;
  useEffect(() => {
    setTimeout(() => {
      setOpen1(context.viewMode !== 'docs');
      setOpen2(context.viewMode !== 'docs');
      setOpen3(context.viewMode !== 'docs');
    }, 0);
  }, []);
  return <>
      <style>{\`.\${pkg.prefix}--tearsheet { opacity: 0 }\`};</style>
      <div style={{
      height: '3rem'
    }} data-reserve-space="for toggle buttons" />
      <ButtonSet style={{
      display: 'flex',
      position: 'fixed',
      top: 0,
      left: 0,
      zIndex: 10000
    }}>
        <Button onClick={() => setOpen1(!open1)} ref={openButton1}>
          Toggle&nbsp;tearsheet&nbsp;1
        </Button>
        <Button onClick={() => setOpen2(!open2)}>
          Toggle&nbsp;tearsheet&nbsp;2
        </Button>
        {!mixedSizes && <Button onClick={() => setOpen3(!open3)}>
            Toggle&nbsp;tearsheet&nbsp;3
          </Button>}
      </ButtonSet>
      <div ref={ref}>
        <Tearsheet {...args} actions={wiredActions1} headerActions={<ButtonSet>
              <Button kind="primary" size="sm" style={{
          width: 'initial'
        }} onClick={() => setOpen2(true)} disabled={open2}>
                Open tearsheet 2
              </Button>
            </ButtonSet>} title="Tearsheet 1" open={open1} onClose={() => setOpen1(false)} selectorPrimaryFocus="#stacked-input-1" decorator={decorator && sampleDecorator(decorator)} slug={slug && sampleDecorator(slug)} launcherButtonRef={openButton1}>
          <div className="tearsheet-stories__dummy-content-block">
            Main content 1
            <TextInput id="stacked-input-1" labelText="Enter an important value here" />
          </div>
        </Tearsheet>
        <VariableSizeTearsheet {...args} actions={wiredActions2} headerActions={<ButtonSet>
              <Button kind="primary" size="sm" style={{
          width: 'initial'
        }} onClick={() => setOpen3(true)} disabled={open3}>
                Open tearsheet 3
              </Button>
            </ButtonSet>} title="Tearsheet 2" open={open2} onClose={() => setOpen2(false)} selectorPrimaryFocus="#stacked-input-2" decorator={decorator && sampleDecorator(decorator)} slug={slug && sampleDecorator(slug)}>
          <div className="tearsheet-stories__dummy-content-block">
            Main content 2
            <TextInput id="stacked-input-2" labelText="Enter an important value here" />
          </div>
        </VariableSizeTearsheet>
        {!mixedSizes && <Tearsheet {...args} actions={wiredActions3} title="Tearsheet 3" open={open3} onClose={() => setOpen3(false)} selectorPrimaryFocus="#stacked-input-3" decorator={decorator && sampleDecorator(decorator)} slug={slug && sampleDecorator(slug)}>
            <div className="tearsheet-stories__dummy-content-block">
              Main content 3
              <TextInput id="stacked-input-3" labelText="Enter an important value here" />
            </div>
          </Tearsheet>}
      </div>
    </>;
}`,...(me=(de=B.parameters)==null?void 0:de.docs)==null?void 0:me.source}}};var fe,he,ye;S.parameters={...S.parameters,docs:{...(fe=S.parameters)==null?void 0:fe.docs,source:{originalSource:`({
  mixedSizes,
  actions,
  decorator,
  slug,
  ...args
}, context) => {
  const [open1, setOpen1] = useState(false);
  const [open2, setOpen2] = useState(false);
  const [open3, setOpen3] = useState(false);
  const ref = useRef(undefined);
  const openButton1 = useRef();
  const wiredActions1 = Array.prototype.map.call(actions, action => {
    if (action.label === 'Cancel') {
      const previousClick = action.onClick;
      return {
        ...action,
        onClick: evt => {
          setOpen1(false);
          previousClick(evt);
        }
      };
    }
    return action;
  });
  const wiredActions2 = Array.prototype.map.call(actions, action => {
    if (action.label === 'Cancel') {
      const previousClick = action.onClick;
      return {
        ...action,
        onClick: evt => {
          setOpen2(false);
          previousClick(evt);
        }
      };
    }
    return action;
  });
  const wiredActions3 = Array.prototype.map.call(actions, action => {
    if (action.label === 'Cancel') {
      const previousClick = action.onClick;
      return {
        ...action,
        onClick: evt => {
          setOpen3(false);
          previousClick(evt);
        }
      };
    }
    return action;
  });
  const VariableSizeTearsheet = mixedSizes ? TearsheetNarrow : Tearsheet;
  useEffect(() => {
    setTimeout(() => {
      setOpen1(context.viewMode !== 'docs');
      setOpen2(context.viewMode !== 'docs');
      setOpen3(context.viewMode !== 'docs');
    }, 0);
  }, []);
  return <>
      <style>{\`.\${pkg.prefix}--tearsheet { opacity: 0 }\`};</style>
      <div style={{
      height: '3rem'
    }} data-reserve-space="for toggle buttons" />
      <ButtonSet style={{
      display: 'flex',
      position: 'fixed',
      top: 0,
      left: 0,
      zIndex: 10000
    }}>
        <Button onClick={() => setOpen1(!open1)} ref={openButton1}>
          Toggle&nbsp;tearsheet&nbsp;1
        </Button>
        <Button onClick={() => setOpen2(!open2)}>
          Toggle&nbsp;tearsheet&nbsp;2
        </Button>
        {!mixedSizes && <Button onClick={() => setOpen3(!open3)}>
            Toggle&nbsp;tearsheet&nbsp;3
          </Button>}
      </ButtonSet>
      <div ref={ref}>
        <Tearsheet {...args} actions={wiredActions1} headerActions={<ButtonSet>
              <Button kind="primary" size="sm" style={{
          width: 'initial'
        }} onClick={() => setOpen2(true)} disabled={open2}>
                Open tearsheet 2
              </Button>
            </ButtonSet>} title="Tearsheet 1" open={open1} onClose={() => setOpen1(false)} selectorPrimaryFocus="#stacked-input-1" decorator={decorator && sampleDecorator(decorator)} slug={slug && sampleDecorator(slug)} launcherButtonRef={openButton1}>
          <div className="tearsheet-stories__dummy-content-block">
            Main content 1
            <TextInput id="stacked-input-1" labelText="Enter an important value here" />
          </div>
        </Tearsheet>
        <VariableSizeTearsheet {...args} actions={wiredActions2} headerActions={<ButtonSet>
              <Button kind="primary" size="sm" style={{
          width: 'initial'
        }} onClick={() => setOpen3(true)} disabled={open3}>
                Open tearsheet 3
              </Button>
            </ButtonSet>} title="Tearsheet 2" open={open2} onClose={() => setOpen2(false)} selectorPrimaryFocus="#stacked-input-2" decorator={decorator && sampleDecorator(decorator)} slug={slug && sampleDecorator(slug)}>
          <div className="tearsheet-stories__dummy-content-block">
            Main content 2
            <TextInput id="stacked-input-2" labelText="Enter an important value here" />
          </div>
        </VariableSizeTearsheet>
        {!mixedSizes && <Tearsheet {...args} actions={wiredActions3} title="Tearsheet 3" open={open3} onClose={() => setOpen3(false)} selectorPrimaryFocus="#stacked-input-3" decorator={decorator && sampleDecorator(decorator)} slug={slug && sampleDecorator(slug)}>
            <div className="tearsheet-stories__dummy-content-block">
              Main content 3
              <TextInput id="stacked-input-3" labelText="Enter an important value here" />
            </div>
          </Tearsheet>}
      </div>
    </>;
}`,...(ye=(he=S.parameters)==null?void 0:he.docs)==null?void 0:ye.source}}};const tn=["tearsheet","withNavigation","withInfluencer","ReturnFocusToOpenButton","firstElementDisabled","firstElementReadOnly","fullyLoaded","stacked","stackedMixedSizes"];export{F as ReturnFocusToOpenButton,tn as __namedExportsOrder,en as default,x as firstElementDisabled,w as firstElementReadOnly,A as fullyLoaded,B as stacked,S as stackedMixedSizes,k as tearsheet,O as withInfluencer,E as withNavigation};
