const g=o=>o?.rows?.filter(t=>o.shouldDisableSelectRow&&o.shouldDisableSelectRow(t)).map(t=>t.id)||[],R=o=>{w(o),a(o);let c=[];const t=s=>{c=g(s)};o.useInstance.push(t);const e=(s,{row:d,instance:l})=>[s,{disabled:l?.shouldDisableSelectRow?.(d),nonselectablerows:c}];o.getRowProps.push(e)},w=o=>{const c=(t,{instance:e})=>{const s=e?.rows?.filter(l=>!(e.shouldDisableSelectRow&&e.shouldDisableSelectRow(l)))||[],d=s?.length>0&&s.every(({id:l})=>e?.state?.selectedRowIds?.[l]);return[t,{onChange:l=>{s.forEach(r=>r?.toggleRowSelected?.(l.target.checked))},style:{cursor:"pointer"},checked:d,disabled:e?.disableSelectAll,title:e?.disableSelectRowsProps?.labels?.toggleAllRowsLabel||"Toggle All Rows Selected",indeterminate:!!(!d&&Object.keys(e?.state?.selectedRowIds||{}).length)}]};o.getToggleAllRowsSelectedProps.push(c)},a=o=>{const c=(t,{instance:e})=>{const s=e?.page?.filter(l=>!(e.shouldDisableSelectRow&&e.shouldDisableSelectRow(l)))||[],d=s?.length>0&&s.every(({id:l})=>e?.state?.selectedRowIds?.[l]);return[t,{onChange:l=>{s.forEach(r=>r.toggleRowSelected(l.target.checked))},style:{cursor:"pointer"},checked:d,disabled:e?.disableSelectAll,title:e?.disableSelectRowsProps?.labels?.toggleAllRowsLabel||"Toggle All Rows Selected",indeterminate:!!(!d&&e?.page?.some(({id:l})=>e?.state?.selectedRowIds?.[l]))}]};o.getToggleAllPageRowsSelectedProps.push(c)};export{R as u};
