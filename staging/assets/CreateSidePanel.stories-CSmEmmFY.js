import{e,r as o}from"./index-DtHxqM--.js";import{b as N}from"./index-CMVdkQrl.js";import{B as E,p as L}from"./settings-C3kz8lqM.js";import{D as b}from"./Dropdown-B-2WRuCt.js";import{F as P}from"./FormGroup-BRiLUXWl.js";import{G as y}from"./Grid-BLDZi_lT.js";import{C as $}from"./Column-DAwp7jN5.js";import{N as n}from"./NumberInput-DxIwlEjs.js";import{T as x}from"./TextInput-CixU1YEY.js";import{H,a as W}from"./HeaderName-CLiXXnKj.js";import{H as U}from"./HeaderContainer-QOIzdrez.js";import{A as V,c as z}from"./index-D5LR258U.js";import{C as g}from"./CreateSidePanel-DMZJWrzn.js";import{S as Y}from"./StoryDocsPage-Z4lHM_h2.js";import{s as j}from"./sidePanelDecorator-P_ytUVdI.js";import"./_commonjsHelpers-Cpj98o6Y.js";import"./index-DgLvjnYm.js";import"./index-CiYgQLeJ.js";import"./events-OVwOsPzJ.js";import"./index-BLvAv8yb.js";import"./index-BCwPvCrC.js";import"./inheritsLoose-D3Az7yH5.js";import"./FormContext-C4Nuixum.js";import"./mergeRefs-CTUecegF.js";import"./bucket-18-xYgoy0Nr.js";import"./useNormalizedInputProps-DMHlP-q8.js";import"./Text-DeLhjZ72.js";import"./clamp--00YEiB8.js";import"./bucket-16-DL_X4byx.js";import"./bucket-0-CHtg8bFp.js";import"./Link-B81DqA8j.js";import"./bucket-17-BInI-cSl.js";import"./devtools-CJD9WatR.js";import"./Form-B9aRNkwu.js";import"./uuidv4-BN2rGLQG.js";import"./SidePanel-DtfXNav8.js";import"./index-BUpfIj5_.js";import"./props-helper-3VCN3cvm.js";import"./index-D1OMpwii.js";import"./useFocus-WYpTfz8b.js";import"./usePreviousValue-CuNkkQo9.js";import"./usePrefersReducedMotion-DvL5kgOM.js";import"./useIsomorphicEffect-DztsuiUB.js";import"./usePresence-DE1zreM1.js";import"./ActionSet-CwOjg9U4.js";import"./ButtonSet-S29aEq84.js";import"./InlineLoading-C_FY6vWy.js";import"./bucket-6-CRocNvF-.js";import"./index-CK5iQhpn.js";import"./iframe-BEyU_vaq.js";import"./index-Dytf1aFS.js";import"./index-DrFu-skq.js";import"./story-helper-CmBIJVOZ.js";import"./Content-DljIn43l.js";const J=".create-side-panel-stories__example-container{display:grid;align-items:flex-end;grid-gap:.75rem;grid-template-columns:1fr 1fr}.create-side-panel-stories__example-form-group .cds--label{margin-block-end:0}.c4p--create-side-panel .cds--number__control-btn:before,.c4p--create-side-panel .cds--number__control-btn:after{background-color:var(--cds-field-02, #ffffff)}.create-side-panel-stories__container{display:flex;flex-direction:column;block-size:100vh}.create-side-panel-stories__content{flex-grow:1}.create-side-panel-stories__toggle{position:absolute;inset-block-start:50%;inset-inline-start:50%;transform:translate(-50%,-50%)}",G=()=>e.createElement(Y,{altGuidelinesHref:[{href:"https://pages.github.ibm.com/carbon/ibm-products/patterns/create-flows/usage/#side-panel",label:"CreateSidePanel usage guidelines"}],blocks:[{story:r},{title:"Form validation",description:`All forms, including that within the \`CreateSidePanel\` should follow @carbon/ibm-products
guidelines for form validation.

This includes the following:

- The \`Submit\` button in the side panel should be disabled, until all required
  inputs are filled in and valid
- All required inputs should _only_ throw an invalid error _after_ the element
  loses focus
- All optional form fields should have an \`(optional)\` text at the end of the
  input \`labelText\`. Optional should always be in parentheses

You can find more information on how to validate your form fields in
[Carbon's Form usage page](https://www.carbondesignsystem.com/components/form/usage).`},{title:"With AI Label",description:"An AI Label is intended for any scenario where something is being generated by AI to reinforce AI transparency, accountability, and explainability at the UI level. A Carbon AI Label can be provided to the Tearsheet component by including an `aiLabel` property on it and providing the carbon AILabel component as its own custom component.",source:{language:"html",code:`
<CreateSidePanel
  {...args}
  slug={
    // carbon AILabel component
    <AILabel
      className="ai-label-container"
      autoAlign={false}
      align="bottom-right"
    >
      <AILabelContent>... ...</AILabelContent>
    </AILabel>
  }
>
  ...
</CreateSidePanel>
                `}}]});G.__docgenInfo={description:"",methods:[],displayName:"DocsPage"};const w=`${L.prefix}--create-side-panel`,t="create-side-panel-stories__",S=e.createElement(V,{className:"slug-container",size:"xs"},e.createElement(z,null,e.createElement("div",null,e.createElement("p",{className:"secondary"},"AI Explained"),e.createElement("h1",null,"84%"),e.createElement("p",{className:"secondary bold"},"Confidence score"),e.createElement("p",{className:"secondary"},"This is not really Lorem Ipsum but the spell checker did not like the previous text with it's non-words which is why this unwieldy sentence, should one choose to call it that, here."),e.createElement("hr",null),e.createElement("p",{className:"secondary"},"Model type"),e.createElement("p",{className:"bold"},"Foundation model")))),T={title:"Create partitions",subtitle:"Specify the details of the partitions you're creating",formTitle:"Core configuration",formDescription:"We recommend you fill out and evaluate these details at a minimum before deploying your topic.",primaryButtonText:"Create",secondaryButtonText:"Cancel"},D=["Day(s)","Month(s)","Year(s)"],h=()=>e.createElement(U,{render:()=>e.createElement(H,null,e.createElement(W,{href:"/",prefix:"IBM"},"Cloud Pak"))}),Ze={title:"IBM Products/Patterns/Create flows/CreateSidePanel",component:g,tags:["autodocs"],parameters:{layout:"fullscreen",styles:J,docs:{page:G}},argTypes:{slug:{control:{type:"select",labels:{0:"No AI slug",1:"with AI Slug"},default:0},options:[0,1]}},decorators:[j(h,t)]},K=({slug:s,...l},m)=>{const c=N(),[a,i]=o.useState(m.viewMode!=="docs");return e.createElement(e.Fragment,null,h(),e.createElement(y,{id:"ibm-products-page-content"},e.createElement($,{lg:{span:2,start:8}},e.createElement(E,{onClick:()=>i(!a)},a?"Close side panel":"Open side panel"))),e.createElement(g,{...l,open:a,onRequestClose:()=>i(!1),onRequestSubmit:()=>i(!1),selectorPrimaryFocus:`.${c}--text-input`,slug:s&&S},e.createElement(x,{id:"create-side-panel-topic-name-a",labelText:"Topic name",className:`${t}form-item`,placeholder:"Enter topic name"}),e.createElement(n,{id:"1",className:`${t}form-item`,label:"Partitions",min:0,max:50,value:1,iconDescription:"Choose a number"}),e.createElement(n,{id:"2",className:`${t}form-item`,label:"Replicas",min:0,max:50,value:1,iconDescription:"Choose a number"}),e.createElement(n,{id:"3",className:`${t}form-item`,label:"Minimum in-sync replicas",min:0,max:50,value:1,iconDescription:"Choose a number"}),e.createElement("div",{style:{display:"grid",alignItems:"flex-end",gridGap:"0.75rem",gridTemplateColumns:"1fr 1fr"}},e.createElement(n,{id:"4",className:`${t}form-item`,label:"Retention time",min:0,max:50,value:30,iconDescription:"Choose a number"}),e.createElement(b,{id:"create-side-panel-dropdown-options-a",items:D,initialSelectedItem:"Day(s)",label:"Options",titleText:"Options",className:`${t}form-item`})),e.createElement(n,{id:"5",className:`${t}form-item`,label:"Minimum in-sync replicas",min:0,max:50,value:1,iconDescription:"Choose a number"})))},Q=({slug:s,...l},m)=>{const c=N(),[a,i]=o.useState(m.viewMode!=="docs"),[p,C]=o.useState(""),[I,u]=o.useState(!1);return e.createElement(e.Fragment,null,h(),e.createElement(y,{id:"ibm-products-page-content"},e.createElement($,{lg:{span:2,start:8}},e.createElement(E,{onClick:()=>i(!a)},a?"Close side panel":"Open side panel"))),e.createElement(g,{...l,open:a,onRequestClose:()=>i(!1),onRequestSubmit:()=>i(!1),disableSubmit:!p.length,selectorPrimaryFocus:`.${c}--text-input`,slug:s&&S},e.createElement(x,{id:"create-side-panel-topic-name-b",labelText:"Topic name",className:`${t}form-item`,placeholder:"Enter topic name",onChange:v=>{C(v.target.value),u(!1)},onBlur:()=>{p.length===0&&u(!0)},invalid:I,invalidText:"This is a required field"}),e.createElement(n,{id:"1",className:`${t}form-item`,label:"Partitions",min:0,max:50,value:1,iconDescription:"Choose a number"}),e.createElement(n,{id:"2",className:`${t}form-item`,label:"Replicas",min:0,max:50,value:1,iconDescription:"Choose a number"}),e.createElement(n,{id:"3",className:`${t}form-item`,label:"Minimum in-sync replicas",min:0,max:50,value:1,iconDescription:"Choose a number"}),e.createElement("div",{className:`${t}example-container`},e.createElement(n,{id:"4",className:`${t}form-item`,label:"Retention time",min:0,max:50,value:30,iconDescription:"Choose a number"}),e.createElement(b,{id:"create-side-panel-dropdown-options-b","aria-label":"Dropdown",initialSelectedItem:"Day(s)",items:D,label:"Options",className:`${t}form-item`})),e.createElement(n,{id:"3",className:`${t}form-item`,label:"Minimum in-sync replicas",min:0,max:50,value:1,iconDescription:"Choose a number"})))},X=({slug:s,...l},m)=>{const c=N(),[a,i]=o.useState(m.viewMode!=="docs"),[p,C]=o.useState(""),[I,u]=o.useState(!1);return e.createElement(e.Fragment,null,h(),e.createElement(y,{id:"ibm-products-page-content"},e.createElement($,{lg:{span:2,start:8}},e.createElement(E,{onClick:()=>i(!a)},a?"Close side panel":"Open side panel"))),e.createElement(g,{...l,open:a,onRequestClose:()=>i(!1),onRequestSubmit:()=>i(!1),disableSubmit:!p.length,selectorPrimaryFocus:`.${c}--text-input`,slug:s&&S},e.createElement(P,{className:`${w}__form ${t}example-form-group`,legendText:"Personal information"},e.createElement(x,{id:"create-side-panel-first-name",labelText:"First name",className:`${t}form-item`,placeholder:"Enter topic name",onChange:v=>{C(v.target.value),u(!1)},onBlur:()=>{p.length===0&&u(!0)},invalid:I,invalidText:"This is a required field"}),e.createElement(b,{id:"create-side-panel-dropdown-bu",titleText:"Business unit","aria-label":"Dropdown",initialSelectedItem:"IBM Cloud platform",items:["IBM Cloud platform","AI Ops","Watson"],label:"Business unit",className:`${t}form-item`})),e.createElement(P,{className:`${w}__form ${t}example-form-group`,legendText:"Topic information"},e.createElement(x,{id:"create-side-panel-topic-name-c",labelText:"Topic name",className:`${t}form-item`,placeholder:"Enter topic name"}),e.createElement(n,{id:"1",className:`${t}form-item`,label:"Partitions",min:0,max:50,value:1,iconDescription:"Choose a number"}),e.createElement(n,{id:"2",className:`${t}form-item`,label:"Replicas",min:0,max:50,value:1,iconDescription:"Choose a number"}),e.createElement(n,{id:"3",className:`${t}form-item`,label:"Minimum in-sync replicas",min:0,max:50,value:1,iconDescription:"Choose a number"}),e.createElement("div",{className:`${t}example-container`},e.createElement(n,{id:"4",className:`${t}form-item`,label:"Retention time",min:0,max:50,value:30,iconDescription:"Choose a number"}),e.createElement(b,{id:"create-side-panel-dropdown-options-c","aria-label":"Dropdown",initialSelectedItem:"Day(s)",items:D,label:"Options",className:`${t}form-item`})),e.createElement(n,{id:"3",className:`${t}form-item`,label:"Minimum in-sync replicas",min:0,max:50,value:1,iconDescription:"Choose a number"}))))},r=K.bind({});r.args={selectorPageContent:"#ibm-products-page-content",...T};const d=Q.bind({});d.args={selectorPageContent:"#ibm-products-page-content",...T};const f=X.bind({});f.args={selectorPageContent:"#ibm-products-page-content",...T};var O,_,M;r.parameters={...r.parameters,docs:{...(O=r.parameters)==null?void 0:O.docs,source:{originalSource:`({
  slug,
  ...args
}, context) => {
  const carbonPrefix = usePrefix();
  const [open, setOpen] = useState(context.viewMode !== 'docs');
  return <>
      {renderUIShellHeader()}
      <Grid id="ibm-products-page-content">
        <Column lg={{
        span: 2,
        start: 8
      }}>
          <Button onClick={() => setOpen(!open)}>
            {open ? 'Close side panel' : 'Open side panel'}
          </Button>
        </Column>
      </Grid>
      <CreateSidePanel {...args} open={open} onRequestClose={() => setOpen(false)} onRequestSubmit={() => setOpen(false)} selectorPrimaryFocus={\`.\${carbonPrefix}--text-input\`} slug={slug && sampleSlug}>
        <TextInput id="create-side-panel-topic-name-a" labelText="Topic name" className={\`\${prefix}form-item\`} placeholder="Enter topic name" />
        <NumberInput id="1" className={\`\${prefix}form-item\`} label="Partitions" min={0} max={50} value={1} iconDescription="Choose a number" />
        <NumberInput id="2" className={\`\${prefix}form-item\`} label="Replicas" min={0} max={50} value={1} iconDescription="Choose a number" />
        <NumberInput id="3" className={\`\${prefix}form-item\`} label="Minimum in-sync replicas" min={0} max={50} value={1} iconDescription="Choose a number" />
        <div style={{
        display: 'grid',
        alignItems: 'flex-end',
        gridGap: '0.75rem',
        gridTemplateColumns: '1fr 1fr'
      }}>
          <NumberInput id="4" className={\`\${prefix}form-item\`} label="Retention time" min={0} max={50} value={30} iconDescription="Choose a number" />
          <Dropdown id="create-side-panel-dropdown-options-a" items={items} initialSelectedItem="Day(s)" label="Options" titleText="Options" className={\`\${prefix}form-item\`} />
        </div>
        <NumberInput id="5" className={\`\${prefix}form-item\`} label="Minimum in-sync replicas" min={0} max={50} value={1} iconDescription="Choose a number" />
      </CreateSidePanel>
    </>;
}`,...(M=(_=r.parameters)==null?void 0:_.docs)==null?void 0:M.source}}};var A,F,B;d.parameters={...d.parameters,docs:{...(A=d.parameters)==null?void 0:A.docs,source:{originalSource:`({
  slug,
  ...args
}, context) => {
  const carbonPrefix = usePrefix();
  const [open, setOpen] = useState(context.viewMode !== 'docs');
  const [textInput, setTextInput] = useState('');
  const [invalid, setInvalid] = useState(false);
  return <>
      {renderUIShellHeader()}
      <Grid id="ibm-products-page-content">
        <Column lg={{
        span: 2,
        start: 8
      }}>
          <Button onClick={() => setOpen(!open)}>
            {open ? 'Close side panel' : 'Open side panel'}
          </Button>
        </Column>
      </Grid>
      <CreateSidePanel {...args} open={open} onRequestClose={() => setOpen(false)} onRequestSubmit={() => setOpen(false)} disableSubmit={!textInput.length} selectorPrimaryFocus={\`.\${carbonPrefix}--text-input\`} slug={slug && sampleSlug}>
        <TextInput id="create-side-panel-topic-name-b" labelText="Topic name" className={\`\${prefix}form-item\`} placeholder="Enter topic name" onChange={e => {
        setTextInput(e.target.value);
        setInvalid(false);
      }} onBlur={() => {
        textInput.length === 0 && setInvalid(true);
      }} invalid={invalid} invalidText="This is a required field" />
        <NumberInput id="1" className={\`\${prefix}form-item\`} label="Partitions" min={0} max={50} value={1} iconDescription="Choose a number" />
        <NumberInput id="2" className={\`\${prefix}form-item\`} label="Replicas" min={0} max={50} value={1} iconDescription="Choose a number" />
        <NumberInput id="3" className={\`\${prefix}form-item\`} label="Minimum in-sync replicas" min={0} max={50} value={1} iconDescription="Choose a number" />
        <div className={\`\${prefix}example-container\`}>
          <NumberInput id="4" className={\`\${prefix}form-item\`} label="Retention time" min={0} max={50} value={30} iconDescription="Choose a number" />
          <Dropdown id="create-side-panel-dropdown-options-b" aria-label="Dropdown" initialSelectedItem="Day(s)" items={items} label="Options" className={\`\${prefix}form-item\`} />
        </div>
        <NumberInput id="3" className={\`\${prefix}form-item\`} label="Minimum in-sync replicas" min={0} max={50} value={1} iconDescription="Choose a number" />
      </CreateSidePanel>
    </>;
}`,...(B=(F=d.parameters)==null?void 0:F.docs)==null?void 0:B.source}}};var R,k,q;f.parameters={...f.parameters,docs:{...(R=f.parameters)==null?void 0:R.docs,source:{originalSource:`({
  slug,
  ...args
}, context) => {
  const carbonPrefix = usePrefix();
  const [open, setOpen] = useState(context.viewMode !== 'docs');
  const [textInput, setTextInput] = useState('');
  const [invalid, setInvalid] = useState(false);
  return <>
      {renderUIShellHeader()}
      <Grid id="ibm-products-page-content">
        <Column lg={{
        span: 2,
        start: 8
      }}>
          <Button onClick={() => setOpen(!open)}>
            {open ? 'Close side panel' : 'Open side panel'}
          </Button>
        </Column>
      </Grid>
      <CreateSidePanel {...args} open={open} onRequestClose={() => setOpen(false)} onRequestSubmit={() => setOpen(false)} disableSubmit={!textInput.length} selectorPrimaryFocus={\`.\${carbonPrefix}--text-input\`} slug={slug && sampleSlug}>
        <FormGroup className={\`\${blockClass}__form \${prefix}example-form-group\`} legendText="Personal information">
          <TextInput id="create-side-panel-first-name" labelText="First name" className={\`\${prefix}form-item\`} placeholder="Enter topic name" onChange={e => {
          setTextInput(e.target.value);
          setInvalid(false);
        }} onBlur={() => {
          textInput.length === 0 && setInvalid(true);
        }} invalid={invalid} invalidText="This is a required field" />
          <Dropdown id="create-side-panel-dropdown-bu" titleText="Business unit" aria-label="Dropdown" initialSelectedItem="IBM Cloud platform" items={['IBM Cloud platform', 'AI Ops', 'Watson']} label="Business unit" className={\`\${prefix}form-item\`} />
        </FormGroup>
        <FormGroup className={\`\${blockClass}__form \${prefix}example-form-group\`} legendText="Topic information">
          <TextInput id="create-side-panel-topic-name-c" labelText="Topic name" className={\`\${prefix}form-item\`} placeholder="Enter topic name" />
          <NumberInput id="1" className={\`\${prefix}form-item\`} label="Partitions" min={0} max={50} value={1} iconDescription="Choose a number" />
          <NumberInput id="2" className={\`\${prefix}form-item\`} label="Replicas" min={0} max={50} value={1} iconDescription="Choose a number" />
          <NumberInput id="3" className={\`\${prefix}form-item\`} label="Minimum in-sync replicas" min={0} max={50} value={1} iconDescription="Choose a number" />
          <div className={\`\${prefix}example-container\`}>
            <NumberInput id="4" className={\`\${prefix}form-item\`} label="Retention time" min={0} max={50} value={30} iconDescription="Choose a number" />
            <Dropdown id="create-side-panel-dropdown-options-c" aria-label="Dropdown" initialSelectedItem="Day(s)" items={items} label="Options" className={\`\${prefix}form-item\`} />
          </div>
          <NumberInput id="3" className={\`\${prefix}form-item\`} label="Minimum in-sync replicas" min={0} max={50} value={1} iconDescription="Choose a number" />
        </FormGroup>
      </CreateSidePanel>
    </>;
}`,...(q=(k=f.parameters)==null?void 0:k.docs)==null?void 0:q.source}}};const et=["Default","WithFormValidation","WithMultipleForms"];export{r as Default,d as WithFormValidation,f as WithMultipleForms,et as __namedExportsOrder,Ze as default};
