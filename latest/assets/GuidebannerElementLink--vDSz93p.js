import{d as c,j as F,P as n}from"./index-CMVdkQrl.js";import{p as d,B as w,I as v,Q as H}from"./settings-C3kz8lqM.js";import{e,r as f}from"./index-DtHxqM--.js";import{b as M,c as Q}from"./index-CS-Uexcx.js";import{g as b}from"./devtools-CJD9WatR.js";import{u as J}from"./uuidv4-BN2rGLQG.js";import{C as K}from"./Carousel-BWNfaVcq.js";import{a as U,b as X}from"./bucket-2-D0m0gcwr.js";import{c as Y}from"./bucket-9-m0gEOM1f.js";import{L as Z}from"./Link-C2-sHeI7.js";const a=`${d.prefix}--guidebanner`,x="Guidebanner",p={collapsible:!1,withLeftGutter:!1,closeIconDescription:"Close",collapseButtonLabel:"Read less",expandButtonLabel:"Read more",nextIconDescription:"Next",previousIconDescription:"Back"};let h=e.forwardRef(({children:r,className:s,collapsible:t=p.collapsible,onClose:o,withLeftGutter:i=p.withLeftGutter,closeIconDescription:l=p.closeIconDescription,collapseButtonLabel:N=p.collapseButtonLabel,expandButtonLabel:L=p.expandButtonLabel,nextIconDescription:B=p.nextIconDescription,previousIconDescription:D=p.previousIconDescription,title:P,...z},V)=>{const C=f.useRef(null),S=f.useRef(null),[T,O]=f.useState(0),[I,A]=f.useState(!1),[m,W]=f.useState(!!t),j=()=>{W(u=>!u)},G=`${J()}--carousel-content-id`;return e.createElement("div",{...z,"aria-owns":m?void 0:G,className:c(a,s,t&&`${a}__collapsible`,m&&`${a}__collapsible-collapsed`,i&&`${a}__with-left-gutter`),ref:V,...b(x)},e.createElement(Y,{size:20,className:`${a}__icon-idea`}),e.createElement("div",{className:`${a}__title`},P),e.createElement(K,{id:G,className:`${a}__carousel`,fadedEdgeColor:{left:Q,right:M},ref:C,onChangeIsScrollable:u=>{A(u)},onScroll:u=>{O(u)}},r),e.createElement("div",{className:c([t||I?`${a}__navigation`:null])},t&&e.createElement(w,{kind:"ghost",size:"md",className:`${a}__toggle-button`,onClick:j,ref:S,"aria-controls":m?void 0:G,"aria-expanded":!m},m?L:N),I&&e.createElement(e.Fragment,null,e.createElement("span",{className:c(`${a}__back-button`,[T===0?`${a}__back-button--disabled`:null])},e.createElement(v,{align:"top",disabled:T===0,kind:"ghost",label:D,onClick:()=>{C.current.scrollPrev()},size:"md"},e.createElement(U,{size:16}))),e.createElement("span",{className:c(`${a}__next-button`,[T===1?`${a}__next-button--disabled`:null])},e.createElement(v,{align:"top-right",disabled:T===1,kind:"ghost",label:B,onClick:()=>{C.current.scrollNext()},size:"md"},e.createElement(X,{size:16}))))),o&&e.createElement("span",{className:`${a}__close-button`},e.createElement(v,{align:"bottom-end",kind:"ghost",label:l,onClick:o,size:"md"},e.createElement(F,{size:16}))))});h=d.checkComponentEnabled(h,x);h.displayName=x;h.propTypes={children:(r,s)=>{let t;const o=r[s];return o||(t=new Error("`Guidebanner` requires one or more children of type `GuidebannerElement`.")),e.Children.forEach(o,i=>{var l,N;i.type.displayName!=="GuidebannerElement"&&(t=new Error(`\`Guidebanner\` only accepts children of type \`GuidebannerElement\`, found \`${((l=i.type)==null?void 0:l.displayName)||((N=i.type)==null?void 0:N.name)||i.type}\` instead.`))}),t},className:n.string,closeIconDescription:n.string,collapseButtonLabel:n.string,collapsible:n.bool,expandButtonLabel:n.string,nextIconDescription:n.string,onClose:n.func,previousIconDescription:n.string,title:n.string.isRequired,withLeftGutter:n.bool};h.__docgenInfo={description:`The guide banner sits at the top of a page, or page-level tab,
to introduce foundational concepts related to the page's content.`,methods:[],displayName:"Guidebanner",props:{children:{required:!1,tsType:{name:"ReactNode"},description:`Provide the contents of the Guidebanner.
One or more GuidebannerElement components are required.`,type:{name:"custom",raw:`(props, propName) => {
  let error;
  const prop = props[propName];
  if (!prop) {
    error = new Error(
      '\`Guidebanner\` requires one or more children of type \`GuidebannerElement\`.'
    );
  }
  React.Children.forEach(prop, (child) => {
    if (child.type.displayName !== 'GuidebannerElement') {
      // If child element is not \`GuidebannerElement\`, then show:
      // Carbon Products component's \`displayName\` (child.type.displayName) or
      // React component's \`name\` (child.type.name) or
      // HTML element's tag name (child.type).
      error = new Error(
        \`\\\`Guidebanner\\\` only accepts children of type \\\`GuidebannerElement\\\`, found \\\`\${
          child.type?.displayName || child.type?.name || child.type
        }\\\` instead.\`
      );
    }
  });
  return error;
}`}},className:{required:!1,tsType:{name:"string"},description:"Provide an optional class to be applied to the containing node.",type:{name:"string"}},closeIconDescription:{required:!1,tsType:{name:"string"},description:"Tooltip text and aria label for the Close button icon.",defaultValue:{value:"'Close'",computed:!1},type:{name:"string"}},collapseButtonLabel:{required:!1,tsType:{name:"string"},description:"Text label for the Collapse button.",defaultValue:{value:"'Read less'",computed:!1},type:{name:"string"}},collapsible:{required:!1,tsType:{name:"boolean"},description:`When true, the Guidebanner will initialize in a collapsed state,
showing the title and the Expand button.

When expanded, it will show the GuidebannerElement child components and the Collapse button.`,defaultValue:{value:"false",computed:!1},type:{name:"bool"}},expandButtonLabel:{required:!1,tsType:{name:"string"},description:"Text label for the Expand button.",defaultValue:{value:"'Read more'",computed:!1},type:{name:"string"}},nextIconDescription:{required:!1,tsType:{name:"string"},description:"Tooltip text and aria label for the Next button icon.",defaultValue:{value:"'Next'",computed:!1},type:{name:"string"}},onClose:{required:!1,tsType:{name:"signature",type:"function",raw:"() => void",signature:{arguments:[],return:{name:"void"}}},description:`If defined, a Close button will render in the top-right corner and a
callback function will be triggered when button is clicked.`,type:{name:"func"}},previousIconDescription:{required:!1,tsType:{name:"string"},description:"Tooltip text and aria label for the Back button icon.",defaultValue:{value:"'Back'",computed:!1},type:{name:"string"}},title:{required:!0,tsType:{name:"string"},description:"Title text.",type:{name:"string"}},withLeftGutter:{required:!1,tsType:{name:"boolean"},description:`If true, insert 1 rem of "space" on the left of the component.
This will allow the component's content to line up with other
content on the page under special circumstances.`,defaultValue:{value:"false",computed:!1},type:{name:"bool"}}}};const _=`${d.prefix}--guidebanner__element`,$="GuidebannerElement";let g=e.forwardRef(({button:r,className:s,description:t,title:o,...i},l)=>e.createElement("div",{...i,className:c(_,s),ref:l,...b($)},o&&e.createElement("h2",{className:`${_}-title`},o),t&&e.createElement("p",{className:`${_}-content`},t),r&&e.createElement("div",{className:`${_}-buttons`},r)));g=d.checkComponentEnabled(g,$);g.displayName=$;g.propTypes={button:n.node,className:n.string,description:n.oneOfType([n.string,n.node]).isRequired,title:n.string};g.__docgenInfo={description:`The GuidebannerElement is a required child component of the Guidebanner,
and acts as a container for a CarouselItem.`,methods:[],displayName:"GuidebannerElement",props:{button:{required:!1,tsType:{name:"ReactNode"},description:`An optional button can be rendered below the description.
This can be a link, button, Coachmark button, etc.`,type:{name:"node"}},className:{required:!1,tsType:{name:"string"},description:"Provide an optional class to be applied to the containing node.",type:{name:"string"}},description:{required:!0,tsType:{name:"ReactNode"},description:"The description of the element.",type:{name:"union",value:[{name:"string"},{name:"node"}]}},title:{required:!1,tsType:{name:"string"},description:"The title of the element.",type:{name:"string"}}}};const R=`${d.prefix}--guidebanner__element-button`,k="GuidebannerElementButton",ee={iconDescription:"Crossroads"};let y=e.forwardRef(({children:r,className:s,iconDescription:t=ee.iconDescription,type:o,...i},l)=>o==="primary"?e.createElement(w,{...i,className:c(R,s),iconDescription:t,kind:"tertiary",ref:l,renderIcon:()=>e.createElement(H,{size:16}),role:"button",size:"md",...b(k)},r):e.createElement(w,{...i,className:c(R,s),kind:"ghost",role:"button",size:"md",...b(k)},r));y=d.checkComponentEnabled(y,k);y.displayName=k;y.propTypes={children:n.node.isRequired,className:n.string,type:n.string};y.__docgenInfo={description:"One of two buttons styled specifically for the GuidebannerElement.",methods:[],displayName:"GuidebannerElementButton",props:{children:{required:!0,tsType:{name:"ReactNode"},description:"Provide the contents of the GuidebannerElementLink.",type:{name:"node"}},className:{required:!1,tsType:{name:"string"},description:"Provide an optional class to be applied to the containing node.",type:{name:"string"}},iconDescription:{required:!1,tsType:{name:"string"},description:"Provide a description for the icon.",defaultValue:{value:"'Crossroads'",computed:!1}},type:{required:!1,tsType:{name:"string"},description:`If type is "primary", then return a tertiary button with the "crossroads" icon,
else return a ghost button.`,type:{name:"string"}}}};const ne=`${d.prefix}--guidebanner__element-link`,q="GuidebannerElementLink";let E=e.forwardRef(({children:r,className:s,...t},o)=>e.createElement(Z,{...t,className:c(ne,s),kind:"ghost",ref:o,role:"link",size:"md",...b(q)},r));E=d.checkComponentEnabled(E,q);E.displayName=q;E.propTypes={children:n.node.isRequired,className:n.string};E.__docgenInfo={description:"A link styled specifically for the GuidebannerElement.",methods:[],displayName:"GuidebannerElementLink",props:{children:{required:!0,tsType:{name:"ReactNode"},description:"Provide the contents of the GuidebannerElementLink.",type:{name:"node"}},className:{required:!1,tsType:{name:"string"},description:"Provide an optional class to be applied to the containing node.",type:{name:"string"}}}};export{h as G,g as a,y as b,E as c};
