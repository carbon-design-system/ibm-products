import{e,r as u,c as l,p as h,ex as j,ey as H,B as T,V as E,l as J,P as t,cO as K}from"./iframe-BCQS5_Al.js";import{g as b}from"./devtools-BnxPUADb.js";import{u as Q}from"./uuidv4-BN2rGLQG.js";import{C as U}from"./Carousel-PsMly5Oy.js";import{C as X,a as Y}from"./bucket-2-CBnjIFj8.js";import{e as Z}from"./bucket-9-DNHV7TPt.js";import{L as ee}from"./Link-C98KlpiF.js";const n=`${h.prefix}--guidebanner`,$="Guidebanner",c={collapsible:!1,withLeftGutter:!1,closeIconDescription:"Close",collapseButtonLabel:"Read less",expandButtonLabel:"Read more",nextIconDescription:"Next",previousIconDescription:"Back"},k=e.forwardRef((o,i)=>{const{children:s,className:r,collapsible:a=c.collapsible,onClose:d,withLeftGutter:L=c.withLeftGutter,closeIconDescription:R=c.closeIconDescription,collapseButtonLabel:D=c.collapseButtonLabel,expandButtonLabel:B=c.expandButtonLabel,nextIconDescription:P=c.nextIconDescription,previousIconDescription:z=c.previousIconDescription,title:S,...O}=o,y=u.useRef(null),A=u.useRef(null),[f,V]=u.useState(0),[I,W]=u.useState(!1),[p,F]=u.useState(!!a),M=()=>{F(m=>!m)},N=`${Q()}--carousel-content-id`;return e.createElement("div",{...O,"aria-owns":p?void 0:N,className:l(n,r,a&&`${n}__collapsible`,p&&`${n}__collapsible-collapsed`,L&&`${n}__with-left-gutter`),ref:i,...b($)},e.createElement(Z,{size:20,className:`${n}__icon-idea`}),e.createElement("div",{className:`${n}__title`},S),e.createElement(U,{id:N,className:`${n}__carousel`,fadedEdgeColor:{left:H,right:j},ref:y,onChangeIsScrollable:m=>{W(m)},onScroll:m=>{V(m)},isScrollMode:!0},s),e.createElement("div",{className:l([a||I?`${n}__navigation`:null])},a&&e.createElement(T,{kind:"ghost",size:"md",className:`${n}__toggle-button`,onClick:M,ref:A,"aria-controls":p?void 0:N,"aria-expanded":!p},p?B:D),I&&e.createElement(e.Fragment,null,e.createElement("span",{className:l(`${n}__back-button`,[f===0?`${n}__back-button--disabled`:null])},e.createElement(E,{align:"top",disabled:f===0,kind:"ghost",label:z,onClick:()=>{y.current.scrollPrev()},size:"md"},e.createElement(X,{size:16}))),e.createElement("span",{className:l(`${n}__next-button`,[f===1?`${n}__next-button--disabled`:null])},e.createElement(E,{align:"top-right",disabled:f===1,kind:"ghost",label:P,onClick:()=>{y.current.scrollNext()},size:"md"},e.createElement(Y,{size:16}))))),d&&e.createElement("span",{className:`${n}__close-button`},e.createElement(E,{align:"bottom-end",kind:"ghost",label:R,onClick:d,size:"md"},e.createElement(J,{size:16}))))});k.displayName=$;k.propTypes={children:t.node,className:t.string,closeIconDescription:t.string,collapseButtonLabel:t.string,collapsible:t.bool,expandButtonLabel:t.string,nextIconDescription:t.string,onClose:t.func,previousIconDescription:t.string,title:t.string.isRequired,withLeftGutter:t.bool};k.__docgenInfo={description:`The guide banner sits at the top of a page, or page-level tab,
to introduce foundational concepts related to the page's content.`,methods:[],displayName:"Guidebanner",props:{children:{required:!1,tsType:{name:"ReactNode"},description:`Provide the contents of the Guidebanner.
One or more GuidebannerElement components are required.`,type:{name:"node"}},className:{required:!1,tsType:{name:"string"},description:"Provide an optional class to be applied to the containing node.",type:{name:"string"}},closeIconDescription:{required:!1,tsType:{name:"string"},description:"Tooltip text and aria label for the Close button icon.",type:{name:"string"}},collapseButtonLabel:{required:!1,tsType:{name:"string"},description:"Text label for the Collapse button.",type:{name:"string"}},collapsible:{required:!1,tsType:{name:"boolean"},description:`When true, the Guidebanner will initialize in a collapsed state,
showing the title and the Expand button.

When expanded, it will show the GuidebannerElement child components and the Collapse button.`,type:{name:"bool"}},expandButtonLabel:{required:!1,tsType:{name:"string"},description:"Text label for the Expand button.",type:{name:"string"}},nextIconDescription:{required:!1,tsType:{name:"string"},description:"Tooltip text and aria label for the Next button icon.",type:{name:"string"}},onClose:{required:!1,tsType:{name:"signature",type:"function",raw:"() => void",signature:{arguments:[],return:{name:"void"}}},description:`If defined, a Close button will render in the top-right corner and a
callback function will be triggered when button is clicked.`,type:{name:"func"}},previousIconDescription:{required:!1,tsType:{name:"string"},description:"Tooltip text and aria label for the Back button icon.",type:{name:"string"}},title:{required:!0,tsType:{name:"string"},description:"Title text.",type:{name:"string"}},withLeftGutter:{required:!1,tsType:{name:"boolean"},description:`If true, insert 1 rem of "space" on the left of the component.
This will allow the component's content to line up with other
content on the page under special circumstances.`,type:{name:"bool"}}}};const g=`${h.prefix}--guidebanner__element`,q="GuidebannerElement",x=e.forwardRef(({button:o,className:i,description:s,title:r,...a},d)=>e.createElement("div",{...a,className:l(g,i),ref:d,...b(q)},r&&e.createElement("h2",{className:`${g}-title`},r),s&&e.createElement("p",{className:`${g}-content`},s),o&&e.createElement("div",{className:`${g}-buttons`},o)));x.displayName=q;x.propTypes={button:t.node,className:t.string,description:t.oneOfType([t.string,t.node]).isRequired,title:t.string};x.__docgenInfo={description:`The GuidebannerElement is a required child component of the Guidebanner,
and acts as a container for a CarouselItem.`,methods:[],displayName:"GuidebannerElement",props:{button:{required:!1,tsType:{name:"ReactNode"},description:`An optional button can be rendered below the description.
This can be a link, button, Coachmark button, etc.`,type:{name:"node"}},className:{required:!1,tsType:{name:"string"},description:"Provide an optional class to be applied to the containing node.",type:{name:"string"}},description:{required:!0,tsType:{name:"ReactNode"},description:"The description of the element.",type:{name:"union",value:[{name:"string"},{name:"node"}]}},title:{required:!1,tsType:{name:"string"},description:"The title of the element.",type:{name:"string"}}}};const G=`${h.prefix}--guidebanner__element-button`,_="GuidebannerElementButton",te={iconDescription:"Crossroads"},C=e.forwardRef(({children:o,className:i,iconDescription:s=te.iconDescription,type:r,...a},d)=>r==="primary"?e.createElement(T,{...a,className:l(G,i),iconDescription:s,kind:"tertiary",ref:d,renderIcon:()=>e.createElement(K,{size:16}),role:"button",size:"md",...b(_)},o):e.createElement(T,{...a,className:l(G,i),kind:"ghost",role:"button",size:"md",...b(_)},o));C.displayName=_;C.propTypes={children:t.node.isRequired,className:t.string,type:t.string};C.__docgenInfo={description:"One of two buttons styled specifically for the GuidebannerElement.",methods:[],displayName:"GuidebannerElementButton",props:{children:{required:!0,tsType:{name:"ReactNode"},description:"Provide the contents of the GuidebannerElementLink.",type:{name:"node"}},className:{required:!1,tsType:{name:"string"},description:"Provide an optional class to be applied to the containing node.",type:{name:"string"}},iconDescription:{required:!1,tsType:{name:"string"},description:"Provide a description for the icon.",defaultValue:{value:"'Crossroads'",computed:!1}},type:{required:!1,tsType:{name:"string"},description:`If type is "primary", then return a tertiary button with the "crossroads" icon,
else return a ghost button.`,type:{name:"string"}}}};const ne=`${h.prefix}--guidebanner__element-link`,w="GuidebannerElementLink",v=e.forwardRef(({children:o,className:i,...s},r)=>e.createElement(ee,{...s,className:l(ne,i),kind:"ghost",ref:r,role:"link",size:"md",...b(w)},o));v.displayName=w;v.propTypes={children:t.node.isRequired,className:t.string};v.__docgenInfo={description:"A link styled specifically for the GuidebannerElement.",methods:[],displayName:"GuidebannerElementLink",props:{children:{required:!0,tsType:{name:"ReactNode"},description:"Provide the contents of the GuidebannerElementLink.",type:{name:"node"}},className:{required:!1,tsType:{name:"string"},description:"Provide an optional class to be applied to the containing node.",type:{name:"string"}}}};export{k as G,x as a,C as b,v as c};
