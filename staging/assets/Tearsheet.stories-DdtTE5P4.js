import{e,r as n}from"./index-DtHxqM--.js";import{S as Re}from"./StoryDocsPage-BVOG86NQ.js";import{a as T}from"./index-B-lxVbXh.js";import{B as g,p as F}from"./settings-C3kz8lqM.js";import{S as K}from"./StringFormatter-zmudkQTI.js";import"./index-CMVdkQrl.js";import{B as z}from"./ButtonSet-S29aEq84.js";import{D as Fe}from"./Dropdown-B-2WRuCt.js";import{F as G}from"./Form-B9aRNkwu.js";import{F as V}from"./FormGroup-BRiLUXWl.js";import{T as Pe,a as De,b as N,c as Me,d as _}from"./Tabs-K5AFpdNf.js";import{T as y}from"./TextInput-CixU1YEY.js";import{T as Ne,a as _e,b as ze,A as Le,c as $e}from"./index-D5LR258U.js";import{S as Te,H as Ce}from"./index-BUpfIj5_.js";import{T as b,d as Ge}from"./Tearsheet-7xt4N6ny.js";import{a as Ve,b as We,c as He}from"./actions-CD0dSB1P.js";import{g as Ke}from"./props-helper-3VCN3cvm.js";import{s as Ue}from"./_storybook-styles-mW20BCXf.js";import{T as je}from"./TearsheetNarrow-Ci2_CCyA.js";import{e as qe}from"./bucket-9-m0gEOM1f.js";import"./_commonjsHelpers-Cpj98o6Y.js";import"./index-CZ9wmdcH.js";import"./iframe-0Ob7ddQ0.js";import"./index-DgLvjnYm.js";import"./index-CiYgQLeJ.js";import"./index-Dytf1aFS.js";import"./index-DrFu-skq.js";import"./story-helper-CmBIJVOZ.js";import"./v4-CtRu48qb.js";import"./events-OVwOsPzJ.js";import"./index-BLvAv8yb.js";import"./devtools-CJD9WatR.js";import"./DefinitionTooltip-LoiwcsAO.js";import"./useIsomorphicEffect-DztsuiUB.js";import"./index-BCwPvCrC.js";import"./inheritsLoose-D3Az7yH5.js";import"./FormContext-C4Nuixum.js";import"./mergeRefs-CTUecegF.js";import"./bucket-18-xYgoy0Nr.js";import"./index-BHMIdRzp.js";import"./Grid-BLDZi_lT.js";import"./ComposedModal-DK_gDe0c.js";import"./index-ly07KqNH.js";import"./LayerContext-B9CO-6mR.js";import"./clamp--00YEiB8.js";import"./InlineLoading-C_FY6vWy.js";import"./bucket-6-CRocNvF-.js";import"./requiredIfGivenPropIsTruthy-CU7JwK8h.js";import"./wrapFocus-4QzkQnOM.js";import"./useControllableState-ICkXF1jW.js";import"./useNoInteractiveChildren-Bz6WKoA6.js";import"./useMatchMedia-DK06MzfZ.js";import"./Text-DeLhjZ72.js";import"./useNormalizedInputProps-DMHlP-q8.js";import"./bucket-17-BInI-cSl.js";import"./TearsheetShell-Crph82d4.js";import"./useResizeObserver-DtwIjblY.js";import"./getNodeTextContent-C8IeKkUQ.js";import"./Wrap-EeCeAlef.js";import"./usePortalTarget-BpuhspP7.js";import"./feature-flags-CgeLICHA.js";import"./index-BLKsqoyU.js";import"./useFocus-WYpTfz8b.js";import"./usePreviousValue-CuNkkQo9.js";import"./ActionSet-CwOjg9U4.js";const ve=()=>e.createElement(Re,{blocks:[{story:k},{story:E},{story:x},{story:R},{story:O},{story:B},{story:w},{story:A},{story:S},{title:"With AI Label",description:"An AI Label is intended for any scenario where something is being generated by AI to reinforce AI transparency, accountability, and explainability at the UI level. A Carbon AI Label can be provided to the Tearsheet component by including an `decorator` property on it and providing the carbon AILabel component as its own custom component.<br/> The `decorator` is versatile and can also be used to render other components.",source:{language:"html",code:`
<Tearsheet
  {...args}
  decorator={
    // carbon AILabel component
    <AILabel
      className="ai-label-container"
      autoAlign={false}
      align="bottom-right"
    >
      <AILabelContent>... ...</AILabelContent>
    </AILabel>
  }
>
  ...
</Tearsheet>
          `}}]});ve.__docgenInfo={description:"",methods:[],displayName:"DocsPage"};const pn={title:"IBM Products/Components/Tearsheet",component:b,tags:["autodocs"],parameters:{styles:Ue,layout:"fullscreen",docs:{page:ve}},argTypes:{...Ke(Ge),actions:{control:{type:"select",labels:He},options:We,mapping:Ve({primary:"Replace",danger:"Delete",secondary:"Back",secondary2:"Keep Both",dangerGhost:"Abort",ghost:"Cancel"},T)},description:{control:{type:"select",labels:{0:"With plain String",1:"With StringFormatter and 1 line",2:"With StringFormatter and 2 lines"},default:0},description:"A description of the flow, displayed in the header area of the tearsheet.\n Note: `StringFormatter` can be passed as a React node to apply custom text formatting, including ellipsis truncation and a definition tooltip when the content is too long.",options:[0,1,2],mapping:{0:"This is a description for the tearsheet, providing an opportunity to describe the flow over a couple of lines in the header of the tearsheet.",1:e.createElement(K,{lines:1,truncate:!0,value:"This is a description for the tearsheet, providing an opportunity to describe the flow over a couple of lines in the header of the tearsheet.",tooltipDirection:"bottom"}),2:e.createElement(K,{lines:2,truncate:!0,value:"This is a description for the tearsheet, providing an opportunity to describe the flow over a couple of lines in the header of the tearsheet.",tooltipDirection:"bottom"})}},headerActions:{control:{type:"select",labels:{0:"none",1:"drop-down",2:"buttons"}},options:[0,1,2],mapping:{0:null,1:e.createElement(Fe,{id:"tss-had",label:"Choose an option",titleText:"Choose an option",items:["option 1","option 2","option 3","option 4"]}),2:e.createElement(z,null,e.createElement(g,{kind:"secondary",size:"sm",style:{width:"initial"}},"Secondary"),e.createElement(g,{kind:"primary",size:"sm",style:{width:"initial"}},"Primary"))}},label:{control:{type:"text"}},title:{control:{type:"text"}},influencer:{control:{disable:!0}},onClose:{control:{disable:!0}},navigation:{control:{disable:!0}},open:{control:{disable:!0}},portalTarget:{control:{disable:!0}},decorator:{control:{type:"select",labels:{0:"No AI Label",1:"with AI Label",2:"With non AI Label component"},default:0},description:"Optional prop that allows you to pass any component.",options:[0,1,2]},slug:{control:{type:"select",labels:{0:"No AI Slug",1:"with AI Slug"},default:0},description:'Deprecated: Property replaced by "decorator"',options:[0,1]}}},C="Close the tearsheet",L=e.createElement(Te,{className:"tearsheet-stories__dummy-content-block"},e.createElement(Ce,null,"Influencer heading"),e.createElement("p",null,"Influencer content")),$="The label of the tearsheet",ke=e.createElement(Te,{className:"tearsheet-stories__dummy-content-block"},e.createElement(Ce,null,"Main content heading"),e.createElement(G,null,e.createElement("p",null,"Main content"),e.createElement(V,{legendId:"tearsheet-form-group",legendText:"FormGroup Legend"},e.createElement(y,{id:"tss-ft1",labelText:"Enter an important value here",style:{marginBottom:"1em"}}),e.createElement(y,{id:"tss-ft2",labelText:"Here is an entry field:",style:{marginBottom:"1em"}})))),I="Title of the tearsheet",u=s=>{switch(s){case 1:return e.createElement(Le,{className:"decorator-container",size:"xs"},e.createElement($e,null,e.createElement("div",null,e.createElement("p",{className:"secondary"},"AI Explained"),e.createElement("h1",null,"84%"),e.createElement("p",{className:"secondary bold"},"Confidence score"),e.createElement("p",{className:"secondary"},"This is not really Lorem Ipsum but the spell checker did not like the previous text with it's non-words which is why this unwieldy sentence, should one choose to call it that, here."),e.createElement("hr",null),e.createElement("p",{className:"secondary"},"Model type"),e.createElement("p",{className:"bold"},"Foundation model"))));case 2:return e.createElement(Ne,null,e.createElement(_e,{label:"Additional information"},e.createElement(qe,null)),e.createElement(ze,null,e.createElement("p",null,"Custom content here")));default:return}},Ee=({actions:s,decorator:l,slug:a,...c},m)=>{const[f,t]=n.useState(!1);n.useEffect(()=>{setTimeout(()=>t(m.viewMode!=="docs"),0)},[]);const i=s&&Array.prototype.map.call(s,o=>{if(o.label==="Cancel"){const p=o.onClick;return{...o,onClick:r=>{t(!1),p(r)}}}return o}),h=n.useRef(void 0);return e.createElement(e.Fragment,null,e.createElement("style",null,`.${F.prefix}--tearsheet { opacity: 0 }`,";"),e.createElement(g,{onClick:()=>t(!0)},"Open Tearsheet"),e.createElement("div",{ref:h},e.createElement(b,{...c,actions:i,open:f,onClose:()=>t(!1),decorator:l&&u(l),slug:a&&u(a)},ke)))},xe=e.createElement("div",{className:"tearsheet-stories__tabs"},e.createElement(Me,{"aria-label":"Tab list"},e.createElement(_,null,"Tab 1"),e.createElement(_,null,"Tab 2"),e.createElement(_,null,"Tab 3"),e.createElement(_,null,"Tab 4"))),Oe=({actions:s,decorator:l,slug:a,...c},m)=>{const[f,t]=n.useState(!1);n.useEffect(()=>{setTimeout(()=>t(m.viewMode!=="docs"),0)},[]);const i=s&&Array.prototype.map.call(s,o=>{if(o.label==="Cancel"){const p=o.onClick;return{...o,onClick:r=>{t(!1),p(r)}}}return o}),h=n.useRef(void 0);return e.createElement(e.Fragment,null,e.createElement("style",null,`.${F.prefix}--tearsheet { opacity: 0 }`,";"),e.createElement(g,{onClick:()=>t(!0)},"Open Tearsheet"),e.createElement("div",{ref:h},e.createElement(Pe,{onChange:T("Tab selection changed")},e.createElement(b,{...c,actions:i,open:f,onClose:()=>t(!1),decorator:l&&u(l),slug:a&&u(a)},e.createElement(De,null,e.createElement(N,null,"Tab 1"),e.createElement(N,null,"Tab 2"),e.createElement(N,null,"Tab 3"),e.createElement(N,null,"Tab 4"))))))},Je=({actions:s,decorator:l,slug:a,...c},m)=>{const[f,t]=n.useState(!1),i=n.useRef(void 0),h=s&&Array.prototype.map.call(s,p=>{if(p.label==="Cancel"){const r=p.onClick;return{...p,onClick:v=>{t(!1),r(v)}}}return p}),o=n.useRef(void 0);return n.useEffect(()=>{setTimeout(()=>t(m.viewMode!=="docs"),0)},[]),e.createElement(e.Fragment,null,e.createElement("style",null,`.${F.prefix}--tearsheet { opacity: 0 }`,";"),e.createElement(g,{ref:i,onClick:()=>t(!0)},"Open Tearsheet"),e.createElement("div",{ref:o},e.createElement(b,{...c,actions:h,open:f,onClose:()=>t(!1),decorator:l&&u(l),slug:a&&u(a),launcherButtonRef:i},ke)))},Qe=({actions:s,decorator:l,slug:a,...c},m)=>{const[f,t]=n.useState(!1),[i,h]=n.useState(""),o=s&&Array.prototype.map.call(s,r=>{if(r.label==="Cancel"){const v=r.onClick;return{...r,onClick:M=>{t(!1),v(M)}}}return r}),p=n.useRef(void 0);return n.useEffect(()=>{setTimeout(()=>t(m.viewMode!=="docs"),0)},[]),e.createElement(e.Fragment,null,e.createElement("style",null,`.${F.prefix}--tearsheet { opacity: 0 }`,";"),e.createElement(g,{onClick:()=>t(!0)},"Open Tearsheet"),e.createElement("div",{ref:p},e.createElement(b,{...c,actions:o,open:f,onClose:()=>t(!1),decorator:l&&u(l),slug:a&&u(a)},e.createElement("div",{className:"tearsheet-stories__dummy-content-block"},e.createElement(G,null,e.createElement("p",null,"Main content"),e.createElement(V,{legendId:"tearsheet-form-group",legendText:"FormGroup Legend"},e.createElement(y,{id:"tss-ft1",labelText:"Enter an important value here",style:{marginBottom:"1em"},disabled:!(i!=null&&i.length)>0}),e.createElement(y,{id:"tss-ft2",labelText:"Here is an entry field:",style:{marginBottom:"1em"},onChange:r=>{var v;return h((v=r==null?void 0:r.target)==null?void 0:v.value)}})))))))},Xe=({actions:s,decorator:l,slug:a,...c},m)=>{const[f,t]=n.useState(!1),i=s&&Array.prototype.map.call(s,o=>{if(o.label==="Cancel"){const p=o.onClick;return{...o,onClick:r=>{t(!1),p(r)}}}return o}),h=n.useRef(void 0);return n.useEffect(()=>{setTimeout(()=>t(m.viewMode!=="docs"),0)},[]),e.createElement(e.Fragment,null,e.createElement("style",null,`.${F.prefix}--tearsheet { opacity: 0 }`,";"),e.createElement(g,{onClick:()=>t(!0)},"Open Tearsheet"),e.createElement("div",{ref:h},e.createElement(b,{...c,actions:i,open:f,onClose:()=>t(!1),decorator:l&&u(l),slug:a&&u(a)},e.createElement("div",{className:"tearsheet-stories__dummy-content-block"},e.createElement(G,null,e.createElement("p",null,"Main content"),e.createElement(V,{legendId:"tearsheet-form-group",legendText:"FormGroup Legend"},e.createElement(y,{id:"tss-ft1",labelText:"This field's value is 'read only':",readOnly:!0,style:{marginBottom:"1em"},value:"Value"}),e.createElement(y,{id:"tss-ft2",labelText:"Here is an entry field:",style:{marginBottom:"1em"}})))))))},Be=({mixedSizes:s,actions:l,decorator:a,slug:c,...m},f)=>{const[t,i]=n.useState(!1),[h,o]=n.useState(!1),[p,r]=n.useState(!1),v=n.useRef(void 0),M=n.useRef(),W=n.useRef(),H=n.useRef(),we=Array.prototype.map.call(l,d=>{if(d.label==="Cancel"){const P=d.onClick;return{...d,onClick:D=>{i(!1),P(D)}}}return d}),Ae=Array.prototype.map.call(l,d=>{if(d.label==="Cancel"){const P=d.onClick;return{...d,onClick:D=>{o(!1),P(D)}}}return d}),Se=Array.prototype.map.call(l,d=>{if(d.label==="Cancel"){const P=d.onClick;return{...d,onClick:D=>{r(!1),P(D)}}}return d}),Ie=s?je:b;return n.useEffect(()=>{setTimeout(()=>{i(f.viewMode!=="docs"),o(f.viewMode!=="docs"),r(f.viewMode!=="docs")},0)},[]),e.createElement(e.Fragment,null,e.createElement("style",null,`.${F.prefix}--tearsheet { opacity: 0 }`,";"),e.createElement("div",{style:{height:"3rem"},"data-reserve-space":"for toggle buttons"}),e.createElement(z,{style:{display:"flex",position:"fixed",top:0,left:0,zIndex:1e4}},e.createElement(g,{onClick:()=>i(!t),ref:M},"Toggle tearsheet 1"),e.createElement(g,{onClick:()=>o(!h)},"Toggle tearsheet 2"),!s&&e.createElement(g,{onClick:()=>r(!p)},"Toggle tearsheet 3")),e.createElement("div",{ref:v},e.createElement(b,{...m,actions:we,headerActions:e.createElement(z,null,e.createElement(g,{kind:"primary",size:"sm",style:{width:"initial"},onClick:()=>o(!0),disabled:h,ref:W},"Open tearsheet 2")),title:"Tearsheet 1",open:t,onClose:()=>i(!1),selectorPrimaryFocus:"#stacked-input-1",decorator:a&&u(a),slug:c&&u(c),launcherButtonRef:M},e.createElement("div",{className:"tearsheet-stories__dummy-content-block"},"Main content 1",e.createElement(y,{id:"stacked-input-1",labelText:"Enter an important value here"}))),e.createElement(Ie,{...m,actions:Ae,headerActions:e.createElement(z,null,e.createElement(g,{kind:"primary",size:"sm",style:{width:"initial"},onClick:()=>r(!0),disabled:p,ref:H},"Open tearsheet 3")),title:"Tearsheet 2",open:h,onClose:()=>o(!1),selectorPrimaryFocus:"#stacked-input-2",decorator:a&&u(a),slug:c&&u(c),launcherButtonRef:W},e.createElement("div",{className:"tearsheet-stories__dummy-content-block"},"Main content 2",e.createElement(y,{id:"stacked-input-2",labelText:"Enter an important value here"}))),!s&&e.createElement(b,{...m,actions:Se,title:"Tearsheet 3",open:p,onClose:()=>r(!1),selectorPrimaryFocus:"#stacked-input-3",decorator:a&&u(a),slug:c&&u(c),launcherButtonRef:H},e.createElement("div",{className:"tearsheet-stories__dummy-content-block"},"Main content 3",e.createElement(y,{id:"stacked-input-3",labelText:"Enter an important value here"})))))},k=Ee.bind({});k.storyName="Tearsheet";k.args={closeIconDescription:C,description:2,onClose:T("onClose called"),title:I,actions:7,selectorPrimaryFocus:"#tss-ft1"};const E=Oe.bind({});E.storyName="Tearsheet with navigation";E.args={closeIconDescription:C,description:2,label:$,navigation:xe,onClose:T("onClose called"),title:I,actions:7};const x=Ee.bind({});x.storyName="Tearsheet with influencer";x.args={closeIconDescription:C,description:2,influencer:L,influencerPosition:"left",influencerWidth:"narrow",onClose:T("onClose called"),title:I,actions:7};const R=Je.bind({});R.args={closeIconDescription:C,description:2,onClose:T("onClose called"),title:I,actions:7};const O=Qe.bind({});O.storyName="First Element Disabled";O.args={closeIconDescription:C,hasCloseIcon:!0,description:2,onClose:T("onClose called"),title:I,actions:7,selectorPrimaryFocus:"#tss-ft1"};const B=Xe.bind({});B.storyName="First Element ReadOnly";B.args={closeIconDescription:C,hasCloseIcon:!0,description:2,onClose:T("onClose called"),title:I,actions:7,selectorPrimaryFocus:"#tss-ft1"};const w=Oe.bind({});w.storyName="Tearsheet with all header items and influencer";w.args={closeIconDescription:C,description:2,hasCloseIcon:!0,headerActions:2,influencer:L,influencerPosition:"left",influencerWidth:"narrow",label:$,navigation:xe,onClose:T("onClose called"),title:I,actions:0,decorator:1,slug:0};const A=Be.bind({});A.storyName="Stacking tearsheets";A.args={closeIconDescription:C,description:2,height:"lower",influencer:L,label:$,actions:7};const S=Be.bind({});S.storyName="Stacking tearsheets, different sizes";S.args={mixedSizes:!0,closeIconDescription:C,description:2,height:"lower",influencer:L,label:$,actions:7};var U,j,q;k.parameters={...k.parameters,docs:{...(U=k.parameters)==null?void 0:U.docs,source:{originalSource:`({
  actions,
  decorator,
  slug,
  ...args
}, context) => {
  const [open, setOpen] = useState(false);
  useEffect(() => {
    setTimeout(() => setOpen(context.viewMode !== 'docs'), 0);
  }, []);
  const wiredActions = actions && Array.prototype.map.call(actions, action => {
    if (action.label === 'Cancel') {
      const previousClick = action.onClick;
      return {
        ...action,
        onClick: evt => {
          setOpen(false);
          previousClick(evt);
        }
      };
    }
    return action;
  });
  const ref = useRef(undefined);
  return <>
      <style>{\`.\${pkg.prefix}--tearsheet { opacity: 0 }\`};</style>
      <Button onClick={() => setOpen(true)}>Open Tearsheet</Button>
      <div ref={ref}>
        <Tearsheet {...args} actions={wiredActions} open={open} onClose={() => setOpen(false)} decorator={decorator && sampleDecorator(decorator)} slug={slug && sampleDecorator(slug)}>
          {mainContent}
        </Tearsheet>
      </div>
    </>;
}`,...(q=(j=k.parameters)==null?void 0:j.docs)==null?void 0:q.source}}};var J,Q,X;E.parameters={...E.parameters,docs:{...(J=E.parameters)==null?void 0:J.docs,source:{originalSource:`({
  actions,
  decorator,
  slug,
  ...args
}, context) => {
  const [open, setOpen] = useState(false);
  useEffect(() => {
    setTimeout(() => setOpen(context.viewMode !== 'docs'), 0);
  }, []);
  const wiredActions = actions && Array.prototype.map.call(actions, action => {
    if (action.label === 'Cancel') {
      const previousClick = action.onClick;
      return {
        ...action,
        onClick: evt => {
          setOpen(false);
          previousClick(evt);
        }
      };
    }
    return action;
  });
  const ref = useRef(undefined);
  return <>
      <style>{\`.\${pkg.prefix}--tearsheet { opacity: 0 }\`};</style>
      <Button onClick={() => setOpen(true)}>Open Tearsheet</Button>
      <div ref={ref}>
        <Tabs onChange={action('Tab selection changed')}>
          <Tearsheet {...args} actions={wiredActions} open={open} onClose={() => setOpen(false)} decorator={decorator && sampleDecorator(decorator)} slug={slug && sampleDecorator(slug)}>
            <TabPanels>
              <TabPanel>Tab 1</TabPanel>
              <TabPanel>Tab 2</TabPanel>
              <TabPanel>Tab 3</TabPanel>
              <TabPanel>Tab 4</TabPanel>
            </TabPanels>
          </Tearsheet>
        </Tabs>
      </div>
    </>;
}`,...(X=(Q=E.parameters)==null?void 0:Q.docs)==null?void 0:X.source}}};var Y,Z,ee;x.parameters={...x.parameters,docs:{...(Y=x.parameters)==null?void 0:Y.docs,source:{originalSource:`({
  actions,
  decorator,
  slug,
  ...args
}, context) => {
  const [open, setOpen] = useState(false);
  useEffect(() => {
    setTimeout(() => setOpen(context.viewMode !== 'docs'), 0);
  }, []);
  const wiredActions = actions && Array.prototype.map.call(actions, action => {
    if (action.label === 'Cancel') {
      const previousClick = action.onClick;
      return {
        ...action,
        onClick: evt => {
          setOpen(false);
          previousClick(evt);
        }
      };
    }
    return action;
  });
  const ref = useRef(undefined);
  return <>
      <style>{\`.\${pkg.prefix}--tearsheet { opacity: 0 }\`};</style>
      <Button onClick={() => setOpen(true)}>Open Tearsheet</Button>
      <div ref={ref}>
        <Tearsheet {...args} actions={wiredActions} open={open} onClose={() => setOpen(false)} decorator={decorator && sampleDecorator(decorator)} slug={slug && sampleDecorator(slug)}>
          {mainContent}
        </Tearsheet>
      </div>
    </>;
}`,...(ee=(Z=x.parameters)==null?void 0:Z.docs)==null?void 0:ee.source}}};var te,ne,oe;R.parameters={...R.parameters,docs:{...(te=R.parameters)==null?void 0:te.docs,source:{originalSource:`({
  actions,
  decorator,
  slug,
  ...args
}, context) => {
  const [open, setOpen] = useState(false);
  const buttonRef = useRef(undefined);
  const wiredActions = actions && Array.prototype.map.call(actions, action => {
    if (action.label === 'Cancel') {
      const previousClick = action.onClick;
      return {
        ...action,
        onClick: evt => {
          setOpen(false);
          previousClick(evt);
        }
      };
    }
    return action;
  });
  const ref = useRef(undefined);
  useEffect(() => {
    setTimeout(() => setOpen(context.viewMode !== 'docs'), 0);
  }, []);
  return <>
      <style>{\`.\${pkg.prefix}--tearsheet { opacity: 0 }\`};</style>
      <Button ref={buttonRef} onClick={() => setOpen(true)}>
        Open Tearsheet
      </Button>
      <div ref={ref}>
        <Tearsheet {...args} actions={wiredActions} open={open} onClose={() => setOpen(false)} decorator={decorator && sampleDecorator(decorator)} slug={slug && sampleDecorator(slug)} launcherButtonRef={buttonRef}>
          {mainContent}
        </Tearsheet>
      </div>
    </>;
}`,...(oe=(ne=R.parameters)==null?void 0:ne.docs)==null?void 0:oe.source}}};var re,ae,se;O.parameters={...O.parameters,docs:{...(re=O.parameters)==null?void 0:re.docs,source:{originalSource:`({
  actions,
  decorator,
  slug,
  ...args
}, context) => {
  const [open, setOpen] = useState(false);
  const [text, setText] = useState('');
  const wiredActions = actions && Array.prototype.map.call(actions, action => {
    if (action.label === 'Cancel') {
      const previousClick = action.onClick;
      return {
        ...action,
        onClick: evt => {
          setOpen(false);
          previousClick(evt);
        }
      };
    }
    return action;
  });
  const ref = useRef(undefined);
  useEffect(() => {
    setTimeout(() => setOpen(context.viewMode !== 'docs'), 0);
  }, []);
  return <>
      <style>{\`.\${pkg.prefix}--tearsheet { opacity: 0 }\`};</style>
      <Button onClick={() => setOpen(true)}>Open Tearsheet</Button>
      <div ref={ref}>
        <Tearsheet {...args} actions={wiredActions} open={open} onClose={() => setOpen(false)} decorator={decorator && sampleDecorator(decorator)} slug={slug && sampleDecorator(slug)}>
          <div className="tearsheet-stories__dummy-content-block">
            <Form>
              <p>Main content</p>
              <FormGroup legendId="tearsheet-form-group" legendText="FormGroup Legend">
                <TextInput id="tss-ft1" labelText="Enter an important value here" style={
              // stylelint-disable-next-line carbon/layout-use
              {
                marginBottom: '1em'
              }} disabled={!text?.length > 0} />
                <TextInput id="tss-ft2" labelText="Here is an entry field:" style={
              // stylelint-disable-next-line carbon/layout-use
              {
                marginBottom: '1em'
              }} onChange={ev => setText(ev?.target?.value)} />
              </FormGroup>
            </Form>
          </div>
        </Tearsheet>
      </div>
    </>;
}`,...(se=(ae=O.parameters)==null?void 0:ae.docs)==null?void 0:se.source}}};var le,ie,ce;B.parameters={...B.parameters,docs:{...(le=B.parameters)==null?void 0:le.docs,source:{originalSource:`({
  actions,
  decorator,
  slug,
  ...args
}, context) => {
  const [open, setOpen] = useState(false);
  const wiredActions = actions && Array.prototype.map.call(actions, action => {
    if (action.label === 'Cancel') {
      const previousClick = action.onClick;
      return {
        ...action,
        onClick: evt => {
          setOpen(false);
          previousClick(evt);
        }
      };
    }
    return action;
  });
  const ref = useRef(undefined);
  useEffect(() => {
    setTimeout(() => setOpen(context.viewMode !== 'docs'), 0);
  }, []);
  return <>
      <style>{\`.\${pkg.prefix}--tearsheet { opacity: 0 }\`};</style>
      <Button onClick={() => setOpen(true)}>Open Tearsheet</Button>
      <div ref={ref}>
        <Tearsheet {...args} actions={wiredActions} open={open} onClose={() => setOpen(false)} decorator={decorator && sampleDecorator(decorator)} slug={slug && sampleDecorator(slug)}>
          <div className="tearsheet-stories__dummy-content-block">
            <Form>
              <p>Main content</p>
              <FormGroup legendId="tearsheet-form-group" legendText="FormGroup Legend">
                <TextInput id="tss-ft1" labelText="This field's value is 'read only':" readOnly={true} style={
              // stylelint-disable-next-line carbon/layout-use
              {
                marginBottom: '1em'
              }} value="Value" />
                <TextInput id="tss-ft2" labelText="Here is an entry field:" style={
              // stylelint-disable-next-line carbon/layout-use
              {
                marginBottom: '1em'
              }} />
              </FormGroup>
            </Form>
          </div>
        </Tearsheet>
      </div>
    </>;
}`,...(ce=(ie=B.parameters)==null?void 0:ie.docs)==null?void 0:ce.source}}};var pe,ue,de;w.parameters={...w.parameters,docs:{...(pe=w.parameters)==null?void 0:pe.docs,source:{originalSource:`({
  actions,
  decorator,
  slug,
  ...args
}, context) => {
  const [open, setOpen] = useState(false);
  useEffect(() => {
    setTimeout(() => setOpen(context.viewMode !== 'docs'), 0);
  }, []);
  const wiredActions = actions && Array.prototype.map.call(actions, action => {
    if (action.label === 'Cancel') {
      const previousClick = action.onClick;
      return {
        ...action,
        onClick: evt => {
          setOpen(false);
          previousClick(evt);
        }
      };
    }
    return action;
  });
  const ref = useRef(undefined);
  return <>
      <style>{\`.\${pkg.prefix}--tearsheet { opacity: 0 }\`};</style>
      <Button onClick={() => setOpen(true)}>Open Tearsheet</Button>
      <div ref={ref}>
        <Tabs onChange={action('Tab selection changed')}>
          <Tearsheet {...args} actions={wiredActions} open={open} onClose={() => setOpen(false)} decorator={decorator && sampleDecorator(decorator)} slug={slug && sampleDecorator(slug)}>
            <TabPanels>
              <TabPanel>Tab 1</TabPanel>
              <TabPanel>Tab 2</TabPanel>
              <TabPanel>Tab 3</TabPanel>
              <TabPanel>Tab 4</TabPanel>
            </TabPanels>
          </Tearsheet>
        </Tabs>
      </div>
    </>;
}`,...(de=(ue=w.parameters)==null?void 0:ue.docs)==null?void 0:de.source}}};var me,fe,he;A.parameters={...A.parameters,docs:{...(me=A.parameters)==null?void 0:me.docs,source:{originalSource:`({
  mixedSizes,
  actions,
  decorator,
  slug,
  ...args
}, context) => {
  const [open1, setOpen1] = useState(false);
  const [open2, setOpen2] = useState(false);
  const [open3, setOpen3] = useState(false);
  const ref = useRef(undefined);
  const openButton1 = useRef();
  const openButton2 = useRef();
  const openButton3 = useRef();
  const wiredActions1 = Array.prototype.map.call(actions, action => {
    if (action.label === 'Cancel') {
      const previousClick = action.onClick;
      return {
        ...action,
        onClick: evt => {
          setOpen1(false);
          previousClick(evt);
        }
      };
    }
    return action;
  });
  const wiredActions2 = Array.prototype.map.call(actions, action => {
    if (action.label === 'Cancel') {
      const previousClick = action.onClick;
      return {
        ...action,
        onClick: evt => {
          setOpen2(false);
          previousClick(evt);
        }
      };
    }
    return action;
  });
  const wiredActions3 = Array.prototype.map.call(actions, action => {
    if (action.label === 'Cancel') {
      const previousClick = action.onClick;
      return {
        ...action,
        onClick: evt => {
          setOpen3(false);
          previousClick(evt);
        }
      };
    }
    return action;
  });
  const VariableSizeTearsheet = mixedSizes ? TearsheetNarrow : Tearsheet;
  useEffect(() => {
    setTimeout(() => {
      setOpen1(context.viewMode !== 'docs');
      setOpen2(context.viewMode !== 'docs');
      setOpen3(context.viewMode !== 'docs');
    }, 0);
  }, []);
  return <>
      <style>{\`.\${pkg.prefix}--tearsheet { opacity: 0 }\`};</style>
      <div style={{
      height: '3rem'
    }} data-reserve-space="for toggle buttons" />
      <ButtonSet style={{
      display: 'flex',
      position: 'fixed',
      top: 0,
      left: 0,
      zIndex: 10000
    }}>
        <Button onClick={() => setOpen1(!open1)} ref={openButton1}>
          Toggle&nbsp;tearsheet&nbsp;1
        </Button>
        <Button onClick={() => setOpen2(!open2)}>
          Toggle&nbsp;tearsheet&nbsp;2
        </Button>
        {!mixedSizes && <Button onClick={() => setOpen3(!open3)}>
            Toggle&nbsp;tearsheet&nbsp;3
          </Button>}
      </ButtonSet>
      <div ref={ref}>
        <Tearsheet {...args} actions={wiredActions1} headerActions={<ButtonSet>
              <Button kind="primary" size="sm" style={{
          width: 'initial'
        }} onClick={() => setOpen2(true)} disabled={open2} ref={openButton2}>
                Open tearsheet 2
              </Button>
            </ButtonSet>} title="Tearsheet 1" open={open1} onClose={() => setOpen1(false)} selectorPrimaryFocus="#stacked-input-1" decorator={decorator && sampleDecorator(decorator)} slug={slug && sampleDecorator(slug)} launcherButtonRef={openButton1}>
          <div className="tearsheet-stories__dummy-content-block">
            Main content 1
            <TextInput id="stacked-input-1" labelText="Enter an important value here" />
          </div>
        </Tearsheet>
        <VariableSizeTearsheet {...args} actions={wiredActions2} headerActions={<ButtonSet>
              <Button kind="primary" size="sm" style={{
          width: 'initial'
        }} onClick={() => setOpen3(true)} disabled={open3} ref={openButton3}>
                Open tearsheet 3
              </Button>
            </ButtonSet>} title="Tearsheet 2" open={open2} onClose={() => setOpen2(false)} selectorPrimaryFocus="#stacked-input-2" decorator={decorator && sampleDecorator(decorator)} slug={slug && sampleDecorator(slug)} launcherButtonRef={openButton2}>
          <div className="tearsheet-stories__dummy-content-block">
            Main content 2
            <TextInput id="stacked-input-2" labelText="Enter an important value here" />
          </div>
        </VariableSizeTearsheet>
        {!mixedSizes && <Tearsheet {...args} actions={wiredActions3} title="Tearsheet 3" open={open3} onClose={() => setOpen3(false)} selectorPrimaryFocus="#stacked-input-3" decorator={decorator && sampleDecorator(decorator)} slug={slug && sampleDecorator(slug)} launcherButtonRef={openButton3}>
            <div className="tearsheet-stories__dummy-content-block">
              Main content 3
              <TextInput id="stacked-input-3" labelText="Enter an important value here" />
            </div>
          </Tearsheet>}
      </div>
    </>;
}`,...(he=(fe=A.parameters)==null?void 0:fe.docs)==null?void 0:he.source}}};var ge,ye,be;S.parameters={...S.parameters,docs:{...(ge=S.parameters)==null?void 0:ge.docs,source:{originalSource:`({
  mixedSizes,
  actions,
  decorator,
  slug,
  ...args
}, context) => {
  const [open1, setOpen1] = useState(false);
  const [open2, setOpen2] = useState(false);
  const [open3, setOpen3] = useState(false);
  const ref = useRef(undefined);
  const openButton1 = useRef();
  const openButton2 = useRef();
  const openButton3 = useRef();
  const wiredActions1 = Array.prototype.map.call(actions, action => {
    if (action.label === 'Cancel') {
      const previousClick = action.onClick;
      return {
        ...action,
        onClick: evt => {
          setOpen1(false);
          previousClick(evt);
        }
      };
    }
    return action;
  });
  const wiredActions2 = Array.prototype.map.call(actions, action => {
    if (action.label === 'Cancel') {
      const previousClick = action.onClick;
      return {
        ...action,
        onClick: evt => {
          setOpen2(false);
          previousClick(evt);
        }
      };
    }
    return action;
  });
  const wiredActions3 = Array.prototype.map.call(actions, action => {
    if (action.label === 'Cancel') {
      const previousClick = action.onClick;
      return {
        ...action,
        onClick: evt => {
          setOpen3(false);
          previousClick(evt);
        }
      };
    }
    return action;
  });
  const VariableSizeTearsheet = mixedSizes ? TearsheetNarrow : Tearsheet;
  useEffect(() => {
    setTimeout(() => {
      setOpen1(context.viewMode !== 'docs');
      setOpen2(context.viewMode !== 'docs');
      setOpen3(context.viewMode !== 'docs');
    }, 0);
  }, []);
  return <>
      <style>{\`.\${pkg.prefix}--tearsheet { opacity: 0 }\`};</style>
      <div style={{
      height: '3rem'
    }} data-reserve-space="for toggle buttons" />
      <ButtonSet style={{
      display: 'flex',
      position: 'fixed',
      top: 0,
      left: 0,
      zIndex: 10000
    }}>
        <Button onClick={() => setOpen1(!open1)} ref={openButton1}>
          Toggle&nbsp;tearsheet&nbsp;1
        </Button>
        <Button onClick={() => setOpen2(!open2)}>
          Toggle&nbsp;tearsheet&nbsp;2
        </Button>
        {!mixedSizes && <Button onClick={() => setOpen3(!open3)}>
            Toggle&nbsp;tearsheet&nbsp;3
          </Button>}
      </ButtonSet>
      <div ref={ref}>
        <Tearsheet {...args} actions={wiredActions1} headerActions={<ButtonSet>
              <Button kind="primary" size="sm" style={{
          width: 'initial'
        }} onClick={() => setOpen2(true)} disabled={open2} ref={openButton2}>
                Open tearsheet 2
              </Button>
            </ButtonSet>} title="Tearsheet 1" open={open1} onClose={() => setOpen1(false)} selectorPrimaryFocus="#stacked-input-1" decorator={decorator && sampleDecorator(decorator)} slug={slug && sampleDecorator(slug)} launcherButtonRef={openButton1}>
          <div className="tearsheet-stories__dummy-content-block">
            Main content 1
            <TextInput id="stacked-input-1" labelText="Enter an important value here" />
          </div>
        </Tearsheet>
        <VariableSizeTearsheet {...args} actions={wiredActions2} headerActions={<ButtonSet>
              <Button kind="primary" size="sm" style={{
          width: 'initial'
        }} onClick={() => setOpen3(true)} disabled={open3} ref={openButton3}>
                Open tearsheet 3
              </Button>
            </ButtonSet>} title="Tearsheet 2" open={open2} onClose={() => setOpen2(false)} selectorPrimaryFocus="#stacked-input-2" decorator={decorator && sampleDecorator(decorator)} slug={slug && sampleDecorator(slug)} launcherButtonRef={openButton2}>
          <div className="tearsheet-stories__dummy-content-block">
            Main content 2
            <TextInput id="stacked-input-2" labelText="Enter an important value here" />
          </div>
        </VariableSizeTearsheet>
        {!mixedSizes && <Tearsheet {...args} actions={wiredActions3} title="Tearsheet 3" open={open3} onClose={() => setOpen3(false)} selectorPrimaryFocus="#stacked-input-3" decorator={decorator && sampleDecorator(decorator)} slug={slug && sampleDecorator(slug)} launcherButtonRef={openButton3}>
            <div className="tearsheet-stories__dummy-content-block">
              Main content 3
              <TextInput id="stacked-input-3" labelText="Enter an important value here" />
            </div>
          </Tearsheet>}
      </div>
    </>;
}`,...(be=(ye=S.parameters)==null?void 0:ye.docs)==null?void 0:be.source}}};const un=["tearsheet","withNavigation","withInfluencer","ReturnFocusToOpenButton","firstElementDisabled","firstElementReadOnly","fullyLoaded","stacked","stackedMixedSizes"];export{R as ReturnFocusToOpenButton,un as __namedExportsOrder,pn as default,O as firstElementDisabled,B as firstElementReadOnly,w as fullyLoaded,A as stacked,S as stackedMixedSizes,k as tearsheet,x as withInfluencer,E as withNavigation};
