import{r as t,e as a,c as E,p as T,a7 as oe,W as ne,X as le,P as e,B as re}from"./iframe-6Ea7Lnhj.js";import{b as L,C as se,a as K}from"./CoachmarkOverlayElements-D8PPCCMR.js";import{g as F}from"./devtools-t5hVrn0E.js";import{u as W}from"./useIsomorphicEffect-ysnJcn6W.js";function ie(o,l,n,i){const s=t.useRef(void 0),m=n===L.TOOLTIP;t.useLayoutEffect(()=>{s.current=i},[i]),t.useEffect(()=>{function r(p){const h=l.current&&!l.current.contains(p.target),c=o.current&&!o.current.contains(p.target);h&&c&&O()}function O(){m&&s.current()}return document.addEventListener("mousedown",r),()=>{document.removeEventListener("mousedown",r)}},[o,l,m])}const ce=(o,l)=>{const n=t.useRef(null);t.useEffect(()=>{n.current=l}),t.useEffect(()=>{function i(s){n.current&&n.current(s)}return window.addEventListener(o,i),()=>{window.removeEventListener(o,i)}},[o])},ue=(o,l=100)=>{let n=Date.now();return()=>{n+l-Date.now()<=0&&(o(),n=Date.now())}},_=`${T.prefix}--coachmark`,j=`${_}-overlay`,A="Coachmark",v={align:"bottom",onClose:()=>{},overlayKind:"tooltip",theme:"light",isOpenByDefault:!1};let g=t.forwardRef(({align:o=v.align,autoAlign:l,children:n,className:i,onClose:s=v.onClose,overlayClassName:m,overlayKind:r=v.overlayKind,overlayRef:O,positionTune:p,portalTarget:h,target:c,theme:w=v.theme,isOpenByDefault:z=v.isOpenByDefault,...U},G)=>{const X=r===L.TOOLTIP,N=r===L.STACKED,[d,f]=t.useState(N||z),[$,S]=t.useState(!1),[Y,J]=t.useState(),[Q,Z]=t.useState({x:0,y:0}),ee=t.useRef(void 0),te=t.useRef(void 0),M=G||te,q=O||ee,R=t.useRef(null),y=t.useRef(null);let x;a.isValidElement(c)&&typeof c.type!="string"&&(x=c.type),W(()=>{R.current=h?document?.querySelector(h)??document?.querySelector("body"):document?.querySelector("body")},[h]);const V=()=>{f(!1)},b=t.useCallback(()=>{N||f(!1),s()},[N,s]),P=t.useCallback(u=>{u.key==="Escape"&&b()},[b]);t.useEffect(()=>(document.addEventListener("keydown",P,!1),()=>{document.removeEventListener("keydown",P,!1)}),[P]);const H=u=>{J(u.target.getBoundingClientRect()),Z({x:u.target.offsetLeft,y:u.target.offsetTop}),X?f(D=>!D):(f(!1),S(!0))},B={buttonProps:{"aria-expanded":d,tabIndex:0,onClick:H,onDoubleClick:H},closeButtonProps:{onClick:b},targetRect:Y,targetOffset:Q,align:o,positionTune:p,isOpen:d},ae=ue(()=>{V()},2e3);return t.useEffect(()=>{$&&(S(!1),f(!0))},[$]),W(()=>{const u={top:`${(p?.y??0)-16}px`,left:`${(p?.x??0)-16}px`};if(y.current&&y.current.style&&u){const D={position:"absolute",...u};Object.assign(y.current.style,D)}},[y,p]),t.useEffect(()=>()=>f(!1),[]),ie(M,q,r,V),ce("resize",ae),a.createElement(se.Provider,{value:B},a.createElement("div",{className:E(_,`${_}__${w}`,i),ref:M,...U,...F(A)},r!=="tooltip"?a.createElement(a.Fragment,null,x?.displayName==="CoachmarkBeacon"?a.cloneElement(c,{buttonProps:B.buttonProps}):c,d&&R?.current&&oe.createPortal(a.createElement(K,{ref:q,fixedIsVisible:!1,kind:r,onClose:b,theme:w,className:E(m,`${j}--is-visible`)},n),R?.current)):a.createElement(ne,{highContrast:!0,caret:!0,ref:y,align:o,autoAlign:l,open:d},x?.displayName==="CoachmarkBeacon"?a.cloneElement(c,{buttonProps:B.buttonProps}):c,a.createElement(le,null,d&&a.createElement(K,{ref:q,fixedIsVisible:!1,kind:r,onClose:b,theme:w,className:E(m,{[`${j}--is-visible`]:d})},n)))))});const me=typeof HTMLElement>"u"?e.object:e.instanceOf(HTMLElement);g=T.checkComponentEnabled(g,A);g.displayName=A;const pe={overlayClassName:e.string,overlayKind:e.oneOf(["tooltip","floating","stacked"]),overlayRef:e.shape({current:me}),portalTarget:e.string,target:e.node,theme:e.oneOf(["light","dark"])};g.propTypes={align:e.oneOf(["bottom","bottom-left","bottom-right","left","left-top","left-bottom","right","right-top","right-bottom","top","top-left","top-right"]),autoAlign:e.bool,children:e.node.isRequired,className:e.string,isOpenByDefault:e.bool,onClose:e.func,positionTune:e.shape({x:e.number,y:e.number}),...pe};g.__docgenInfo={description:`Coachmarks are used to call out specific functionality or concepts
within the UI that may not be intuitive but are important for the
user to gain understanding of the product's main value and discover new use cases.`,methods:[],displayName:"Coachmark",props:{align:{required:!1,tsType:{name:"union",raw:`| 'bottom'
| 'bottom-left'
| 'bottom-right'
| 'left'
| 'left-top'
| 'left-bottom'
| 'right'
| 'right-top'
| 'right-bottom'
| 'top'
| 'top-left'
| 'top-right'`,elements:[{name:"literal",value:"'bottom'"},{name:"literal",value:"'bottom-left'"},{name:"literal",value:"'bottom-right'"},{name:"literal",value:"'left'"},{name:"literal",value:"'left-top'"},{name:"literal",value:"'left-bottom'"},{name:"literal",value:"'right'"},{name:"literal",value:"'right-top'"},{name:"literal",value:"'right-bottom'"},{name:"literal",value:"'top'"},{name:"literal",value:"'top-left'"},{name:"literal",value:"'top-right'"}]},description:`Where to render the Coachmark relative to its target.
Applies only to Floating and Tooltip Coachmarks.
@see COACHMARK_ALIGNMENT`,defaultValue:{value:"'bottom'",computed:!1},type:{name:"enum",value:[{value:"'bottom'",computed:!1},{value:"'bottom-left'",computed:!1},{value:"'bottom-right'",computed:!1},{value:"'left'",computed:!1},{value:"'left-top'",computed:!1},{value:"'left-bottom'",computed:!1},{value:"'right'",computed:!1},{value:"'right-top'",computed:!1},{value:"'right-bottom'",computed:!1},{value:"'top'",computed:!1},{value:"'top-left'",computed:!1},{value:"'top-right'",computed:!1}]}},autoAlign:{required:!1,tsType:{name:"boolean"},description:`Auto aligns the coachmark based on screen boundaries
Applies only to Tooltip Coachmarks.`,type:{name:"bool"}},children:{required:!0,tsType:{name:"ReactNode"},description:`Coachmark should use a single CoachmarkOverlayElements component as a child.
@see CoachmarkOverlayElements`,type:{name:"node"}},className:{required:!1,tsType:{name:"string"},description:"Optional class name for this component.",type:{name:"string"}},onClose:{required:!1,tsType:{name:"signature",type:"function",raw:"() => void",signature:{arguments:[],return:{name:"void"}}},description:"Function to call when the Coachmark closes.",defaultValue:{value:"() => {}",computed:!1},type:{name:"func"}},overlayClassName:{required:!1,tsType:{name:"string"},description:`@deprecated
Optional class name for the Coachmark Overlay component.`,type:{name:"string"}},overlayKind:{required:!1,tsType:{name:"union",raw:"'tooltip' | 'floating' | 'stacked'",elements:[{name:"literal",value:"'tooltip'"},{name:"literal",value:"'floating'"},{name:"literal",value:"'stacked'"}]},description:`@deprecated
What kind or style of Coachmark to render.`,defaultValue:{value:"'tooltip'",computed:!1},type:{name:"enum",value:[{value:"'tooltip'",computed:!1},{value:"'floating'",computed:!1},{value:"'stacked'",computed:!1}]}},overlayRef:{required:!1,tsType:{name:"MutableRefObject",elements:[{name:"union",raw:"HTMLElement | null",elements:[{name:"HTMLElement"},{name:"null"}]}],raw:"MutableRefObject<HTMLElement | null>"},description:"@deprecated",type:{name:"shape",value:{current:{name:"custom",raw:"overlayRefType as PropTypes.Validator<HTMLElement | null>",required:!1}}}},portalTarget:{required:!1,tsType:{name:"string"},description:`@deprecated
By default, the Coachmark will be appended to the end of \`document.body\`.
The Coachmark will remain persistent as the user navigates the app until
the user closes the Coachmark.

Alternatively, the app developer can tightly couple the Coachmark to a DOM
element or other component by specifying a CSS selector. The Coachmark will
remain visible as long as that element remains visible or mounted. When the
element is hidden or component is unmounted, the Coachmark will disappear.`,type:{name:"string"}},positionTune:{required:!1,tsType:{name:"signature",type:"object",raw:"{ x: number; y: number }",signature:{properties:[{key:"x",value:{name:"number",required:!0}},{key:"y",value:{name:"number",required:!0}}]}},description:"Fine tune the position of the target in pixels. Applies only to Beacons.",type:{name:"shape",value:{x:{name:"number",required:!1},y:{name:"number",required:!1}}}},target:{required:!1,tsType:{name:"ReactReactNode",raw:"React.ReactNode"},description:`@deprecated
The optional button or beacon that the user will click to show the Coachmark.`,type:{name:"node"}},theme:{required:!1,tsType:{name:"union",raw:"'light' | 'dark'",elements:[{name:"literal",value:"'light'"},{name:"literal",value:"'dark'"}]},description:`@deprecated
Determines the theme of the component.`,defaultValue:{value:"'light'",computed:!1},type:{name:"enum",value:[{value:"'light'",computed:!1},{value:"'dark'",computed:!1}]}},isOpenByDefault:{required:!1,tsType:{name:"boolean"},description:"Determines if the coachmark is open by default.\nDoes nothing if `overlayKind=stacked`.",defaultValue:{value:"false",computed:!1},type:{name:"bool"}}}};const C=`${T.prefix}--coachmark-beacon`,I="CoachmarkBeacon",de={kind:"default"};let k=a.forwardRef((o,l)=>{const{label:n,className:i,kind:s=de.kind,buttonProps:m,...r}=o;return a.createElement("span",{...r,className:E(C,`${C}-${s}`,i),ref:l,...F(I),role:"tooltip"},a.createElement("button",{type:"button",...m,className:`${C}__target`},a.createElement("svg",{className:`${C}__center`,"aria-label":n},a.createElement("title",null,n),a.createElement("circle",{r:1,cx:38,cy:38}))))});k=T.checkComponentEnabled(k,I);k.displayName=I;k.propTypes={buttonProps:e.shape({...re.propTypes,onClick:e.func,onDoubleClick:e.func,tabIndex:e.number,"aria-expanded":e.bool}),className:e.string,kind:e.oneOf(["default"]),label:e.string.isRequired};k.__docgenInfo={description:"Use beacon for the target prop of a Coachmark component.",methods:[],displayName:"CoachmarkBeacon",props:{className:{required:!1,tsType:{name:"string"},description:"Optional class name for this component.",type:{name:"string"}},kind:{required:!1,tsType:{name:"BEACON_KIND"},description:`What style of beacon.
BEACON_KIND is an exported enum from the Coachmark and can be used for this value.
@see {@link BEACON_KIND}`,type:{name:"enum",value:[{value:"'default'",computed:!1}]}},label:{required:!0,tsType:{name:"string"},description:"The aria label.",type:{name:"string"}},buttonProps:{required:!1,tsType:{name:"CoachmarkButtonProps"},description:"button props",type:{name:"shape",value:{onClick:{name:"func",required:!1},onDoubleClick:{name:"func",required:!1},tabIndex:{name:"number",required:!1},"aria-expanded":{name:"bool",required:!1}}}}}};export{g as C,k as a};
