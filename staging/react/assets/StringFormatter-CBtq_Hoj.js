import{e as p,r as g}from"./index-DtHxqM--.js";import{d as v,P as s}from"./index-4poXP75K.js";import{g as I}from"./devtools-B69Kc3qg.js";import{p as E}from"./settings-Bzj6EGPa.js";import{D as M}from"./DefinitionTooltip-DCyVnqQ8.js";import{a as N}from"./props-helper-57MyEezq.js";import{u as w}from"./useIsomorphicEffect-DztsuiUB.js";const t={TOP:"top",TOP_LEFT:"top-left",TOP_RIGHT:"top-right",BOTTOM:"bottom",BOTTOM_LEFT:"bottom-left",BOTTOM_RIGHT:"bottom-right",LEFT:"left",LEFT_BOTTOM:"left-bottom",LEFT_TOP:"left-top",RIGHT:"right",RIGHT_BOTTOM:"right-bottom",RIGHT_TOP:"right-top"},e={TOP:"top",TOP_START:"top-start",TOP_END:"top-end",BOTTOM:"bottom",BOTTOM_START:"bottom-start",BOTTOM_END:"bottom-end",LEFT:"left",LEFT_END:"left-end",LEFT_START:"left-start",RIGHT:"right",RIGHT_END:"right-end",RIGHT_START:"right-start"},B=l=>({[t.TOP_LEFT]:e.TOP_START,[t.TOP_RIGHT]:e.TOP_END,[t.BOTTOM_LEFT]:e.BOTTOM_START,[t.BOTTOM_RIGHT]:e.BOTTOM_END,[t.LEFT_BOTTOM]:e.LEFT_END,[t.LEFT_TOP]:e.LEFT_START,[t.RIGHT_BOTTOM]:e.RIGHT_END,[t.RIGHT_START]:e.RIGHT_START})[l],m=`${E.prefix}--string-formatter`,_="StringFormatter",u={lines:1,tooltipDirection:e.BOTTOM_START,truncate:!1,width:null};let n=p.forwardRef(({className:l,lines:r=u.lines,tooltipDirection:d=u.tooltipDirection,truncate:o=u.truncate,width:f=u.width,value:c,...F},T)=>{const O=g.useRef(null),h=g.useRef(null),[S,y]=g.useState(!1),A=i=>{O.current=i,typeof T=="function"?T(i):T&&(T.current=i)};w(()=>{const i=()=>{const a=h.current;if(a){a.style.webkitLineClamp=o?r:void 0,a.style.maxWidth=f;const P=a.clientHeight/(2*r),H=a.scrollHeight>a.clientHeight+P;y(H)}},R=new ResizeObserver(i);return O.current&&(R.observe(O.current),i()),()=>{R.disconnect()}},[r,c,f,o]);const b=p.createElement("span",{ref:h,className:v(`${m}--content`,{[`${m}--truncate`]:o})},c);return p.createElement("span",{...F,className:v(m,l),ref:A,...I(_)},o&&S?p.createElement(M,{className:`${m}__tooltip`,align:d,definition:c,openOnHover:!0},b):b)});n=E.checkComponentEnabled(n,_);n.displayName=_;n.validateAlignment=()=>(l,r,d)=>{const o=l[r];if(Object.values(t).includes(o)){const c=B(o);console.warn(`"${o}" is a deprecated value for the "${r}" prop on the "${d}" component. Use "${c}" instead. Allowable values are: ${Object.values(e).join(", ")}.`)}};n.propTypes={className:s.string,lines:s.number,tooltipDirection:N([n.validateAlignment(),s.oneOf(Object.values(t),Object.values(e))]),truncate:s.bool,value:s.string.isRequired,width:s.string};n.__docgenInfo={description:`StringFormatter allows for truncating text while displaying a tooltip
overlay on hover or focus with the entirety of the provided copy.`,methods:[{name:"validateAlignment",docblock:null,modifiers:["static"],params:[],returns:null}],displayName:"StringFormatter",props:{lines:{defaultValue:{value:"1",computed:!1},description:"Number of lines to clamp value.",type:{name:"number"},required:!1},tooltipDirection:{defaultValue:{value:"'bottom-start'",computed:!1},description:"Specify the direction of the tooltip. Can be either top or bottom.",type:{name:"custom",raw:`allPropTypes([
  StringFormatter.validateAlignment(),
  PropTypes.oneOf(
    Object.values(deprecated_StringFormatterAlignment),
    Object.values(StringFormatterAlignment)
  ),
])`},required:!1},truncate:{defaultValue:{value:"false",computed:!1},description:"Whether or not the value should be truncated. if it exceeds lines.",type:{name:"bool"},required:!1},width:{defaultValue:{value:"null",computed:!1},description:"Maximum width of value which should include",type:{name:"string"},required:!1},className:{description:"Provide an optional class to be applied to the containing node.",type:{name:"string"},required:!1},value:{description:"Value to format.",type:{name:"string"},required:!0}}};export{n as S};
