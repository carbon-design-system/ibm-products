import{e,S as G,r as o,p as H,B as U,c as Y}from"./iframe-arkle79Y.js";import{E as k,a as r}from"./EditTearsheetForm-BV6vSkqY.js";import{C as n}from"./Column-kjhN8YZ2.js";import{I as j}from"./Notification-Ik4iDWAp.js";import{N as K}from"./NumberInput-C5o0CAOn.js";import{R as u}from"./RadioButton-DjWuvl3_.js";import{R as W}from"./RadioButtonGroup-CsBw_z1F.js";import{T as s}from"./TextInput-CfvZmzil.js";import{T as J}from"./Toggle-CNMcwf2a.js";import{S as Q,s as X}from"./slug-O07ZCcw5.js";import{A as Z}from"./index-C9tAxeEq.js";import"./FormGroup-Brf_bgWI.js";import"./Grid-DutFpA4s.js";import"./Form-CxTbAc8q.js";import"./SideNavLinkText-GTTewJJn.js";import"./AriaPropTypes-r4Ou0zDR.js";import"./useMatchMedia-JBbyLdDM.js";import"./SideNavMenuItem-DbHD9TXr.js";import"./Link-CQeCbGFh.js";import"./devtools-BxzFCMfs.js";import"./TearsheetShell-1RmU9YAC.js";import"./useResizeObserver-0PE-sa49.js";import"./getNodeTextContent-C8IeKkUQ.js";import"./props-helper-B3uqW2Cc.js";import"./ComposedModal-BUCJFmQD.js";import"./index-CmrOtKYe.js";import"./LayerContext-BFXHEcAf.js";import"./clamp--00YEiB8.js";import"./ButtonSet-CEIahZQo.js";import"./InlineLoading-BgRgURAS.js";import"./bucket-6-DcCyHKAe.js";import"./mergeRefs-D4pwfk3t.js";import"./requiredIfGivenPropIsTruthy-VsRXdxiC.js";import"./wrapFocus-oiRIiM73.js";import"./Text-pEBQpjZl.js";import"./index-Chb2kpTH.js";import"./bucket-18-C_-fDTyz.js";import"./utils-ChakNn1e.js";import"./index-Bv0Kxzda.js";import"./Wrap-LHVj_Kbc.js";import"./usePortalTarget-5IX0thUX.js";import"./index-B8FjtzAH.js";import"./useFocus-DJWb2FZ3.js";import"./usePreviousValue-BqGIc7VE.js";import"./useIsomorphicEffect-CVBbaLXF.js";import"./ActionSet-DYvKCQYa.js";import"./bucket-9-CxWWOEUU.js";import"./bucket-19-ClJk_Iwe.js";import"./useNormalizedInputProps-WzSxnLMD.js";import"./FormContext-CgeFsgSy.js";import"./useControllableState-DiUheEVj.js";import"./documentLang-E105Y72C.js";import"./bucket-16-BIMVP3DE.js";import"./bucket-0-DH44BtVj.js";import"./bucket-10-NvHEQBMv.js";const ee=".c4p--tearsheet-edit-multi-form__description{font-size:var(--cds-body-compact-01-font-size, .875rem);font-weight:var(--cds-body-compact-01-font-weight, 400);line-height:var(--cds-body-compact-01-line-height, 1.28572);letter-spacing:var(--cds-body-compact-01-letter-spacing, .16px);padding-block-end:.75rem}p.c4p--tearsheet-edit-multi-form__description:last-of-type{padding-block-end:2rem}.c4p--tearsheet-edit-multi-form__heading{font-weight:600}.c4p--tearsheet-edit-multi-form .c4p--tearsheet__content .cds--form-item{margin-block-end:1rem}.cds--tile-group div{display:flex;flex-wrap:wrap}.c4p--tearsheet-edit-multi-form--custom-tile{block-size:240px;inline-size:280px;margin-inline-end:1rem}.c4p--tearsheet-edit-multi-form--custom-tile .c4p--empty-state__illustration.c4p--empty-state__illustration--lg{block-size:120px;min-inline-size:120px}.c4p--tearsheet-edit-multi-form--custom-tile-label{position:absolute;inset-block-end:1rem;inset-inline-start:1rem}",S=()=>e.createElement(G,{altGuidelinesHref:"https://pages.github.ibm.com/carbon/ibm-products/patterns/edit-and-update/usage/#tearsheet-edit",blocks:[{story:f,description:"This is used when you have one section per step. This can be created by passing\nin the overall `<EditTearsheet />` component and the `<EditTearsheetForm />`\ncomponent with form items as children:",source:{code:`<EditTearsheet {...props}>
  <EditTearsheetForm
    title="Required title"
    subtitle="Optional subtitle"
    description="Optional description"
    onNext={() => {
      'Optional function';
    }}
  >
    <TextInput
      id="test-1"
      invalidText="A valid value is required"
      labelText="Topic name"
      placeholder="Enter topic name"
    />
  </EditTearsheetForm>
</EditTearsheet>`}},{title:"Using custom components",description:"It is possible to use custom components that return `EditTearsheetForms` in\norder to help reduce the amount of logic in the component that contains the main\n`EditTearsheet`. _It is required that each child of the `EditTearsheet` either\nbe a custom step or a `EditTearsheetForm`_. An example of this could look like\nthe following:",source:{code:`const CreateFormCustom = ({ subtitle, ...rest }) => {
  return (
    <EditTearsheetForm {...rest} subtitle={subtitle} title="Form 1">
      form content here
    </EditTearsheetForm>
  );
};

const CreateComponent = () => {
  return (
    <EditTearsheet {...EditTearsheetProps}>
      <CreateFormCustom subtitle="Custom form subtitle" />
      <EditTearsheetForm
        title="Topic name"
        fieldsetLegendText="Topic information"
        subtitle="This is the unique name used to recognize your topic"
        description="It will also be used by your producers and consumers as part of the
        connection information, so make it something easy to recognize."
      >
        Content for second form
      </EditTearsheetForm>
    </EditTearsheet>
  );
};`}},{title:"Class names",description:"Additionally, to get the preferred styling when including your own children as\nsections, you can utilize the below included class names.\n\n| Class name                                            | Element     | Features                                                   |\n| ----------------------------------------------------- | ----------- | ---------------------------------------------------------- |\n| `#{$pkg-prefix}--create-tearsheet__form--title`       | title       | `productive-heading-04` & `margin-bottom` of `$spacing-05` |\n| `#{$pkg-prefix}--create-tearsheet__form--subtitle`    | subtitle    | `productive-heading-01` & `margin-bottom` of `$spacing-03` |\n| `#{$pkg-prefix}--create-tearsheet__form--description` | description | `body-long-01` & `margin-bottom` of `$spacing-06`          |\n| `#{$pkg-prefix}--create-tearsheet__form--fieldset`    | fieldset    | `margin-bottom` of `$spacing-05` to all children elements  |\n"}]});S.__docgenInfo={description:"",methods:[],displayName:"DocsPage"};const{action:h}=__STORYBOOK_MODULE_ACTIONS__,g=`${H.prefix}--tearsheet-edit-multi-form`,F=({cancelButtonText:a,className:I,description:O,influencerWidth:V,label:z,slug:A,submitButtonText:L,title:N})=>{const[l,m]=o.useState(!1),[i,c]=o.useState(!1),[p,T]=o.useState("Topic name here"),[b,E]=o.useState("Topic description here"),[x,y]=o.useState("Topic value here"),[v,_]=o.useState("Location here"),[$,C]=o.useState(1),[P,w]=o.useState("one-day"),[B,d]=o.useState(!1),D=()=>{T(p),E(b),y(x),_(v),C(1),w("one-day"),c(!1),d(!1),m(!1)},R=()=>{D(),h("onClose")()},q=async()=>{await new Promise(t=>setTimeout(t,1e3)),m(!1),h("onSubmit")()},M=()=>{h("handleFormChange")()};return e.createElement("div",null,e.createElement("style",null,`.${g} { opacity: 0 }`,";"),e.createElement(U,{onClick:()=>m(!l)},l?"Close EditTearsheet":"Open EditTearsheet"),e.createElement(k,{influencerWidth:V,label:z,className:Y(g,I),submitButtonText:L,cancelButtonText:a,description:O,title:N,open:l,onRequestSubmit:q,onClose:R,onFormChange:M,slug:A&&Q()},e.createElement(r,{title:"Topic name",fieldsetLegendText:"Topic information",subtitle:"This is the unique name used to recognize your topic",description:`It will also be used by your producers and consumers as part of the
          connection information, so make it something easy to recognize.`},e.createElement(n,{xlg:8,lg:8,md:8,sm:8},e.createElement(s,{labelText:"Topic name",placeholder:"Enter topic name",id:"tearsheet-multi-form-story-text-input-multi-form-1",value:p,onChange:t=>{t.target.value.length&&d(!1),T(t.target.value)},invalid:B,invalidText:"This is a required field",onBlur:()=>{p.length||d(!0)}}),e.createElement(s,{labelText:"Topic description (optional)",id:"tearsheet-multi-form-story-text-input-multi-form-1-input-2",value:b,placeholder:"Enter topic description",onChange:t=>E(t.target.value)}),e.createElement(s,{labelText:"Topic version (optional)",id:"tearsheet-multi-form-story-text-input-multi-form-1-input-3",value:x,placeholder:"Enter topic version",onChange:t=>y(t.target.value)}),i&&e.createElement(j,{kind:"error",title:"Error",subtitle:"Resolve errors to continue",onClose:()=>c(!i)}),e.createElement(J,{className:`${g}__error--toggle`,id:"simulated-error-toggle",size:"sm",labelText:"Simulate error",onToggle:()=>c(!i),toggled:i}))),e.createElement(r,{title:"Location",subtitle:"Custom form subtitle",fieldsetLegendText:"",description:"Custom form description (see storybook implementation for new custom form capability)"},e.createElement(n,{xlg:8,lg:8,md:8,sm:8},e.createElement(s,{value:v,onChange:t=>_(t.target.value),id:"custom-form-input",labelText:"Location",placeholder:"Enter location"}))),e.createElement(r,{title:"Partitions",subtitle:`One or more partitions make up a topic. A partition is an ordered
          list of messages.`,description:`Partitions are distributed across the brokers in order to increase
          the scalability of your topic. You can also use them to distribute
          messages across the members of a consumer group.`,fieldsetLegendText:"Partition information"},e.createElement(n,{xlg:3,lg:3,md:8,sm:4},e.createElement(K,{id:"carbon-number",min:1,max:100,value:$,label:"Partitions",helperText:"1 partition is sufficient for getting started but, production systems often have more.",invalidText:"Max partitions is 100, min is 1",onChange:t=>C(t.imaginaryTarget.value)}))),e.createElement(r,{title:"Message retention",subtitle:"This is how long messages are retained before they are deleted.",description:`If your messages are not read by a consumer within this time, they
          will be missed.`,fieldsetLegendText:"Message retention scheduling"},e.createElement(n,{xlg:8,lg:8,md:8,sm:8},e.createElement(W,{legendText:"Message retention",name:"radio-button-group",defaultSelected:P,onChange:t=>w(t),orientation:"vertical"},e.createElement(u,{labelText:"A day",value:"one-day",id:"one-day"}),e.createElement(u,{labelText:"A week",value:"one-week",id:"one-week"}),e.createElement(u,{labelText:"A month",value:"one-month",id:"one-month"}))))))};F.__docgenInfo={description:"",methods:[],displayName:"MultiFormEditTearsheet"};const it={title:"Deprecated/Edit and update/EditTearsheet",component:k,tags:["autodocs"],argTypes:{description:{control:{type:"text"}},label:{control:{type:"text"}},title:{control:{type:"text"}},influencer:{control:{disable:!0}},onClose:{control:{disable:!0}},open:{control:{disable:!0}},...X()},parameters:{styles:ee,docs:{page:S}},decorators:[a=>e.createElement(Z,{type:"deprecation-notice",text:e.createElement("div",null,"This component is deprecated and will be removed in the next major version.")},a())]},te={title:"Edit topic",description:"Specify details for the topic you want to update",submitButtonText:"Save",cancelButtonText:"Cancel",className:"test-class-name",label:"",influencerWidth:"narrow"},f=F.bind({});f.storyName="Edit tearsheet";f.args={...te};const rt=["multiFormEditTearsheet"];export{rt as __namedExportsOrder,it as default,f as multiFormEditTearsheet};
