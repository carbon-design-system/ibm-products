import{e,S as le,B as g,r as n,p as D}from"./iframe-B06X_oSn.js";import{B as M}from"./ButtonSet-oAVNqJ7O.js";import{D as ce}from"./Dropdown-D9S0rVlu.js";import{F as G}from"./Form-D15kG0bM.js";import{F as V}from"./FormGroup-CcdXe4xs.js";import{T as pe,a as ue,b as N,c as de,d as P}from"./Tabs-BP8vljYK.js";import{T as b}from"./TextInput-bUCzTh3v.js";import{T as me,a as fe,b as he,A as ge,c as ye}from"./index-BYuspRHq.js";import{S as Y,H as j}from"./index-Bo2paA6_.js";import{T,d as be}from"./Tearsheet-CePMml5k.js";import{a as Te,b as Ce,c as ve,s as ke}from"./_storybook-styles-B9EX_MeK.js";import{g as Ee}from"./props-helper-CTf-A1om.js";import{T as xe}from"./TearsheetNarrow-CAeAYLS2.js";import{T as U}from"./TruncatedText-jP1PXwUh.js";import{I as Oe}from"./bucket-9-C7wTg3XL.js";import"./index-BRivBB8X.js";import"./inheritsLoose-DHKJTbHM.js";import"./FormContext-CV1tIC8k.js";import"./mergeRefs-D4pwfk3t.js";import"./utils-CAn8HyWE.js";import"./bucket-19-DIBHTWkV.js";import"./Grid-M2BqC1H7.js";import"./ComposedModal-CwZ0Pnju.js";import"./index-B0VEw6cB.js";import"./LayerContext-CMp3yckT.js";import"./clamp--00YEiB8.js";import"./InlineLoading-DpNzirJ0.js";import"./bucket-6-CXHwg_52.js";import"./requiredIfGivenPropIsTruthy-VsRXdxiC.js";import"./wrapFocus-BbzW8Hks.js";import"./Text-BNZPVZMz.js";import"./useControllableState-CVLdOTaw.js";import"./useNoInteractiveChildren-C7q4e1N4.js";import"./useMatchMedia-DOLBFuAU.js";import"./useNormalizedInputProps-CZEJUS1l.js";import"./bucket-18-hOSj86Ex.js";import"./TearsheetShell-CTtBojwZ.js";import"./useResizeObserver-CDwlcMV3.js";import"./getNodeTextContent-C8IeKkUQ.js";import"./Wrap-BOtiQjkB.js";import"./usePortalTarget-Dhd837UD.js";import"./index-K6A31R8p.js";import"./useFocus-BsD4RQSy.js";import"./usePreviousValue-CKJ1yiIZ.js";import"./useIsomorphicEffect-Cw3FTHuQ.js";import"./ActionSet-jRuZbZ14.js";import"./devtools-BYTU908B.js";const q=()=>e.createElement(le,{blocks:[{story:k},{story:E},{story:x},{story:R},{story:O},{story:B},{story:w},{story:A},{story:S},{title:"With AI Label",description:"An AI Label is intended for any scenario where something is being generated by AI to reinforce AI transparency, accountability, and explainability at the UI level. A Carbon AI Label can be provided to the Tearsheet component by including an `decorator` property on it and providing the carbon AILabel component as its own custom component.<br/> The `decorator` is versatile and can also be used to render other components.",source:{language:"html",code:`
<Tearsheet
  {...args}
  decorator={
    // carbon AILabel component
    <AILabel
      className="ai-label-container"
      autoAlign={false}
      align="bottom-right"
    >
      <AILabelContent>... ...</AILabelContent>
    </AILabel>
  }
>
  ...
</Tearsheet>
          `}}]});q.__docgenInfo={description:"",methods:[],displayName:"DocsPage"};const{action:C}=__STORYBOOK_MODULE_ACTIONS__,kt={title:"Components/Tearsheet",component:T,tags:["autodocs"],parameters:{styles:ke,layout:"fullscreen",docs:{page:q}},argTypes:{...Ee(be),actions:{control:{type:"select",labels:ve},options:Ce,mapping:Te({primary:"Replace",danger:"Delete",secondary:"Back",secondary2:"Keep Both",dangerGhost:"Abort",ghost:"Cancel"},C)},description:{control:{type:"select",labels:{0:"With plain String",1:"With TruncatedText and 1 line",2:"With TruncatedText and 2 lines"},default:0},description:"A description of the flow, displayed in the header area of the tearsheet.\n Note: `TruncatedText` can be passed as a React node to apply custom text formatting, including ellipsis truncation and a definition tooltip when the content is too long.",options:[0,1,2],mapping:{0:"This is a description for the tearsheet, providing an opportunity to describe the flow over a couple of lines in the header of the tearsheet.",1:e.createElement(U,{autoAlign:!0,lines:1,tooltipDirection:"bottom",value:"This is a description for the tearsheet, providing an opportunity to describe the flow over a couple of lines in the header of the tearsheet."}),2:e.createElement(U,{autoAlign:!0,lines:2,tooltipDirection:"bottom",value:"This is a description for the tearsheet, providing an opportunity to describe the flow over a couple of lines in the header of the tearsheet."})}},headerActions:{control:{type:"select",labels:{0:"none",1:"drop-down",2:"buttons"}},options:[0,1,2],mapping:{0:null,1:e.createElement(ce,{id:"tss-had",label:"Choose an option",titleText:"Choose an option",items:["option 1","option 2","option 3","option 4"]}),2:e.createElement(M,null,e.createElement(g,{kind:"secondary",size:"sm",style:{width:"initial"}},"Secondary"),e.createElement(g,{kind:"primary",size:"sm",style:{width:"initial"}},"Primary"))}},label:{control:{type:"text"}},title:{control:{type:"text"}},influencer:{control:{disable:!0}},onClose:{control:{disable:!0}},navigation:{control:{disable:!0}},open:{control:{disable:!0}},portalTarget:{control:{disable:!0}},decorator:{control:{type:"select",labels:{0:"No AI Label",1:"with AI Label",2:"With non AI Label component"},default:0},description:"Optional prop that allows you to pass any component.",options:[0,1,2]},slug:{control:{type:"select",labels:{0:"No AI Slug",1:"with AI Slug"},default:0},description:'Deprecated: Property replaced by "decorator"',options:[0,1]}}},v="Close the tearsheet",z=e.createElement(Y,{className:"tearsheet-stories__dummy-content-block"},e.createElement(j,null,"Influencer heading"),e.createElement("p",null,"Influencer content")),L="The label of the tearsheet",J=e.createElement(Y,{className:"tearsheet-stories__dummy-content-block"},e.createElement(j,null,"Main content heading"),e.createElement(G,null,e.createElement("p",null,"Main content"),e.createElement(V,{legendId:"tearsheet-form-group",legendText:"FormGroup Legend"},e.createElement(b,{id:"tss-ft1",labelText:"Enter an important value here",style:{marginBottom:"1em"}}),e.createElement(b,{id:"tss-ft2",labelText:"Here is an entry field:",style:{marginBottom:"1em"}})))),I="Title of the tearsheet",p=s=>{switch(s){case 1:return e.createElement(ge,{className:"decorator-container",size:"xs"},e.createElement(ye,null,e.createElement("div",null,e.createElement("p",{className:"secondary"},"AI Explained"),e.createElement("h1",null,"84%"),e.createElement("p",{className:"secondary bold"},"Confidence score"),e.createElement("p",{className:"secondary"},"This is not really Lorem Ipsum but the spell checker did not like the previous text with it's non-words which is why this unwieldy sentence, should one choose to call it that, here."),e.createElement("hr",null),e.createElement("p",{className:"secondary"},"Model type"),e.createElement("p",{className:"bold"},"Foundation model"))));case 2:return e.createElement(me,null,e.createElement(fe,{label:"Additional information"},e.createElement(Oe,null)),e.createElement(he,null,e.createElement("p",null,"Custom content here")));default:return}},Q=({actions:s,decorator:r,slug:a,...m},c)=>{const[f,t]=n.useState(!1);n.useEffect(()=>{setTimeout(()=>t(c.viewMode!=="docs"),0)},[]);const h=s&&Array.prototype.map.call(s,o=>{if(o.label==="Cancel"){const i=o.onClick;return{...o,onClick:l=>{t(!1),i(l)}}}return o}),u=n.useRef(void 0);return e.createElement(e.Fragment,null,e.createElement("style",null,`.${D.prefix}--tearsheet { opacity: 0 }`,";"),e.createElement("main",null,e.createElement(g,{onClick:()=>t(!0)},"Open Tearsheet")),e.createElement("div",{ref:u},e.createElement(T,{...m,actions:h,open:f,onClose:()=>t(!1),decorator:r&&p(r),slug:a&&p(a)},J)))},X=e.createElement("div",{className:"tearsheet-stories__tabs"},e.createElement(de,{"aria-label":"Tab list"},e.createElement(P,null,"Tab 1"),e.createElement(P,null,"Tab 2"),e.createElement(P,null,"Tab 3"),e.createElement(P,null,"Tab 4"))),Z=({actions:s,decorator:r,slug:a,...m},c)=>{const[f,t]=n.useState(!1);n.useEffect(()=>{setTimeout(()=>t(c.viewMode!=="docs"),0)},[]);const h=s&&Array.prototype.map.call(s,o=>{if(o.label==="Cancel"){const i=o.onClick;return{...o,onClick:l=>{t(!1),i(l)}}}return o}),u=n.useRef(void 0);return e.createElement(e.Fragment,null,e.createElement("style",null,`.${D.prefix}--tearsheet { opacity: 0 }`,";"),e.createElement("main",null,e.createElement(g,{onClick:()=>t(!0)},"Open Tearsheet")),e.createElement("div",{ref:u},e.createElement(pe,{onChange:C("Tab selection changed")},e.createElement(T,{...m,actions:h,open:f,onClose:()=>t(!1),decorator:r&&p(r),slug:a&&p(a)},e.createElement(ue,null,e.createElement(N,null,"Tab 1"),e.createElement(N,null,"Tab 2"),e.createElement(N,null,"Tab 3"),e.createElement(N,null,"Tab 4"))))))},Be=({actions:s,decorator:r,slug:a,...m},c)=>{const[f,t]=n.useState(!1),h=n.useRef(void 0),u=s&&Array.prototype.map.call(s,i=>{if(i.label==="Cancel"){const l=i.onClick;return{...i,onClick:y=>{t(!1),l(y)}}}return i}),o=n.useRef(void 0);return n.useEffect(()=>{setTimeout(()=>t(c.viewMode!=="docs"),0)},[]),e.createElement(e.Fragment,null,e.createElement("style",null,`.${D.prefix}--tearsheet { opacity: 0 }`,";"),e.createElement("main",null,e.createElement(g,{ref:h,onClick:()=>t(!0)},"Open Tearsheet")),e.createElement("div",{ref:o},e.createElement(T,{...m,actions:u,open:f,onClose:()=>t(!1),decorator:r&&p(r),slug:a&&p(a),launcherButtonRef:h},J)))},we=({actions:s,decorator:r,slug:a,...m},c)=>{const[f,t]=n.useState(!1),[h,u]=n.useState(""),o=s&&Array.prototype.map.call(s,l=>{if(l.label==="Cancel"){const y=l.onClick;return{...l,onClick:$=>{t(!1),y($)}}}return l}),i=n.useRef(void 0);return n.useEffect(()=>{setTimeout(()=>t(c.viewMode!=="docs"),0)},[]),e.createElement(e.Fragment,null,e.createElement("style",null,`.${D.prefix}--tearsheet { opacity: 0 }`,";"),e.createElement("main",null,e.createElement(g,{onClick:()=>t(!0)},"Open Tearsheet")),e.createElement("div",{ref:i},e.createElement(T,{...m,actions:o,open:f,onClose:()=>t(!1),decorator:r&&p(r),slug:a&&p(a)},e.createElement("div",{className:"tearsheet-stories__dummy-content-block"},e.createElement(G,null,e.createElement("p",null,"Main content"),e.createElement(V,{legendId:"tearsheet-form-group",legendText:"FormGroup Legend"},e.createElement(b,{id:"tss-ft1",labelText:"Enter an important value here",style:{marginBottom:"1em"},disabled:!h?.length>0}),e.createElement(b,{id:"tss-ft2",labelText:"Here is an entry field:",style:{marginBottom:"1em"},onChange:l=>u(l?.target?.value)})))))))},Ae=({actions:s,decorator:r,slug:a,...m},c)=>{const[f,t]=n.useState(!1),h=s&&Array.prototype.map.call(s,o=>{if(o.label==="Cancel"){const i=o.onClick;return{...o,onClick:l=>{t(!1),i(l)}}}return o}),u=n.useRef(void 0);return n.useEffect(()=>{setTimeout(()=>t(c.viewMode!=="docs"),0)},[]),e.createElement(e.Fragment,null,e.createElement("style",null,`.${D.prefix}--tearsheet { opacity: 0 }`,";"),e.createElement("main",null,e.createElement(g,{onClick:()=>t(!0)},"Open Tearsheet")),e.createElement("div",{ref:u},e.createElement(T,{...m,actions:h,open:f,onClose:()=>t(!1),decorator:r&&p(r),slug:a&&p(a)},e.createElement("div",{className:"tearsheet-stories__dummy-content-block"},e.createElement(G,null,e.createElement("p",null,"Main content"),e.createElement(V,{legendId:"tearsheet-form-group",legendText:"FormGroup Legend"},e.createElement(b,{id:"tss-ft1",labelText:"This field's value is 'read only':",readOnly:!0,style:{marginBottom:"1em"},value:"Value"}),e.createElement(b,{id:"tss-ft2",labelText:"Here is an entry field:",style:{marginBottom:"1em"}})))))))},ee=({mixedSizes:s,actions:r,decorator:a,description:m,slug:c,...f},t)=>{const[h,u]=n.useState(!1),[o,i]=n.useState(!1),[l,y]=n.useState(!1),$=n.useRef(void 0),W=n.useRef(void 0),H=n.useRef(void 0),K=n.useRef(void 0),te=n.cloneElement(m,{id:"truncated-text-01"}),ne=n.cloneElement(m,{id:"truncated-text-02"}),oe=n.cloneElement(m,{id:"truncated-text-03"}),ae=Array.prototype.map.call(r,d=>{if(d.label==="Cancel"){const F=d.onClick;return{...d,onClick:_=>{u(!1),F(_)}}}return d}),se=Array.prototype.map.call(r,d=>{if(d.label==="Cancel"){const F=d.onClick;return{...d,onClick:_=>{i(!1),F(_)}}}return d}),re=Array.prototype.map.call(r,d=>{if(d.label==="Cancel"){const F=d.onClick;return{...d,onClick:_=>{y(!1),F(_)}}}return d}),ie=s?xe:T;return n.useEffect(()=>{setTimeout(()=>{u(t.viewMode!=="docs"),i(t.viewMode!=="docs"),y(t.viewMode!=="docs")},0)},[]),e.createElement(e.Fragment,null,e.createElement("style",null,`.${D.prefix}--tearsheet { opacity: 0 }`,";"),e.createElement("div",{style:{height:"3rem"},"data-reserve-space":"for toggle buttons"}),e.createElement("main",null,e.createElement(M,{style:{display:"flex",position:"fixed",top:0,left:0,zIndex:1e4}},e.createElement(g,{onClick:()=>u(!h),ref:W},"Toggle tearsheet 1"),e.createElement(g,{onClick:()=>i(!o)},"Toggle tearsheet 2"),!s&&e.createElement(g,{onClick:()=>y(!l)},"Toggle tearsheet 3"))),e.createElement("div",{ref:$},e.createElement(T,{...f,description:te,actions:ae,headerActions:e.createElement(M,null,e.createElement(g,{kind:"primary",size:"sm",style:{width:"initial"},onClick:()=>i(!0),disabled:o,ref:H},"Open tearsheet 2")),title:"Tearsheet 1",open:h,onClose:()=>u(!1),selectorPrimaryFocus:"#stacked-input-1",decorator:a&&p(a),slug:c&&p(c),launcherButtonRef:W},e.createElement("div",{className:"tearsheet-stories__dummy-content-block"},"Main content 1",e.createElement(b,{id:"stacked-input-1",labelText:"Enter an important value here"}))),e.createElement(ie,{...f,description:ne,actions:se,headerActions:e.createElement(M,null,e.createElement(g,{kind:"primary",size:"sm",style:{width:"initial"},onClick:()=>y(!0),disabled:l,ref:K},"Open tearsheet 3")),title:"Tearsheet 2",open:o,onClose:()=>i(!1),selectorPrimaryFocus:"#stacked-input-2",decorator:a&&p(a),slug:c&&p(c),launcherButtonRef:H},e.createElement("div",{className:"tearsheet-stories__dummy-content-block"},"Main content 2",e.createElement(b,{id:"stacked-input-2",labelText:"Enter an important value here"}))),!s&&e.createElement(T,{...f,description:oe,actions:re,title:"Tearsheet 3",open:l,onClose:()=>y(!1),selectorPrimaryFocus:"#stacked-input-3",decorator:a&&p(a),slug:c&&p(c),launcherButtonRef:K},e.createElement("div",{className:"tearsheet-stories__dummy-content-block"},"Main content 3",e.createElement(b,{id:"stacked-input-3",labelText:"Enter an important value here"})))))},k=Q.bind({});k.storyName="Tearsheet";k.args={closeIconDescription:v,description:2,onClose:C("onClose called"),title:I,actions:7,selectorPrimaryFocus:"#tss-ft1"};const E=Z.bind({});E.storyName="Tearsheet with navigation";E.args={closeIconDescription:v,description:2,label:L,navigation:X,onClose:C("onClose called"),title:I,actions:7};const x=Q.bind({});x.storyName="Tearsheet with influencer";x.args={closeIconDescription:v,description:2,influencer:z,influencerPosition:"left",influencerWidth:"narrow",onClose:C("onClose called"),title:I,actions:7};const R=Be.bind({});R.args={closeIconDescription:v,description:2,onClose:C("onClose called"),title:I,actions:7};const O=we.bind({});O.storyName="First Element Disabled";O.args={closeIconDescription:v,hasCloseIcon:!0,description:2,onClose:C("onClose called"),title:I,actions:7,selectorPrimaryFocus:"#tss-ft1"};const B=Ae.bind({});B.storyName="First Element ReadOnly";B.args={closeIconDescription:v,hasCloseIcon:!0,description:2,onClose:C("onClose called"),title:I,actions:7,selectorPrimaryFocus:"#tss-ft1"};const w=Z.bind({});w.storyName="Tearsheet with all header items and influencer";w.args={closeIconDescription:v,description:2,hasCloseIcon:!0,headerActions:2,influencer:z,influencerPosition:"left",influencerWidth:"narrow",label:L,navigation:X,onClose:C("onClose called"),title:I,actions:0,decorator:1,slug:0};const A=ee.bind({});A.storyName="Stacking tearsheets";A.args={closeIconDescription:v,description:2,height:"lower",influencer:z,label:L,actions:7};const S=ee.bind({});S.storyName="Stacking tearsheets, different sizes";S.args={mixedSizes:!0,closeIconDescription:v,description:2,height:"lower",influencer:z,label:L,actions:7};k.parameters={...k.parameters,docs:{...k.parameters?.docs,source:{originalSource:`({
  actions,
  decorator,
  slug,
  ...args
}, context) => {
  const [open, setOpen] = useState(false);
  useEffect(() => {
    setTimeout(() => setOpen(context.viewMode !== 'docs'), 0);
  }, []);
  const wiredActions = actions && Array.prototype.map.call(actions, action => {
    if (action.label === 'Cancel') {
      const previousClick = action.onClick;
      return {
        ...action,
        onClick: evt => {
          setOpen(false);
          previousClick(evt);
        }
      };
    }
    return action;
  });
  const ref = useRef(undefined);
  return <>
      <style>{\`.\${pkg.prefix}--tearsheet { opacity: 0 }\`};</style>
      <main>
        <Button onClick={() => setOpen(true)}>Open Tearsheet</Button>
      </main>
      <div ref={ref}>
        <Tearsheet {...args} actions={wiredActions} open={open} onClose={() => setOpen(false)} decorator={decorator && sampleDecorator(decorator)} slug={slug && sampleDecorator(slug)}>
          {mainContent}
        </Tearsheet>
      </div>
    </>;
}`,...k.parameters?.docs?.source}}};E.parameters={...E.parameters,docs:{...E.parameters?.docs,source:{originalSource:`({
  actions,
  decorator,
  slug,
  ...args
}, context) => {
  const [open, setOpen] = useState(false);
  useEffect(() => {
    setTimeout(() => setOpen(context.viewMode !== 'docs'), 0);
  }, []);
  const wiredActions = actions && Array.prototype.map.call(actions, action => {
    if (action.label === 'Cancel') {
      const previousClick = action.onClick;
      return {
        ...action,
        onClick: evt => {
          setOpen(false);
          previousClick(evt);
        }
      };
    }
    return action;
  });
  const ref = useRef(undefined);
  return <>
      <style>{\`.\${pkg.prefix}--tearsheet { opacity: 0 }\`};</style>
      <main>
        <Button onClick={() => setOpen(true)}>Open Tearsheet</Button>
      </main>
      <div ref={ref}>
        <Tabs onChange={action('Tab selection changed')}>
          <Tearsheet {...args} actions={wiredActions} open={open} onClose={() => setOpen(false)} decorator={decorator && sampleDecorator(decorator)} slug={slug && sampleDecorator(slug)}>
            <TabPanels>
              <TabPanel>Tab 1</TabPanel>
              <TabPanel>Tab 2</TabPanel>
              <TabPanel>Tab 3</TabPanel>
              <TabPanel>Tab 4</TabPanel>
            </TabPanels>
          </Tearsheet>
        </Tabs>
      </div>
    </>;
}`,...E.parameters?.docs?.source}}};x.parameters={...x.parameters,docs:{...x.parameters?.docs,source:{originalSource:`({
  actions,
  decorator,
  slug,
  ...args
}, context) => {
  const [open, setOpen] = useState(false);
  useEffect(() => {
    setTimeout(() => setOpen(context.viewMode !== 'docs'), 0);
  }, []);
  const wiredActions = actions && Array.prototype.map.call(actions, action => {
    if (action.label === 'Cancel') {
      const previousClick = action.onClick;
      return {
        ...action,
        onClick: evt => {
          setOpen(false);
          previousClick(evt);
        }
      };
    }
    return action;
  });
  const ref = useRef(undefined);
  return <>
      <style>{\`.\${pkg.prefix}--tearsheet { opacity: 0 }\`};</style>
      <main>
        <Button onClick={() => setOpen(true)}>Open Tearsheet</Button>
      </main>
      <div ref={ref}>
        <Tearsheet {...args} actions={wiredActions} open={open} onClose={() => setOpen(false)} decorator={decorator && sampleDecorator(decorator)} slug={slug && sampleDecorator(slug)}>
          {mainContent}
        </Tearsheet>
      </div>
    </>;
}`,...x.parameters?.docs?.source}}};R.parameters={...R.parameters,docs:{...R.parameters?.docs,source:{originalSource:`({
  actions,
  decorator,
  slug,
  ...args
}, context) => {
  const [open, setOpen] = useState(false);
  const buttonRef = useRef(undefined);
  const wiredActions = actions && Array.prototype.map.call(actions, action => {
    if (action.label === 'Cancel') {
      const previousClick = action.onClick;
      return {
        ...action,
        onClick: evt => {
          setOpen(false);
          previousClick(evt);
        }
      };
    }
    return action;
  });
  const ref = useRef(undefined);
  useEffect(() => {
    setTimeout(() => setOpen(context.viewMode !== 'docs'), 0);
  }, []);
  return <>
      <style>{\`.\${pkg.prefix}--tearsheet { opacity: 0 }\`};</style>
      <main>
        <Button ref={buttonRef} onClick={() => setOpen(true)}>
          Open Tearsheet
        </Button>
      </main>
      <div ref={ref}>
        <Tearsheet {...args} actions={wiredActions} open={open} onClose={() => setOpen(false)} decorator={decorator && sampleDecorator(decorator)} slug={slug && sampleDecorator(slug)} launcherButtonRef={buttonRef}>
          {mainContent}
        </Tearsheet>
      </div>
    </>;
}`,...R.parameters?.docs?.source}}};O.parameters={...O.parameters,docs:{...O.parameters?.docs,source:{originalSource:`({
  actions,
  decorator,
  slug,
  ...args
}, context) => {
  const [open, setOpen] = useState(false);
  const [text, setText] = useState('');
  const wiredActions = actions && Array.prototype.map.call(actions, action => {
    if (action.label === 'Cancel') {
      const previousClick = action.onClick;
      return {
        ...action,
        onClick: evt => {
          setOpen(false);
          previousClick(evt);
        }
      };
    }
    return action;
  });
  const ref = useRef(undefined);
  useEffect(() => {
    setTimeout(() => setOpen(context.viewMode !== 'docs'), 0);
  }, []);
  return <>
      <style>{\`.\${pkg.prefix}--tearsheet { opacity: 0 }\`};</style>
      <main>
        <Button onClick={() => setOpen(true)}>Open Tearsheet</Button>
      </main>
      <div ref={ref}>
        <Tearsheet {...args} actions={wiredActions} open={open} onClose={() => setOpen(false)} decorator={decorator && sampleDecorator(decorator)} slug={slug && sampleDecorator(slug)}>
          <div className="tearsheet-stories__dummy-content-block">
            <Form>
              <p>Main content</p>
              <FormGroup legendId="tearsheet-form-group" legendText="FormGroup Legend">
                <TextInput id="tss-ft1" labelText="Enter an important value here" style={
              // stylelint-disable-next-line carbon/layout-use
              {
                marginBottom: '1em'
              }} disabled={!text?.length > 0} />
                <TextInput id="tss-ft2" labelText="Here is an entry field:" style={
              // stylelint-disable-next-line carbon/layout-use
              {
                marginBottom: '1em'
              }} onChange={ev => setText(ev?.target?.value)} />
              </FormGroup>
            </Form>
          </div>
        </Tearsheet>
      </div>
    </>;
}`,...O.parameters?.docs?.source}}};B.parameters={...B.parameters,docs:{...B.parameters?.docs,source:{originalSource:`({
  actions,
  decorator,
  slug,
  ...args
}, context) => {
  const [open, setOpen] = useState(false);
  const wiredActions = actions && Array.prototype.map.call(actions, action => {
    if (action.label === 'Cancel') {
      const previousClick = action.onClick;
      return {
        ...action,
        onClick: evt => {
          setOpen(false);
          previousClick(evt);
        }
      };
    }
    return action;
  });
  const ref = useRef(undefined);
  useEffect(() => {
    setTimeout(() => setOpen(context.viewMode !== 'docs'), 0);
  }, []);
  return <>
      <style>{\`.\${pkg.prefix}--tearsheet { opacity: 0 }\`};</style>
      <main>
        <Button onClick={() => setOpen(true)}>Open Tearsheet</Button>
      </main>
      <div ref={ref}>
        <Tearsheet {...args} actions={wiredActions} open={open} onClose={() => setOpen(false)} decorator={decorator && sampleDecorator(decorator)} slug={slug && sampleDecorator(slug)}>
          <div className="tearsheet-stories__dummy-content-block">
            <Form>
              <p>Main content</p>
              <FormGroup legendId="tearsheet-form-group" legendText="FormGroup Legend">
                <TextInput id="tss-ft1" labelText="This field's value is 'read only':" readOnly={true} style={
              // stylelint-disable-next-line carbon/layout-use
              {
                marginBottom: '1em'
              }} value="Value" />
                <TextInput id="tss-ft2" labelText="Here is an entry field:" style={
              // stylelint-disable-next-line carbon/layout-use
              {
                marginBottom: '1em'
              }} />
              </FormGroup>
            </Form>
          </div>
        </Tearsheet>
      </div>
    </>;
}`,...B.parameters?.docs?.source}}};w.parameters={...w.parameters,docs:{...w.parameters?.docs,source:{originalSource:`({
  actions,
  decorator,
  slug,
  ...args
}, context) => {
  const [open, setOpen] = useState(false);
  useEffect(() => {
    setTimeout(() => setOpen(context.viewMode !== 'docs'), 0);
  }, []);
  const wiredActions = actions && Array.prototype.map.call(actions, action => {
    if (action.label === 'Cancel') {
      const previousClick = action.onClick;
      return {
        ...action,
        onClick: evt => {
          setOpen(false);
          previousClick(evt);
        }
      };
    }
    return action;
  });
  const ref = useRef(undefined);
  return <>
      <style>{\`.\${pkg.prefix}--tearsheet { opacity: 0 }\`};</style>
      <main>
        <Button onClick={() => setOpen(true)}>Open Tearsheet</Button>
      </main>
      <div ref={ref}>
        <Tabs onChange={action('Tab selection changed')}>
          <Tearsheet {...args} actions={wiredActions} open={open} onClose={() => setOpen(false)} decorator={decorator && sampleDecorator(decorator)} slug={slug && sampleDecorator(slug)}>
            <TabPanels>
              <TabPanel>Tab 1</TabPanel>
              <TabPanel>Tab 2</TabPanel>
              <TabPanel>Tab 3</TabPanel>
              <TabPanel>Tab 4</TabPanel>
            </TabPanels>
          </Tearsheet>
        </Tabs>
      </div>
    </>;
}`,...w.parameters?.docs?.source}}};A.parameters={...A.parameters,docs:{...A.parameters?.docs,source:{originalSource:`({
  mixedSizes,
  actions,
  decorator,
  description,
  slug,
  ...args
}, context) => {
  const [open1, setOpen1] = useState(false);
  const [open2, setOpen2] = useState(false);
  const [open3, setOpen3] = useState(false);
  const ref = useRef(undefined);
  const openButton1 = useRef(undefined);
  const openButton2 = useRef(undefined);
  const openButton3 = useRef(undefined);
  const description1 = cloneElement(description, {
    id: 'truncated-text-01'
  });
  const description2 = cloneElement(description, {
    id: 'truncated-text-02'
  });
  const description3 = cloneElement(description, {
    id: 'truncated-text-03'
  });
  const wiredActions1 = Array.prototype.map.call(actions, action => {
    if (action.label === 'Cancel') {
      const previousClick = action.onClick;
      return {
        ...action,
        onClick: evt => {
          setOpen1(false);
          previousClick(evt);
        }
      };
    }
    return action;
  });
  const wiredActions2 = Array.prototype.map.call(actions, action => {
    if (action.label === 'Cancel') {
      const previousClick = action.onClick;
      return {
        ...action,
        onClick: evt => {
          setOpen2(false);
          previousClick(evt);
        }
      };
    }
    return action;
  });
  const wiredActions3 = Array.prototype.map.call(actions, action => {
    if (action.label === 'Cancel') {
      const previousClick = action.onClick;
      return {
        ...action,
        onClick: evt => {
          setOpen3(false);
          previousClick(evt);
        }
      };
    }
    return action;
  });
  const VariableSizeTearsheet = mixedSizes ? TearsheetNarrow : Tearsheet;
  useEffect(() => {
    setTimeout(() => {
      setOpen1(context.viewMode !== 'docs');
      setOpen2(context.viewMode !== 'docs');
      setOpen3(context.viewMode !== 'docs');
    }, 0);
  }, []);
  return <>
      <style>{\`.\${pkg.prefix}--tearsheet { opacity: 0 }\`};</style>
      <div style={{
      height: '3rem'
    }} data-reserve-space="for toggle buttons" />
      <main>
        <ButtonSet style={{
        display: 'flex',
        position: 'fixed',
        top: 0,
        left: 0,
        zIndex: 10000
      }}>
          <Button onClick={() => setOpen1(!open1)} ref={openButton1}>
            Toggle&nbsp;tearsheet&nbsp;1
          </Button>
          <Button onClick={() => setOpen2(!open2)}>
            Toggle&nbsp;tearsheet&nbsp;2
          </Button>
          {!mixedSizes && <Button onClick={() => setOpen3(!open3)}>
              Toggle&nbsp;tearsheet&nbsp;3
            </Button>}
        </ButtonSet>
      </main>
      <div ref={ref}>
        <Tearsheet {...args} description={description1} actions={wiredActions1} headerActions={<ButtonSet>
              <Button kind="primary" size="sm" style={{
          width: 'initial'
        }} onClick={() => setOpen2(true)} disabled={open2} ref={openButton2}>
                Open tearsheet 2
              </Button>
            </ButtonSet>} title="Tearsheet 1" open={open1} onClose={() => setOpen1(false)} selectorPrimaryFocus="#stacked-input-1" decorator={decorator && sampleDecorator(decorator)} slug={slug && sampleDecorator(slug)} launcherButtonRef={openButton1}>
          <div className="tearsheet-stories__dummy-content-block">
            Main content 1
            <TextInput id="stacked-input-1" labelText="Enter an important value here" />
          </div>
        </Tearsheet>
        <VariableSizeTearsheet {...args} description={description2} actions={wiredActions2} headerActions={<ButtonSet>
              <Button kind="primary" size="sm" style={{
          width: 'initial'
        }} onClick={() => setOpen3(true)} disabled={open3} ref={openButton3}>
                Open tearsheet 3
              </Button>
            </ButtonSet>} title="Tearsheet 2" open={open2} onClose={() => setOpen2(false)} selectorPrimaryFocus="#stacked-input-2" decorator={decorator && sampleDecorator(decorator)} slug={slug && sampleDecorator(slug)} launcherButtonRef={openButton2}>
          <div className="tearsheet-stories__dummy-content-block">
            Main content 2
            <TextInput id="stacked-input-2" labelText="Enter an important value here" />
          </div>
        </VariableSizeTearsheet>
        {!mixedSizes && <Tearsheet {...args} description={description3} actions={wiredActions3} title="Tearsheet 3" open={open3} onClose={() => setOpen3(false)} selectorPrimaryFocus="#stacked-input-3" decorator={decorator && sampleDecorator(decorator)} slug={slug && sampleDecorator(slug)} launcherButtonRef={openButton3}>
            <div className="tearsheet-stories__dummy-content-block">
              Main content 3
              <TextInput id="stacked-input-3" labelText="Enter an important value here" />
            </div>
          </Tearsheet>}
      </div>
    </>;
}`,...A.parameters?.docs?.source}}};S.parameters={...S.parameters,docs:{...S.parameters?.docs,source:{originalSource:`({
  mixedSizes,
  actions,
  decorator,
  description,
  slug,
  ...args
}, context) => {
  const [open1, setOpen1] = useState(false);
  const [open2, setOpen2] = useState(false);
  const [open3, setOpen3] = useState(false);
  const ref = useRef(undefined);
  const openButton1 = useRef(undefined);
  const openButton2 = useRef(undefined);
  const openButton3 = useRef(undefined);
  const description1 = cloneElement(description, {
    id: 'truncated-text-01'
  });
  const description2 = cloneElement(description, {
    id: 'truncated-text-02'
  });
  const description3 = cloneElement(description, {
    id: 'truncated-text-03'
  });
  const wiredActions1 = Array.prototype.map.call(actions, action => {
    if (action.label === 'Cancel') {
      const previousClick = action.onClick;
      return {
        ...action,
        onClick: evt => {
          setOpen1(false);
          previousClick(evt);
        }
      };
    }
    return action;
  });
  const wiredActions2 = Array.prototype.map.call(actions, action => {
    if (action.label === 'Cancel') {
      const previousClick = action.onClick;
      return {
        ...action,
        onClick: evt => {
          setOpen2(false);
          previousClick(evt);
        }
      };
    }
    return action;
  });
  const wiredActions3 = Array.prototype.map.call(actions, action => {
    if (action.label === 'Cancel') {
      const previousClick = action.onClick;
      return {
        ...action,
        onClick: evt => {
          setOpen3(false);
          previousClick(evt);
        }
      };
    }
    return action;
  });
  const VariableSizeTearsheet = mixedSizes ? TearsheetNarrow : Tearsheet;
  useEffect(() => {
    setTimeout(() => {
      setOpen1(context.viewMode !== 'docs');
      setOpen2(context.viewMode !== 'docs');
      setOpen3(context.viewMode !== 'docs');
    }, 0);
  }, []);
  return <>
      <style>{\`.\${pkg.prefix}--tearsheet { opacity: 0 }\`};</style>
      <div style={{
      height: '3rem'
    }} data-reserve-space="for toggle buttons" />
      <main>
        <ButtonSet style={{
        display: 'flex',
        position: 'fixed',
        top: 0,
        left: 0,
        zIndex: 10000
      }}>
          <Button onClick={() => setOpen1(!open1)} ref={openButton1}>
            Toggle&nbsp;tearsheet&nbsp;1
          </Button>
          <Button onClick={() => setOpen2(!open2)}>
            Toggle&nbsp;tearsheet&nbsp;2
          </Button>
          {!mixedSizes && <Button onClick={() => setOpen3(!open3)}>
              Toggle&nbsp;tearsheet&nbsp;3
            </Button>}
        </ButtonSet>
      </main>
      <div ref={ref}>
        <Tearsheet {...args} description={description1} actions={wiredActions1} headerActions={<ButtonSet>
              <Button kind="primary" size="sm" style={{
          width: 'initial'
        }} onClick={() => setOpen2(true)} disabled={open2} ref={openButton2}>
                Open tearsheet 2
              </Button>
            </ButtonSet>} title="Tearsheet 1" open={open1} onClose={() => setOpen1(false)} selectorPrimaryFocus="#stacked-input-1" decorator={decorator && sampleDecorator(decorator)} slug={slug && sampleDecorator(slug)} launcherButtonRef={openButton1}>
          <div className="tearsheet-stories__dummy-content-block">
            Main content 1
            <TextInput id="stacked-input-1" labelText="Enter an important value here" />
          </div>
        </Tearsheet>
        <VariableSizeTearsheet {...args} description={description2} actions={wiredActions2} headerActions={<ButtonSet>
              <Button kind="primary" size="sm" style={{
          width: 'initial'
        }} onClick={() => setOpen3(true)} disabled={open3} ref={openButton3}>
                Open tearsheet 3
              </Button>
            </ButtonSet>} title="Tearsheet 2" open={open2} onClose={() => setOpen2(false)} selectorPrimaryFocus="#stacked-input-2" decorator={decorator && sampleDecorator(decorator)} slug={slug && sampleDecorator(slug)} launcherButtonRef={openButton2}>
          <div className="tearsheet-stories__dummy-content-block">
            Main content 2
            <TextInput id="stacked-input-2" labelText="Enter an important value here" />
          </div>
        </VariableSizeTearsheet>
        {!mixedSizes && <Tearsheet {...args} description={description3} actions={wiredActions3} title="Tearsheet 3" open={open3} onClose={() => setOpen3(false)} selectorPrimaryFocus="#stacked-input-3" decorator={decorator && sampleDecorator(decorator)} slug={slug && sampleDecorator(slug)} launcherButtonRef={openButton3}>
            <div className="tearsheet-stories__dummy-content-block">
              Main content 3
              <TextInput id="stacked-input-3" labelText="Enter an important value here" />
            </div>
          </Tearsheet>}
      </div>
    </>;
}`,...S.parameters?.docs?.source}}};const Et=["tearsheet","withNavigation","withInfluencer","ReturnFocusToOpenButton","firstElementDisabled","firstElementReadOnly","fullyLoaded","stacked","stackedMixedSizes"];export{R as ReturnFocusToOpenButton,Et as __namedExportsOrder,kt as default,O as firstElementDisabled,B as firstElementReadOnly,w as fullyLoaded,A as stacked,S as stackedMixedSizes,k as tearsheet,x as withInfluencer,E as withNavigation};
