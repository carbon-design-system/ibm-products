import{e,S as G,u as k,T as D,a as B,b as R,bl as T}from"./iframe-YKw9nL_F.js";import{A as W}from"./AspectRatio-DUnuSQs4.js";import{G as v}from"./Grid-CAsrC2cP.js";import{C as L}from"./Column-CyCZvuP9.js";import{A as _,a as w}from"./index-CXIj4-f9.js";import{E as x}from"./ExpressiveCard-nkLv621K.js";import{I as N}from"./bucket-9-B4IHLx-c.js";import{b as f,A as P}from"./bucket-0-glzR4AjS.js";import"./bucket-18-DZTAQj9X.js";import"./devtools-DSZ92uOv.js";import"./props-helper-CihWmQAT.js";import"./Card-HioQ1P8I.js";import"./MenuItem-DOVlXix4.js";import"./useControllableState-KAFbqoVc.js";import"./useAttachedMenu-Di7wXaNY.js";import"./Text-CjneqIZ1.js";import"./bucket-2-CwIRUxho.js";import"./index-BF8Zf0QK.js";import"./mergeRefs-91-mP8KM.js";import"./bucket-12-DXgkfsZm.js";import"./wrapFocus-DNecG-Dg.js";import"./useOutsideClick-BuwC9cvu.js";import"./index-ed0vUSqW.js";import"./index-CPo7HSbm.js";import"./LayerContext-BQcY-NI5.js";import"./clamp--00YEiB8.js";import"./bucket-6-BAcs6e6G.js";const O="#root{inline-size:100%}.card-story .cds--aspect-ratio{display:flex;align-items:center;justify-content:center;background:var(--cds-layer-accent-01, #e0e0e0)}.c4p--card__media-left .c4p--card__media{inline-size:100%;max-inline-size:300px}",A=()=>e.createElement(G,{altGuidelinesHref:"https://pages.github.ibm.com/carbon/ibm-products/components/card/expressive-card/usage/",blocks:[{story:a},{story:u},{story:i},{story:l},{story:p},{story:g},{story:c},{story:s},{story:m},{story:d},{title:"With AI Label",description:"An AI Label is intended for any scenario where something is being generated by AI to reinforce AI transparency, accountability, and explainability at the UI level.",source:{language:"html",code:`
      <ExpressiveCard
  label="Label"
  primaryButtonText="Primary"
  decorator={<AILabel><AILabelContent>{renderedContent}</AILabelContent></AILabel>}
  title="Title">
  <p>
    expressive card body content block. description inviting the user to take action on the card.
  </p>
</ExpressiveCard>
          `}},{description:"Clickable tiles only accept a boolean value of true for the decorator property.",source:{language:"html",code:`
      <ExpressiveCard
  label="Label"
  primaryButtonText="Primary"
  onClick={() => {}}
  onKeyDown={() => {}}
  decorator={true}
  title="Title">
  <p>
    expressive card body content block. description inviting the user to take action on the card.
  </p>
</ExpressiveCard>
          `}}]});A.__docgenInfo={description:"",methods:[],displayName:"DocsPage"};const{action:E}=__STORYBOOK_MODULE_ACTIONS__,I=o=>{switch(o){case 1:return e.createElement(_,{className:"decorator-container",size:"xs"},e.createElement(w,null,e.createElement("div",null,e.createElement("p",{className:"secondary"},"AI Explained"),e.createElement("h1",null,"84%"),e.createElement("p",{className:"secondary bold"},"Confidence score"),e.createElement("p",{className:"secondary"},"This is not really Lorem Ipsum but the spell checker did not like the previous text with it's non-words which is why this unwieldy sentence, should one choose to call it that, here."),e.createElement("hr",null),e.createElement("p",{className:"secondary"},"Model type"),e.createElement("p",{className:"bold"},"Foundation model"))));case 2:return e.createElement(D,null,e.createElement(B,{label:"Additional information"},e.createElement(N,null)),e.createElement(R,null,e.createElement("p",null,"Custom content here")));default:return}},Se={title:"Components/Cards/ExpressiveCard",component:x,tags:["autodocs"],parameters:{styles:O,docs:{page:A}},argTypes:{columnSizeSm:{control:{type:"select"},options:[4,8,12,16]},columnSizeMd:{control:{type:"select"},options:[4,8,12,16]},columnSizeLg:{control:{type:"select"},options:[4,8,12,16]},mediaRatio:{control:{type:"select"},options:["16x9","9x16","2x1","1x2","4x3","3x4","1x1"]},slug:{control:{type:"select",labels:{0:"No AI slug",1:"with AI Slug"},default:0},options:[!1,!0]},decorator:{control:{type:"select",labels:{0:"No AI label",1:"with AI label",2:"With non AI Label component",3:"with hollow AI label (boolean)"},default:0},options:[0,1,2,3]}},decorators:[o=>{const S=k();return e.createElement("div",{className:`${S}--grid card-story`},o())}]},r={label:"Label",title:"Title",columnSizeSm:4,columnSizeMd:8,columnSizeLg:4,children:e.createElement("p",null,"expressive card body content block. description inviting the user to take action on the card."),primaryButtonText:"Read more"},n=o=>{const{children:S,columnSizeSm:C,columnSizeMd:b,columnSizeLg:y,decorator:t,...z}=o;return e.createElement("main",null,e.createElement(v,null,e.createElement(L,{sm:C,md:b,lg:y},e.createElement(x,{...z,decorator:t&&(t===3||I(t))},S))))},H=o=>{const{children:S,columnSizeSm:C,columnSizeMd:b,columnSizeLg:y,mediaRatio:t="1x1",decorator:z,...M}=o;return e.createElement("main",null,e.createElement(v,null,e.createElement(L,{sm:C,md:b,lg:y},e.createElement(x,{media:e.createElement(W,{ratio:t},t),decorator:z&&(z===3||I(z)),...M},S))))},a=n.bind({});a.args={...r,mediaRatio:null};const i=n.bind({});i.args={...r,title:"",mediaRatio:null};const c=n.bind({});c.args={...r,caption:"Description or long caption",label:"",mediaRatio:null};const s=H.bind({});s.args={...r};const h=n.bind({});h.args={...r,actionIcons:[{id:"1",icon:o=>e.createElement(f,{size:18,...o}),iconDescription:"Visit carbon official site",onClick:E("onClick")}],primaryButtonText:"",mediaRatio:null};const l=n.bind({});l.args={...r,actionIcons:[{id:"1",icon:o=>e.createElement(f,{size:24,...o}),iconDescription:"Visit carbon official site",link:{href:"https://carbondesignsystem.com/",target:"_blank",rel:"noreferrer noopener"}}],primaryButtonText:"",mediaRatio:null};const m=n.bind({});m.args={...r,pictogram:o=>e.createElement(T,{size:32,...o}),mediaRatio:null};const d=n.bind({});d.args={...r,secondaryButtonText:"Remove",secondaryButtonKind:"ghost",mediaRatio:null};const u=n.bind({});u.args={...r,onClick:E("on click"),onKeyDown:E("on keydown"),primaryButtonText:"",mediaRatio:null};const p=n.bind({});p.args={...r,primaryButtonHref:"#",secondaryButtonHref:"#",secondaryButtonText:"Remove",secondaryButtonKind:"ghost"};const g=n.bind({});g.args={...r,primaryButtonIcon:o=>e.createElement(P,{size:16,...o})};a.parameters={...a.parameters,docs:{...a.parameters?.docs,source:{originalSource:`opts => {
  const {
    children,
    columnSizeSm,
    columnSizeMd,
    columnSizeLg,
    decorator,
    ...args
  } = opts;
  return <main>
      <Grid>
        <Column sm={columnSizeSm} md={columnSizeMd} lg={columnSizeLg}>
          <ExpressiveCard {...args} decorator={decorator && (decorator === 3 || sampleDecorator(decorator))}>
            {children}
          </ExpressiveCard>
        </Column>
      </Grid>
    </main>;
}`,...a.parameters?.docs?.source}}};i.parameters={...i.parameters,docs:{...i.parameters?.docs,source:{originalSource:`opts => {
  const {
    children,
    columnSizeSm,
    columnSizeMd,
    columnSizeLg,
    decorator,
    ...args
  } = opts;
  return <main>
      <Grid>
        <Column sm={columnSizeSm} md={columnSizeMd} lg={columnSizeLg}>
          <ExpressiveCard {...args} decorator={decorator && (decorator === 3 || sampleDecorator(decorator))}>
            {children}
          </ExpressiveCard>
        </Column>
      </Grid>
    </main>;
}`,...i.parameters?.docs?.source}}};c.parameters={...c.parameters,docs:{...c.parameters?.docs,source:{originalSource:`opts => {
  const {
    children,
    columnSizeSm,
    columnSizeMd,
    columnSizeLg,
    decorator,
    ...args
  } = opts;
  return <main>
      <Grid>
        <Column sm={columnSizeSm} md={columnSizeMd} lg={columnSizeLg}>
          <ExpressiveCard {...args} decorator={decorator && (decorator === 3 || sampleDecorator(decorator))}>
            {children}
          </ExpressiveCard>
        </Column>
      </Grid>
    </main>;
}`,...c.parameters?.docs?.source}}};s.parameters={...s.parameters,docs:{...s.parameters?.docs,source:{originalSource:`opts => {
  const {
    children,
    columnSizeSm,
    columnSizeMd,
    columnSizeLg,
    mediaRatio = '1x1',
    decorator,
    ...args
  } = opts;
  return <main>
      <Grid>
        <Column sm={columnSizeSm} md={columnSizeMd} lg={columnSizeLg}>
          <ExpressiveCard media={<AspectRatio ratio={mediaRatio}>{mediaRatio}</AspectRatio>} decorator={decorator && (decorator === 3 || sampleDecorator(decorator))} {...args}>
            {children}
          </ExpressiveCard>
        </Column>
      </Grid>
    </main>;
}`,...s.parameters?.docs?.source}}};h.parameters={...h.parameters,docs:{...h.parameters?.docs,source:{originalSource:`opts => {
  const {
    children,
    columnSizeSm,
    columnSizeMd,
    columnSizeLg,
    decorator,
    ...args
  } = opts;
  return <main>
      <Grid>
        <Column sm={columnSizeSm} md={columnSizeMd} lg={columnSizeLg}>
          <ExpressiveCard {...args} decorator={decorator && (decorator === 3 || sampleDecorator(decorator))}>
            {children}
          </ExpressiveCard>
        </Column>
      </Grid>
    </main>;
}`,...h.parameters?.docs?.source}}};l.parameters={...l.parameters,docs:{...l.parameters?.docs,source:{originalSource:`opts => {
  const {
    children,
    columnSizeSm,
    columnSizeMd,
    columnSizeLg,
    decorator,
    ...args
  } = opts;
  return <main>
      <Grid>
        <Column sm={columnSizeSm} md={columnSizeMd} lg={columnSizeLg}>
          <ExpressiveCard {...args} decorator={decorator && (decorator === 3 || sampleDecorator(decorator))}>
            {children}
          </ExpressiveCard>
        </Column>
      </Grid>
    </main>;
}`,...l.parameters?.docs?.source}}};m.parameters={...m.parameters,docs:{...m.parameters?.docs,source:{originalSource:`opts => {
  const {
    children,
    columnSizeSm,
    columnSizeMd,
    columnSizeLg,
    decorator,
    ...args
  } = opts;
  return <main>
      <Grid>
        <Column sm={columnSizeSm} md={columnSizeMd} lg={columnSizeLg}>
          <ExpressiveCard {...args} decorator={decorator && (decorator === 3 || sampleDecorator(decorator))}>
            {children}
          </ExpressiveCard>
        </Column>
      </Grid>
    </main>;
}`,...m.parameters?.docs?.source}}};d.parameters={...d.parameters,docs:{...d.parameters?.docs,source:{originalSource:`opts => {
  const {
    children,
    columnSizeSm,
    columnSizeMd,
    columnSizeLg,
    decorator,
    ...args
  } = opts;
  return <main>
      <Grid>
        <Column sm={columnSizeSm} md={columnSizeMd} lg={columnSizeLg}>
          <ExpressiveCard {...args} decorator={decorator && (decorator === 3 || sampleDecorator(decorator))}>
            {children}
          </ExpressiveCard>
        </Column>
      </Grid>
    </main>;
}`,...d.parameters?.docs?.source}}};u.parameters={...u.parameters,docs:{...u.parameters?.docs,source:{originalSource:`opts => {
  const {
    children,
    columnSizeSm,
    columnSizeMd,
    columnSizeLg,
    decorator,
    ...args
  } = opts;
  return <main>
      <Grid>
        <Column sm={columnSizeSm} md={columnSizeMd} lg={columnSizeLg}>
          <ExpressiveCard {...args} decorator={decorator && (decorator === 3 || sampleDecorator(decorator))}>
            {children}
          </ExpressiveCard>
        </Column>
      </Grid>
    </main>;
}`,...u.parameters?.docs?.source}}};p.parameters={...p.parameters,docs:{...p.parameters?.docs,source:{originalSource:`opts => {
  const {
    children,
    columnSizeSm,
    columnSizeMd,
    columnSizeLg,
    decorator,
    ...args
  } = opts;
  return <main>
      <Grid>
        <Column sm={columnSizeSm} md={columnSizeMd} lg={columnSizeLg}>
          <ExpressiveCard {...args} decorator={decorator && (decorator === 3 || sampleDecorator(decorator))}>
            {children}
          </ExpressiveCard>
        </Column>
      </Grid>
    </main>;
}`,...p.parameters?.docs?.source}}};g.parameters={...g.parameters,docs:{...g.parameters?.docs,source:{originalSource:`opts => {
  const {
    children,
    columnSizeSm,
    columnSizeMd,
    columnSizeLg,
    decorator,
    ...args
  } = opts;
  return <main>
      <Grid>
        <Column sm={columnSizeSm} md={columnSizeMd} lg={columnSizeLg}>
          <ExpressiveCard {...args} decorator={decorator && (decorator === 3 || sampleDecorator(decorator))}>
            {children}
          </ExpressiveCard>
        </Column>
      </Grid>
    </main>;
}`,...g.parameters?.docs?.source}}};const ze=["Default","LabelOnly","WithCaption","WithMedia","WithActionIconButton","WithActionIconLink","WithPictogram","WithSecondaryAction","Clickable","WithButtonHref","WithButtonIcon"];export{u as Clickable,a as Default,i as LabelOnly,h as WithActionIconButton,l as WithActionIconLink,p as WithButtonHref,g as WithButtonIcon,c as WithCaption,s as WithMedia,m as WithPictogram,d as WithSecondaryAction,ze as __namedExportsOrder,Se as default};
