import{e as i}from"./index-DzvNrmz8.js";import{a as e}from"./index-B-lxVbXh.js";import{g as b}from"./story-helper-DPPXKxdX.js";import{S as g}from"./StoryDocsPage-DLdK_Krg.js";import{C as k}from"./Checklist-CpuSsR6h.js";import"./_commonjsHelpers-D6-XlEtG.js";import"./v4-CtRu48qb.js";import"./index-5As4T26e.js";import"./index-Cg1swjps.js";import"./index-Bv4JGo1_.js";import"./index-CzcKhd7Q.js";import"./iframe-Czcp_UX8.js";import"./index-Dytf1aFS.js";import"./index-DrFu-skq.js";import"./settings-CP9zVSjJ.js";import"./events-OVwOsPzJ.js";import"./index-P6UCShJt.js";import"./index-pOgDNIY8.js";import"./index-Cwv8QpiQ.js";import"./devtools-B_dijMH7.js";import"./clamp-CsXXRQhr.js";import"./bucket-18-D-cwffHE.js";import"./bucket-9-DBhRplFe.js";import"./uuidv4-BN2rGLQG.js";const u=".checklist-stories__viewport{max-inline-size:20rem;min-inline-size:20rem}",d=()=>i.createElement(g,{altGuidelinesHref:[{href:"https://pages.github.ibm.com/carbon/ibm-products/components/onboarding/checklist/usage/",label:"Checklist usage guidelines"}],blocks:[{story:a},{story:s}]});d.__docgenInfo={description:"",methods:[],displayName:"DocsPage"};const C="checklist-stories",T=[{title:"Section label",tasks:[{kind:"checked",label:"Task name",url:"https://www.ibm.com/",onClick:t=>{e("task")(t)}},{kind:"indeterminate",label:"Task name",onClick:t=>{e("task")(t)}},{kind:"unchecked",label:"Task name",guid:"6B29FC40-CA47-1067-B31D-00DD010662DA",onClick:t=>{e("task")(t)}}]}],j={title:"IBM Products/Onboarding/Checklist",component:k,tags:["autodocs"],argTypes:{taskLists:{table:{type:{detail:`[{
            title: string,
            tasks: [{
              kind: 'unchecked' | 'indeterminate' | 'checked' | 'disabled' | 'error',
              label: string,
              onClick: func,
            }]
          }]`}}},theme:{control:{type:null},table:{defaultValue:{summary:"light"},type:{summary:"'light' | 'dark'"}}}},parameters:{styles:u,docs:{page:d},layout:"padded"}},p=t=>{const h=b();return i.createElement("div",{className:`${C}__viewport`},i.createElement(k,{...t,theme:h}))},a=p.bind({});a.args={onClickViewAll:()=>{e("view all")()},onToggle:t=>{e(`toggle ${t?"open":"closed"}`)()},chartValue:.15,chartLabel:"15% complete",taskLists:T,title:"Checklist header",viewAllLabel:"View all (10)"};const s=p.bind({});s.storyName="Task states";s.args={taskLists:[{title:"Unchecked state",tasks:[{kind:"unchecked",label:"Task name",onClick:e("task")},{kind:"unchecked",label:"Task name"}]},{title:"Indeterminate state",tasks:[{kind:"indeterminate",label:"Task name",onClick:e("task")},{kind:"indeterminate",label:"Task name"}]},{title:"Checked state",tasks:[{kind:"checked",label:"Task name",onClick:e("task")},{kind:"checked",label:"Task name"}]},{title:"Disabled state",tasks:[{kind:"disabled",label:"Task name"},{kind:"disabled",label:"Task name",onClick:e("task")}]},{title:"Error state",tasks:[{kind:"error",label:"Task name"},{kind:"error",label:"Task name",onClick:e("task")}]}]};var r,o,l;a.parameters={...a.parameters,docs:{...(r=a.parameters)==null?void 0:r.docs,source:{originalSource:`args => {
  const theme = getSelectedCarbonTheme();
  return <div className={\`\${storyClass}__viewport\`}>
      <Checklist {...args} theme={theme} />
    </div>;
}`,...(l=(o=a.parameters)==null?void 0:o.docs)==null?void 0:l.source}}};var n,c,m;s.parameters={...s.parameters,docs:{...(n=s.parameters)==null?void 0:n.docs,source:{originalSource:`args => {
  const theme = getSelectedCarbonTheme();
  return <div className={\`\${storyClass}__viewport\`}>
      <Checklist {...args} theme={theme} />
    </div>;
}`,...(m=(c=s.parameters)==null?void 0:c.docs)==null?void 0:m.source}}};const q=["checklist","taskStates"];export{q as __namedExportsOrder,a as checklist,j as default,s as taskStates};
