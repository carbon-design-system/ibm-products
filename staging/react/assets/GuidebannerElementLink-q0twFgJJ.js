import{e,r as b,c as l,p as g,aW as H,aX as J,B as T,V as E,m as K,P as t,aL as Q}from"./iframe-arkle79Y.js";import{g as m}from"./devtools-BxzFCMfs.js";import{u as U}from"./uuidv4-BN2rGLQG.js";import{u as Y}from"./useControllableState-DfkwYN6T.js";import{C as Z}from"./Carousel-1oq7nrX-.js";import{C as ee,a as te}from"./bucket-2-BjUncjOH.js";import{e as ne}from"./bucket-9-CxWWOEUU.js";import{L as oe}from"./Link-C5Cx_auS.js";const n=`${g.prefix}--guidebanner`,I="Guidebanner",c={collapsible:!1,withLeftGutter:!1,closeIconDescription:"Close",collapseButtonLabel:"Read less",expandButtonLabel:"Read more",nextIconDescription:"Next",previousIconDescription:"Back"},C=e.forwardRef((o,a)=>{const{children:s,className:i,collapsible:r=c.collapsible,onClose:d,withLeftGutter:L=c.withLeftGutter,closeIconDescription:R=c.closeIconDescription,collapseButtonLabel:D=c.collapseButtonLabel,expandButtonLabel:B=c.expandButtonLabel,nextIconDescription:P=c.nextIconDescription,previousIconDescription:z=c.previousIconDescription,title:S,onChange:O,open:A,...W}=o,h=b.useRef(null),F=b.useRef(null),[u,V]=b.useState(0),[x,M]=b.useState(!1),[p,X]=Y(A??!1,O),j=()=>{X(!p)},y=`${U()}--carousel-content-id`;return e.createElement("div",{...W,"aria-owns":p?y:void 0,className:l(n,i,r&&`${n}__collapsible`,!p&&`${n}__collapsible-collapsed`,L&&`${n}__with-left-gutter`),ref:a,...m(I)},e.createElement(ne,{size:20,className:`${n}__icon-idea`}),e.createElement("div",{className:`${n}__title`},S),e.createElement(Z,{id:y,className:`${n}__carousel`,fadedEdgeColor:{left:J,right:H},ref:h,onChangeIsScrollable:N=>{M(N)},onScroll:N=>{V(N)},isScrollMode:!0},s),e.createElement("div",{className:l([r||x?`${n}__navigation`:null])},r&&e.createElement(T,{kind:"ghost",size:"md",className:`${n}__toggle-button`,onClick:j,ref:F,"aria-controls":p?void 0:y,"aria-expanded":!p},p?B:D),x&&e.createElement(e.Fragment,null,e.createElement("span",{className:l(`${n}__back-button`,[u===0?`${n}__back-button--disabled`:null])},e.createElement(E,{align:"top",disabled:u===0,kind:"ghost",label:z,onClick:()=>{h.current.scrollPrev()},size:"md"},e.createElement(ee,{size:16}))),e.createElement("span",{className:l(`${n}__next-button`,[u===1?`${n}__next-button--disabled`:null])},e.createElement(E,{align:"top-right",disabled:u===1,kind:"ghost",label:P,onClick:()=>{h.current.scrollNext()},size:"md"},e.createElement(te,{size:16}))))),d&&e.createElement("span",{className:`${n}__close-button`},e.createElement(E,{align:"bottom-end",kind:"ghost",label:R,onClick:d,size:"md"},e.createElement(K,{size:16}))))});C.displayName=I;C.propTypes={children:t.node,className:t.string,closeIconDescription:t.string,collapseButtonLabel:t.string,collapsible:t.bool,expandButtonLabel:t.string,nextIconDescription:t.string,onChange:t.func,onClose:t.func,open:t.bool,previousIconDescription:t.string,title:t.string.isRequired,withLeftGutter:t.bool};C.__docgenInfo={description:`The guide banner sits at the top of a page, or page-level tab,
to introduce foundational concepts related to the page's content.`,methods:[],displayName:"Guidebanner",props:{children:{required:!1,tsType:{name:"ReactNode"},description:`Provide the contents of the Guidebanner.
One or more GuidebannerElement components are required.`,type:{name:"node"}},className:{required:!1,tsType:{name:"string"},description:"Provide an optional class to be applied to the containing node.",type:{name:"string"}},closeIconDescription:{required:!1,tsType:{name:"string"},description:"Tooltip text and aria label for the Close button icon.",type:{name:"string"}},collapseButtonLabel:{required:!1,tsType:{name:"string"},description:"Text label for the Collapse button.",type:{name:"string"}},collapsible:{required:!1,tsType:{name:"boolean"},description:`When true, the Guidebanner will initialize in a collapsed state,
showing the title and the Expand button.

When expanded, it will show the GuidebannerElement child components and the Collapse button.`,type:{name:"bool"}},expandButtonLabel:{required:!1,tsType:{name:"string"},description:"Text label for the Expand button.",type:{name:"string"}},nextIconDescription:{required:!1,tsType:{name:"string"},description:"Tooltip text and aria label for the Next button icon.",type:{name:"string"}},onClose:{required:!1,tsType:{name:"signature",type:"function",raw:"() => void",signature:{arguments:[],return:{name:"void"}}},description:`If defined, a Close button will render in the top-right corner and a
callback function will be triggered when button is clicked.`,type:{name:"func"}},previousIconDescription:{required:!1,tsType:{name:"string"},description:"Tooltip text and aria label for the Back button icon.",type:{name:"string"}},title:{required:!0,tsType:{name:"string"},description:"Title text.",type:{name:"string"}},withLeftGutter:{required:!1,tsType:{name:"boolean"},description:`If true, insert 1 rem of "space" on the left of the component.
This will allow the component's content to line up with other
content on the page under special circumstances.`,type:{name:"bool"}},onChange:{required:!1,tsType:{name:"signature",type:"function",raw:"(value: boolean) => void",signature:{arguments:[{type:{name:"boolean"},name:"value"}],return:{name:"void"}}},description:"A handler for managing the controlled state of open prop. If not passed the open prop will not be honored and an uncontrolled state will be used.",type:{name:"func"}},open:{required:!1,tsType:{name:"boolean"},description:"For controlled usage of the tile open state. This prop only works when an onChange prop is also passed, otherwise an uncontrolled state is used.",type:{name:"bool"}}}};const f=`${g.prefix}--guidebanner__element`,G="GuidebannerElement",k=e.forwardRef(({button:o,className:a,description:s,title:i,...r},d)=>e.createElement("div",{...r,className:l(f,a),ref:d,...m(G)},i&&e.createElement("h2",{className:`${f}-title`},i),s&&e.createElement("p",{className:`${f}-content`},s),o&&e.createElement("div",{className:`${f}-buttons`},o)));k.displayName=G;k.propTypes={button:t.node,className:t.string,description:t.oneOfType([t.string,t.node]).isRequired,title:t.string};k.__docgenInfo={description:`The GuidebannerElement is a required child component of the Guidebanner,
and acts as a container for a CarouselItem.`,methods:[],displayName:"GuidebannerElement",props:{button:{required:!1,tsType:{name:"ReactNode"},description:`An optional button can be rendered below the description.
This can be a link, button, Coachmark button, etc.`,type:{name:"node"}},className:{required:!1,tsType:{name:"string"},description:"Provide an optional class to be applied to the containing node.",type:{name:"string"}},description:{required:!0,tsType:{name:"ReactNode"},description:"The description of the element.",type:{name:"union",value:[{name:"string"},{name:"node"}]}},title:{required:!1,tsType:{name:"string"},description:"The title of the element.",type:{name:"string"}}}};const q=`${g.prefix}--guidebanner__element-button`,_="GuidebannerElementButton",ae={iconDescription:"Crossroads"},v=e.forwardRef(({children:o,className:a,iconDescription:s=ae.iconDescription,type:i,...r},d)=>i==="primary"?e.createElement(T,{...r,className:l(q,a),iconDescription:s,kind:"tertiary",ref:d,renderIcon:()=>e.createElement(Q,{size:16}),role:"button",size:"md",...m(_)},o):e.createElement(T,{...r,className:l(q,a),kind:"ghost",role:"button",size:"md",...m(_)},o));v.displayName=_;v.propTypes={children:t.node.isRequired,className:t.string,type:t.string};v.__docgenInfo={description:"One of two buttons styled specifically for the GuidebannerElement.",methods:[],displayName:"GuidebannerElementButton",props:{children:{required:!0,tsType:{name:"ReactNode"},description:"Provide the contents of the GuidebannerElementLink.",type:{name:"node"}},className:{required:!1,tsType:{name:"string"},description:"Provide an optional class to be applied to the containing node.",type:{name:"string"}},iconDescription:{required:!1,tsType:{name:"string"},description:"Provide a description for the icon.",defaultValue:{value:"'Crossroads'",computed:!1}},type:{required:!1,tsType:{name:"string"},description:`If type is "primary", then return a tertiary button with the "crossroads" icon,
else return a ghost button.`,type:{name:"string"}}}};const se=`${g.prefix}--guidebanner__element-link`,$="GuidebannerElementLink",w=e.forwardRef(({children:o,className:a,...s},i)=>e.createElement(oe,{...s,className:l(se,a),kind:"ghost",ref:i,role:"link",size:"md",...m($)},o));w.displayName=$;w.propTypes={children:t.node.isRequired,className:t.string};w.__docgenInfo={description:"A link styled specifically for the GuidebannerElement.",methods:[],displayName:"GuidebannerElementLink",props:{children:{required:!0,tsType:{name:"ReactNode"},description:"Provide the contents of the GuidebannerElementLink.",type:{name:"node"}},className:{required:!1,tsType:{name:"string"},description:"Provide an optional class to be applied to the containing node.",type:{name:"string"}}}};export{C as G,k as a,v as b,w as c};
