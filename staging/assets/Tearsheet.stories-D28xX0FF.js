import{e,r as n}from"./index-DzvNrmz8.js";import{S as Re}from"./StoryDocsPage-CMDuggIe.js";import{a as T}from"./index-B-lxVbXh.js";import{B as g,p as P}from"./settings-DbzZchXt.js";import"./index-5As4T26e.js";import{B as L}from"./ButtonSet-B2onNqwp.js";import{D as Fe}from"./Dropdown-DocP4HuW.js";import{F as V}from"./Form-EzleJG-j.js";import{F as H}from"./FormGroup-DglN6MVK.js";import{T as Pe,a as Me,b as _,c as De,d as z}from"./Tabs-B9gtXLGi.js";import{T as Ne,a as _e,b as ze,A as Le,c as $e}from"./index-Cwsl1zwy.js";import{S as Te,H as Ce}from"./index-pOgDNIY8.js";import{T as y}from"./TextInput-eyoE_C-N.js";import{T as b,d as Ge}from"./Tearsheet-FQJek8uf.js";import{a as Ve,b as He,c as We,s as Ke}from"./_storybook-styles-XzCpCSKO.js";import{g as Ue}from"./props-helper-BZh4EldX.js";import{T as je}from"./TearsheetNarrow-CAfaHRdw.js";import{e as qe}from"./bucket-9-DBhRplFe.js";import"./_commonjsHelpers-D6-XlEtG.js";import"./index-B_2-5AJB.js";import"./iframe-DJDim8wj.js";import"./index-Cg1swjps.js";import"./index-Bv4JGo1_.js";import"./index-Dytf1aFS.js";import"./index-DrFu-skq.js";import"./story-helper-DPPXKxdX.js";import"./v4-CtRu48qb.js";import"./events-OVwOsPzJ.js";import"./index-P6UCShJt.js";import"./index-CpKToLap.js";import"./inheritsLoose-D3Az7yH5.js";import"./FormContext-TkVWILkp.js";import"./mergeRefs-CTUecegF.js";import"./bucket-18-D-cwffHE.js";import"./index-BHMIdRzp.js";import"./Grid-BZY738Do.js";import"./FlexGrid-SGz1UDZT.js";import"./ComposedModal-DuX0rG4s.js";import"./index-B9LAK09p.js";import"./LayerContext-DfrloTEd.js";import"./InlineLoading-pF8In0wu.js";import"./bucket-6-BVxmYIXv.js";import"./requiredIfGivenPropIsTruthy-CU7JwK8h.js";import"./wrapFocus-DPmHpWJH.js";import"./useControllableState--uiA2kjV.js";import"./useNoInteractiveChildren-Dx0RzjJ8.js";import"./useMatchMedia-T2GVo85G.js";import"./Text-DyBNjUAs.js";import"./bucket-17-F0QcB3Pi.js";import"./useNormalizedInputProps-BTIESqM4.js";import"./useAnnouncer-Dwt0jqXi.js";import"./TearsheetShell-BKIzCle8.js";import"./useResizeObserver-Cp7HDrpC.js";import"./getNodeTextContent-C8IeKkUQ.js";import"./DefinitionTooltip-DKyN1THq.js";import"./usePortalTarget-BRFg5-2X.js";import"./feature-flags-Cd4xSQCq.js";import"./index-BXVusgOK.js";import"./useFocus-CrEADr-4.js";import"./usePreviousValue-DGkdsrtI.js";import"./useIsomorphicEffect-l5L8NYko.js";import"./ActionSet-CYm8Ussl.js";import"./devtools-CskDVa8y.js";const ve=()=>e.createElement(Re,{blocks:[{story:E},{story:x},{story:O},{story:F},{story:B},{story:w},{story:A},{story:S},{story:I},{title:"With AI Label",description:"An AI Label is intended for any scenario where something is being generated by AI to reinforce AI transparency, accountability, and explainability at the UI level. A Carbon AI Label can be provided to the Tearsheet component by including an `decorator` property on it and providing the carbon AILabel component as its own custom component.<br/> The `decorator` is versatile and can also be used to render other components.",source:{language:"html",code:`
<Tearsheet
  {...args}
  decorator={
    // carbon AILabel component
    <AILabel
      className="ai-label-container"
      autoAlign={false}
      align="bottom-right"
    >
      <AILabelContent>... ...</AILabelContent>
    </AILabel>
  }
>
  ...
</Tearsheet>
          `}}]});ve.__docgenInfo={description:"",methods:[],displayName:"DocsPage"};const ln={title:"IBM Products/Components/Tearsheet",component:b,tags:["autodocs"],parameters:{styles:Ke,layout:"fullscreen",docs:{page:ve}},argTypes:{...Ue(Ge),actions:{control:{type:"select",labels:We},options:He,mapping:Ve({primary:"Replace",danger:"Delete",secondary:"Back",secondary2:"Keep Both",dangerGhost:"Abort",ghost:"Cancel"},T)},description:{control:{type:"text"}},headerActions:{control:{type:"select",labels:{0:"none",1:"drop-down",2:"buttons"}},options:[0,1,2],mapping:{0:null,1:e.createElement(Fe,{id:"tss-had",label:"Choose an option",titleText:"Choose an option",items:["option 1","option 2","option 3","option 4"]}),2:e.createElement(L,null,e.createElement(g,{kind:"secondary",size:"sm",style:{width:"initial"}},"Secondary"),e.createElement(g,{kind:"primary",size:"sm",style:{width:"initial"}},"Primary"))}},label:{control:{type:"text"}},title:{control:{type:"text"}},influencer:{control:{disable:!0}},onClose:{control:{disable:!0}},navigation:{control:{disable:!0}},open:{control:{disable:!0}},portalTarget:{control:{disable:!0}},decorator:{control:{type:"select",labels:{0:"No AI Label",1:"with AI Label",2:"With non AI Label component"},default:0},description:"Optional prop that allows you to pass any component.",options:[0,1,2]},slug:{control:{type:"select",labels:{0:"No AI Slug",1:"with AI Slug"},default:0},description:'Deprecated: Property replaced by "decorator"',options:[0,1]}}},C="Close the tearsheet",v="This is a description for the tearsheet, providing an opportunity to   describe the flow over a couple of lines in the header of the tearsheet.",$=e.createElement(Te,{className:"tearsheet-stories__dummy-content-block"},e.createElement(Ce,null,"Influencer heading"),e.createElement("p",null,"Influencer content")),G="The label of the tearsheet",ke=e.createElement(Te,{className:"tearsheet-stories__dummy-content-block"},e.createElement(Ce,null,"Main content heading"),e.createElement(V,null,e.createElement("p",null,"Main content"),e.createElement(H,{legendId:"tearsheet-form-group",legendText:"FormGroup Legend"},e.createElement(y,{id:"tss-ft1",labelText:"Enter an important value here",style:{marginBottom:"1em"}}),e.createElement(y,{id:"tss-ft2",labelText:"Here is an entry field:",style:{marginBottom:"1em"}})))),R="Title of the tearsheet",u=r=>{switch(r){case 1:return e.createElement(Le,{className:"decorator-container",size:"xs"},e.createElement($e,null,e.createElement("div",null,e.createElement("p",{className:"secondary"},"AI Explained"),e.createElement("h1",null,"84%"),e.createElement("p",{className:"secondary bold"},"Confidence score"),e.createElement("p",{className:"secondary"},"This is not really Lorem Ipsum but the spell checker did not like the previous text with it's non-words which is why this unwieldy sentence, should one choose to call it that, here."),e.createElement("hr",null),e.createElement("p",{className:"secondary"},"Model type"),e.createElement("p",{className:"bold"},"Foundation model"))));case 2:return e.createElement(Ne,null,e.createElement(_e,{label:"Additional information"},e.createElement(qe,null)),e.createElement(ze,null,e.createElement("p",null,"Custom content here")));default:return}},Ee=({actions:r,decorator:l,slug:a,...c},m)=>{const[f,t]=n.useState(!1);n.useEffect(()=>{setTimeout(()=>t(m.viewMode!=="docs"),0)},[]);const i=r&&Array.prototype.map.call(r,o=>{if(o.label==="Cancel"){const p=o.onClick;return{...o,onClick:s=>{t(!1),p(s)}}}return o}),h=n.useRef(void 0);return e.createElement(e.Fragment,null,e.createElement("style",null,`.${P.prefix}--tearsheet { opacity: 0 }`,";"),e.createElement(g,{onClick:()=>t(!0)},"Open Tearsheet"),e.createElement("div",{ref:h},e.createElement(b,{...c,actions:i,open:f,onClose:()=>t(!1),decorator:l&&u(l),slug:a&&u(a)},ke)))},xe=e.createElement("div",{className:"tearsheet-stories__tabs"},e.createElement(De,{"aria-label":"Tab list"},e.createElement(z,null,"Tab 1"),e.createElement(z,null,"Tab 2"),e.createElement(z,null,"Tab 3"),e.createElement(z,null,"Tab 4"))),Oe=({actions:r,decorator:l,slug:a,...c},m)=>{const[f,t]=n.useState(!1);n.useEffect(()=>{setTimeout(()=>t(m.viewMode!=="docs"),0)},[]);const i=r&&Array.prototype.map.call(r,o=>{if(o.label==="Cancel"){const p=o.onClick;return{...o,onClick:s=>{t(!1),p(s)}}}return o}),h=n.useRef(void 0);return e.createElement(e.Fragment,null,e.createElement("style",null,`.${P.prefix}--tearsheet { opacity: 0 }`,";"),e.createElement(g,{onClick:()=>t(!0)},"Open Tearsheet"),e.createElement("div",{ref:h},e.createElement(Pe,{onChange:T("Tab selection changed")},e.createElement(b,{...c,actions:i,open:f,onClose:()=>t(!1),decorator:l&&u(l),slug:a&&u(a)},e.createElement(Me,null,e.createElement(_,null,"Tab 1"),e.createElement(_,null,"Tab 2"),e.createElement(_,null,"Tab 3"),e.createElement(_,null,"Tab 4"))))))},Je=({actions:r,decorator:l,slug:a,...c},m)=>{const[f,t]=n.useState(!1),i=n.useRef(void 0),h=r&&Array.prototype.map.call(r,p=>{if(p.label==="Cancel"){const s=p.onClick;return{...p,onClick:k=>{t(!1),s(k)}}}return p}),o=n.useRef(void 0);return n.useEffect(()=>{setTimeout(()=>t(m.viewMode!=="docs"),0)},[]),e.createElement(e.Fragment,null,e.createElement("style",null,`.${P.prefix}--tearsheet { opacity: 0 }`,";"),e.createElement(g,{ref:i,onClick:()=>t(!0)},"Open Tearsheet"),e.createElement("div",{ref:o},e.createElement(b,{...c,actions:h,open:f,onClose:()=>t(!1),decorator:l&&u(l),slug:a&&u(a),launcherButtonRef:i},ke)))},Qe=({actions:r,decorator:l,slug:a,...c},m)=>{const[f,t]=n.useState(!1),[i,h]=n.useState(""),o=r&&Array.prototype.map.call(r,s=>{if(s.label==="Cancel"){const k=s.onClick;return{...s,onClick:N=>{t(!1),k(N)}}}return s}),p=n.useRef(void 0);return n.useEffect(()=>{setTimeout(()=>t(m.viewMode!=="docs"),0)},[]),e.createElement(e.Fragment,null,e.createElement("style",null,`.${P.prefix}--tearsheet { opacity: 0 }`,";"),e.createElement(g,{onClick:()=>t(!0)},"Open Tearsheet"),e.createElement("div",{ref:p},e.createElement(b,{...c,actions:o,open:f,onClose:()=>t(!1),decorator:l&&u(l),slug:a&&u(a)},e.createElement("div",{className:"tearsheet-stories__dummy-content-block"},e.createElement(V,null,e.createElement("p",null,"Main content"),e.createElement(H,{legendId:"tearsheet-form-group",legendText:"FormGroup Legend"},e.createElement(y,{id:"tss-ft1",labelText:"Enter an important value here",style:{marginBottom:"1em"},disabled:!(i!=null&&i.length)>0}),e.createElement(y,{id:"tss-ft2",labelText:"Here is an entry field:",style:{marginBottom:"1em"},onChange:s=>{var k;return h((k=s==null?void 0:s.target)==null?void 0:k.value)}})))))))},Xe=({actions:r,decorator:l,slug:a,...c},m)=>{const[f,t]=n.useState(!1),i=r&&Array.prototype.map.call(r,o=>{if(o.label==="Cancel"){const p=o.onClick;return{...o,onClick:s=>{t(!1),p(s)}}}return o}),h=n.useRef(void 0);return n.useEffect(()=>{setTimeout(()=>t(m.viewMode!=="docs"),0)},[]),e.createElement(e.Fragment,null,e.createElement("style",null,`.${P.prefix}--tearsheet { opacity: 0 }`,";"),e.createElement(g,{onClick:()=>t(!0)},"Open Tearsheet"),e.createElement("div",{ref:h},e.createElement(b,{...c,actions:i,open:f,onClose:()=>t(!1),decorator:l&&u(l),slug:a&&u(a)},e.createElement("div",{className:"tearsheet-stories__dummy-content-block"},e.createElement(V,null,e.createElement("p",null,"Main content"),e.createElement(H,{legendId:"tearsheet-form-group",legendText:"FormGroup Legend"},e.createElement(y,{id:"tss-ft1",labelText:"This field's value is 'read only':",readOnly:!0,style:{marginBottom:"1em"},value:"Value"}),e.createElement(y,{id:"tss-ft2",labelText:"Here is an entry field:",style:{marginBottom:"1em"}})))))))},Be=({mixedSizes:r,actions:l,decorator:a,slug:c,...m},f)=>{const[t,i]=n.useState(!1),[h,o]=n.useState(!1),[p,s]=n.useState(!1),k=n.useRef(void 0),N=n.useRef(),W=n.useRef(),K=n.useRef(),we=Array.prototype.map.call(l,d=>{if(d.label==="Cancel"){const M=d.onClick;return{...d,onClick:D=>{i(!1),M(D)}}}return d}),Ae=Array.prototype.map.call(l,d=>{if(d.label==="Cancel"){const M=d.onClick;return{...d,onClick:D=>{o(!1),M(D)}}}return d}),Se=Array.prototype.map.call(l,d=>{if(d.label==="Cancel"){const M=d.onClick;return{...d,onClick:D=>{s(!1),M(D)}}}return d}),Ie=r?je:b;return n.useEffect(()=>{setTimeout(()=>{i(f.viewMode!=="docs"),o(f.viewMode!=="docs"),s(f.viewMode!=="docs")},0)},[]),e.createElement(e.Fragment,null,e.createElement("style",null,`.${P.prefix}--tearsheet { opacity: 0 }`,";"),e.createElement("div",{style:{height:"3rem"},"data-reserve-space":"for toggle buttons"}),e.createElement(L,{style:{display:"flex",position:"fixed",top:0,left:0,zIndex:1e4}},e.createElement(g,{onClick:()=>i(!t),ref:N},"Toggle tearsheet 1"),e.createElement(g,{onClick:()=>o(!h)},"Toggle tearsheet 2"),!r&&e.createElement(g,{onClick:()=>s(!p)},"Toggle tearsheet 3")),e.createElement("div",{ref:k},e.createElement(b,{...m,actions:we,headerActions:e.createElement(L,null,e.createElement(g,{kind:"primary",size:"sm",style:{width:"initial"},onClick:()=>o(!0),disabled:h,ref:W},"Open tearsheet 2")),title:"Tearsheet 1",open:t,onClose:()=>i(!1),selectorPrimaryFocus:"#stacked-input-1",decorator:a&&u(a),slug:c&&u(c),launcherButtonRef:N},e.createElement("div",{className:"tearsheet-stories__dummy-content-block"},"Main content 1",e.createElement(y,{id:"stacked-input-1",labelText:"Enter an important value here"}))),e.createElement(Ie,{...m,actions:Ae,headerActions:e.createElement(L,null,e.createElement(g,{kind:"primary",size:"sm",style:{width:"initial"},onClick:()=>s(!0),disabled:p,ref:K},"Open tearsheet 3")),title:"Tearsheet 2",open:h,onClose:()=>o(!1),selectorPrimaryFocus:"#stacked-input-2",decorator:a&&u(a),slug:c&&u(c),launcherButtonRef:W},e.createElement("div",{className:"tearsheet-stories__dummy-content-block"},"Main content 2",e.createElement(y,{id:"stacked-input-2",labelText:"Enter an important value here"}))),!r&&e.createElement(b,{...m,actions:Se,title:"Tearsheet 3",open:p,onClose:()=>s(!1),selectorPrimaryFocus:"#stacked-input-3",decorator:a&&u(a),slug:c&&u(c),launcherButtonRef:K},e.createElement("div",{className:"tearsheet-stories__dummy-content-block"},"Main content 3",e.createElement(y,{id:"stacked-input-3",labelText:"Enter an important value here"})))))},E=Ee.bind({});E.storyName="Tearsheet";E.args={closeIconDescription:C,description:v,onClose:T("onClose called"),title:R,actions:7,selectorPrimaryFocus:"#tss-ft1"};const x=Oe.bind({});x.storyName="Tearsheet with navigation";x.args={closeIconDescription:C,description:v,label:G,navigation:xe,onClose:T("onClose called"),title:R,actions:7};const O=Ee.bind({});O.storyName="Tearsheet with influencer";O.args={closeIconDescription:C,description:v,influencer:$,influencerPosition:"left",influencerWidth:"narrow",onClose:T("onClose called"),title:R,actions:7};const F=Je.bind({});F.args={closeIconDescription:C,description:v,onClose:T("onClose called"),title:R,actions:7};const B=Qe.bind({});B.storyName="First Element Disabled";B.args={closeIconDescription:C,hasCloseIcon:!0,description:v,onClose:T("onClose called"),title:R,actions:7,selectorPrimaryFocus:"#tss-ft1"};const w=Xe.bind({});w.storyName="First Element ReadOnly";w.args={closeIconDescription:C,hasCloseIcon:!0,description:v,onClose:T("onClose called"),title:R,actions:7,selectorPrimaryFocus:"#tss-ft1"};const A=Oe.bind({});A.storyName="Tearsheet with all header items and influencer";A.args={closeIconDescription:C,description:v,hasCloseIcon:!0,headerActions:2,influencer:$,influencerPosition:"left",influencerWidth:"narrow",label:G,navigation:xe,onClose:T("onClose called"),title:R,actions:0,decorator:1,slug:0};const S=Be.bind({});S.storyName="Stacking tearsheets";S.args={closeIconDescription:C,description:v,height:"lower",influencer:$,label:G,actions:7};const I=Be.bind({});I.storyName="Stacking tearsheets, different sizes";I.args={mixedSizes:!0,closeIconDescription:C,description:v,height:"lower",influencer:$,label:G,actions:7};var U,j,q;E.parameters={...E.parameters,docs:{...(U=E.parameters)==null?void 0:U.docs,source:{originalSource:`({
  actions,
  decorator,
  slug,
  ...args
}, context) => {
  const [open, setOpen] = useState(false);
  useEffect(() => {
    setTimeout(() => setOpen(context.viewMode !== 'docs'), 0);
  }, []);
  const wiredActions = actions && Array.prototype.map.call(actions, action => {
    if (action.label === 'Cancel') {
      const previousClick = action.onClick;
      return {
        ...action,
        onClick: evt => {
          setOpen(false);
          previousClick(evt);
        }
      };
    }
    return action;
  });
  const ref = useRef(undefined);
  return <>
      <style>{\`.\${pkg.prefix}--tearsheet { opacity: 0 }\`};</style>
      <Button onClick={() => setOpen(true)}>Open Tearsheet</Button>
      <div ref={ref}>
        <Tearsheet {...args} actions={wiredActions} open={open} onClose={() => setOpen(false)} decorator={decorator && sampleDecorator(decorator)} slug={slug && sampleDecorator(slug)}>
          {mainContent}
        </Tearsheet>
      </div>
    </>;
}`,...(q=(j=E.parameters)==null?void 0:j.docs)==null?void 0:q.source}}};var J,Q,X;x.parameters={...x.parameters,docs:{...(J=x.parameters)==null?void 0:J.docs,source:{originalSource:`({
  actions,
  decorator,
  slug,
  ...args
}, context) => {
  const [open, setOpen] = useState(false);
  useEffect(() => {
    setTimeout(() => setOpen(context.viewMode !== 'docs'), 0);
  }, []);
  const wiredActions = actions && Array.prototype.map.call(actions, action => {
    if (action.label === 'Cancel') {
      const previousClick = action.onClick;
      return {
        ...action,
        onClick: evt => {
          setOpen(false);
          previousClick(evt);
        }
      };
    }
    return action;
  });
  const ref = useRef(undefined);
  return <>
      <style>{\`.\${pkg.prefix}--tearsheet { opacity: 0 }\`};</style>
      <Button onClick={() => setOpen(true)}>Open Tearsheet</Button>
      <div ref={ref}>
        <Tabs onChange={action('Tab selection changed')}>
          <Tearsheet {...args} actions={wiredActions} open={open} onClose={() => setOpen(false)} decorator={decorator && sampleDecorator(decorator)} slug={slug && sampleDecorator(slug)}>
            <TabPanels>
              <TabPanel>Tab 1</TabPanel>
              <TabPanel>Tab 2</TabPanel>
              <TabPanel>Tab 3</TabPanel>
              <TabPanel>Tab 4</TabPanel>
            </TabPanels>
          </Tearsheet>
        </Tabs>
      </div>
    </>;
}`,...(X=(Q=x.parameters)==null?void 0:Q.docs)==null?void 0:X.source}}};var Y,Z,ee;O.parameters={...O.parameters,docs:{...(Y=O.parameters)==null?void 0:Y.docs,source:{originalSource:`({
  actions,
  decorator,
  slug,
  ...args
}, context) => {
  const [open, setOpen] = useState(false);
  useEffect(() => {
    setTimeout(() => setOpen(context.viewMode !== 'docs'), 0);
  }, []);
  const wiredActions = actions && Array.prototype.map.call(actions, action => {
    if (action.label === 'Cancel') {
      const previousClick = action.onClick;
      return {
        ...action,
        onClick: evt => {
          setOpen(false);
          previousClick(evt);
        }
      };
    }
    return action;
  });
  const ref = useRef(undefined);
  return <>
      <style>{\`.\${pkg.prefix}--tearsheet { opacity: 0 }\`};</style>
      <Button onClick={() => setOpen(true)}>Open Tearsheet</Button>
      <div ref={ref}>
        <Tearsheet {...args} actions={wiredActions} open={open} onClose={() => setOpen(false)} decorator={decorator && sampleDecorator(decorator)} slug={slug && sampleDecorator(slug)}>
          {mainContent}
        </Tearsheet>
      </div>
    </>;
}`,...(ee=(Z=O.parameters)==null?void 0:Z.docs)==null?void 0:ee.source}}};var te,ne,oe;F.parameters={...F.parameters,docs:{...(te=F.parameters)==null?void 0:te.docs,source:{originalSource:`({
  actions,
  decorator,
  slug,
  ...args
}, context) => {
  const [open, setOpen] = useState(false);
  const buttonRef = useRef(undefined);
  const wiredActions = actions && Array.prototype.map.call(actions, action => {
    if (action.label === 'Cancel') {
      const previousClick = action.onClick;
      return {
        ...action,
        onClick: evt => {
          setOpen(false);
          previousClick(evt);
        }
      };
    }
    return action;
  });
  const ref = useRef(undefined);
  useEffect(() => {
    setTimeout(() => setOpen(context.viewMode !== 'docs'), 0);
  }, []);
  return <>
      <style>{\`.\${pkg.prefix}--tearsheet { opacity: 0 }\`};</style>
      <Button ref={buttonRef} onClick={() => setOpen(true)}>
        Open Tearsheet
      </Button>
      <div ref={ref}>
        <Tearsheet {...args} actions={wiredActions} open={open} onClose={() => setOpen(false)} decorator={decorator && sampleDecorator(decorator)} slug={slug && sampleDecorator(slug)} launcherButtonRef={buttonRef}>
          {mainContent}
        </Tearsheet>
      </div>
    </>;
}`,...(oe=(ne=F.parameters)==null?void 0:ne.docs)==null?void 0:oe.source}}};var se,ae,re;B.parameters={...B.parameters,docs:{...(se=B.parameters)==null?void 0:se.docs,source:{originalSource:`({
  actions,
  decorator,
  slug,
  ...args
}, context) => {
  const [open, setOpen] = useState(false);
  const [text, setText] = useState('');
  const wiredActions = actions && Array.prototype.map.call(actions, action => {
    if (action.label === 'Cancel') {
      const previousClick = action.onClick;
      return {
        ...action,
        onClick: evt => {
          setOpen(false);
          previousClick(evt);
        }
      };
    }
    return action;
  });
  const ref = useRef(undefined);
  useEffect(() => {
    setTimeout(() => setOpen(context.viewMode !== 'docs'), 0);
  }, []);
  return <>
      <style>{\`.\${pkg.prefix}--tearsheet { opacity: 0 }\`};</style>
      <Button onClick={() => setOpen(true)}>Open Tearsheet</Button>
      <div ref={ref}>
        <Tearsheet {...args} actions={wiredActions} open={open} onClose={() => setOpen(false)} decorator={decorator && sampleDecorator(decorator)} slug={slug && sampleDecorator(slug)}>
          <div className="tearsheet-stories__dummy-content-block">
            <Form>
              <p>Main content</p>
              <FormGroup legendId="tearsheet-form-group" legendText="FormGroup Legend">
                <TextInput id="tss-ft1" labelText="Enter an important value here" style={
              // stylelint-disable-next-line carbon/layout-use
              {
                marginBottom: '1em'
              }} disabled={!text?.length > 0} />
                <TextInput id="tss-ft2" labelText="Here is an entry field:" style={
              // stylelint-disable-next-line carbon/layout-use
              {
                marginBottom: '1em'
              }} onChange={ev => setText(ev?.target?.value)} />
              </FormGroup>
            </Form>
          </div>
        </Tearsheet>
      </div>
    </>;
}`,...(re=(ae=B.parameters)==null?void 0:ae.docs)==null?void 0:re.source}}};var le,ie,ce;w.parameters={...w.parameters,docs:{...(le=w.parameters)==null?void 0:le.docs,source:{originalSource:`({
  actions,
  decorator,
  slug,
  ...args
}, context) => {
  const [open, setOpen] = useState(false);
  const wiredActions = actions && Array.prototype.map.call(actions, action => {
    if (action.label === 'Cancel') {
      const previousClick = action.onClick;
      return {
        ...action,
        onClick: evt => {
          setOpen(false);
          previousClick(evt);
        }
      };
    }
    return action;
  });
  const ref = useRef(undefined);
  useEffect(() => {
    setTimeout(() => setOpen(context.viewMode !== 'docs'), 0);
  }, []);
  return <>
      <style>{\`.\${pkg.prefix}--tearsheet { opacity: 0 }\`};</style>
      <Button onClick={() => setOpen(true)}>Open Tearsheet</Button>
      <div ref={ref}>
        <Tearsheet {...args} actions={wiredActions} open={open} onClose={() => setOpen(false)} decorator={decorator && sampleDecorator(decorator)} slug={slug && sampleDecorator(slug)}>
          <div className="tearsheet-stories__dummy-content-block">
            <Form>
              <p>Main content</p>
              <FormGroup legendId="tearsheet-form-group" legendText="FormGroup Legend">
                <TextInput id="tss-ft1" labelText="This field's value is 'read only':" readOnly={true} style={
              // stylelint-disable-next-line carbon/layout-use
              {
                marginBottom: '1em'
              }} value="Value" />
                <TextInput id="tss-ft2" labelText="Here is an entry field:" style={
              // stylelint-disable-next-line carbon/layout-use
              {
                marginBottom: '1em'
              }} />
              </FormGroup>
            </Form>
          </div>
        </Tearsheet>
      </div>
    </>;
}`,...(ce=(ie=w.parameters)==null?void 0:ie.docs)==null?void 0:ce.source}}};var pe,ue,de;A.parameters={...A.parameters,docs:{...(pe=A.parameters)==null?void 0:pe.docs,source:{originalSource:`({
  actions,
  decorator,
  slug,
  ...args
}, context) => {
  const [open, setOpen] = useState(false);
  useEffect(() => {
    setTimeout(() => setOpen(context.viewMode !== 'docs'), 0);
  }, []);
  const wiredActions = actions && Array.prototype.map.call(actions, action => {
    if (action.label === 'Cancel') {
      const previousClick = action.onClick;
      return {
        ...action,
        onClick: evt => {
          setOpen(false);
          previousClick(evt);
        }
      };
    }
    return action;
  });
  const ref = useRef(undefined);
  return <>
      <style>{\`.\${pkg.prefix}--tearsheet { opacity: 0 }\`};</style>
      <Button onClick={() => setOpen(true)}>Open Tearsheet</Button>
      <div ref={ref}>
        <Tabs onChange={action('Tab selection changed')}>
          <Tearsheet {...args} actions={wiredActions} open={open} onClose={() => setOpen(false)} decorator={decorator && sampleDecorator(decorator)} slug={slug && sampleDecorator(slug)}>
            <TabPanels>
              <TabPanel>Tab 1</TabPanel>
              <TabPanel>Tab 2</TabPanel>
              <TabPanel>Tab 3</TabPanel>
              <TabPanel>Tab 4</TabPanel>
            </TabPanels>
          </Tearsheet>
        </Tabs>
      </div>
    </>;
}`,...(de=(ue=A.parameters)==null?void 0:ue.docs)==null?void 0:de.source}}};var me,fe,he;S.parameters={...S.parameters,docs:{...(me=S.parameters)==null?void 0:me.docs,source:{originalSource:`({
  mixedSizes,
  actions,
  decorator,
  slug,
  ...args
}, context) => {
  const [open1, setOpen1] = useState(false);
  const [open2, setOpen2] = useState(false);
  const [open3, setOpen3] = useState(false);
  const ref = useRef(undefined);
  const openButton1 = useRef();
  const openButton2 = useRef();
  const openButton3 = useRef();
  const wiredActions1 = Array.prototype.map.call(actions, action => {
    if (action.label === 'Cancel') {
      const previousClick = action.onClick;
      return {
        ...action,
        onClick: evt => {
          setOpen1(false);
          previousClick(evt);
        }
      };
    }
    return action;
  });
  const wiredActions2 = Array.prototype.map.call(actions, action => {
    if (action.label === 'Cancel') {
      const previousClick = action.onClick;
      return {
        ...action,
        onClick: evt => {
          setOpen2(false);
          previousClick(evt);
        }
      };
    }
    return action;
  });
  const wiredActions3 = Array.prototype.map.call(actions, action => {
    if (action.label === 'Cancel') {
      const previousClick = action.onClick;
      return {
        ...action,
        onClick: evt => {
          setOpen3(false);
          previousClick(evt);
        }
      };
    }
    return action;
  });
  const VariableSizeTearsheet = mixedSizes ? TearsheetNarrow : Tearsheet;
  useEffect(() => {
    setTimeout(() => {
      setOpen1(context.viewMode !== 'docs');
      setOpen2(context.viewMode !== 'docs');
      setOpen3(context.viewMode !== 'docs');
    }, 0);
  }, []);
  return <>
      <style>{\`.\${pkg.prefix}--tearsheet { opacity: 0 }\`};</style>
      <div style={{
      height: '3rem'
    }} data-reserve-space="for toggle buttons" />
      <ButtonSet style={{
      display: 'flex',
      position: 'fixed',
      top: 0,
      left: 0,
      zIndex: 10000
    }}>
        <Button onClick={() => setOpen1(!open1)} ref={openButton1}>
          Toggle&nbsp;tearsheet&nbsp;1
        </Button>
        <Button onClick={() => setOpen2(!open2)}>
          Toggle&nbsp;tearsheet&nbsp;2
        </Button>
        {!mixedSizes && <Button onClick={() => setOpen3(!open3)}>
            Toggle&nbsp;tearsheet&nbsp;3
          </Button>}
      </ButtonSet>
      <div ref={ref}>
        <Tearsheet {...args} actions={wiredActions1} headerActions={<ButtonSet>
              <Button kind="primary" size="sm" style={{
          width: 'initial'
        }} onClick={() => setOpen2(true)} disabled={open2} ref={openButton2}>
                Open tearsheet 2
              </Button>
            </ButtonSet>} title="Tearsheet 1" open={open1} onClose={() => setOpen1(false)} selectorPrimaryFocus="#stacked-input-1" decorator={decorator && sampleDecorator(decorator)} slug={slug && sampleDecorator(slug)} launcherButtonRef={openButton1}>
          <div className="tearsheet-stories__dummy-content-block">
            Main content 1
            <TextInput id="stacked-input-1" labelText="Enter an important value here" />
          </div>
        </Tearsheet>
        <VariableSizeTearsheet {...args} actions={wiredActions2} headerActions={<ButtonSet>
              <Button kind="primary" size="sm" style={{
          width: 'initial'
        }} onClick={() => setOpen3(true)} disabled={open3} ref={openButton3}>
                Open tearsheet 3
              </Button>
            </ButtonSet>} title="Tearsheet 2" open={open2} onClose={() => setOpen2(false)} selectorPrimaryFocus="#stacked-input-2" decorator={decorator && sampleDecorator(decorator)} slug={slug && sampleDecorator(slug)} launcherButtonRef={openButton2}>
          <div className="tearsheet-stories__dummy-content-block">
            Main content 2
            <TextInput id="stacked-input-2" labelText="Enter an important value here" />
          </div>
        </VariableSizeTearsheet>
        {!mixedSizes && <Tearsheet {...args} actions={wiredActions3} title="Tearsheet 3" open={open3} onClose={() => setOpen3(false)} selectorPrimaryFocus="#stacked-input-3" decorator={decorator && sampleDecorator(decorator)} slug={slug && sampleDecorator(slug)} launcherButtonRef={openButton3}>
            <div className="tearsheet-stories__dummy-content-block">
              Main content 3
              <TextInput id="stacked-input-3" labelText="Enter an important value here" />
            </div>
          </Tearsheet>}
      </div>
    </>;
}`,...(he=(fe=S.parameters)==null?void 0:fe.docs)==null?void 0:he.source}}};var ge,ye,be;I.parameters={...I.parameters,docs:{...(ge=I.parameters)==null?void 0:ge.docs,source:{originalSource:`({
  mixedSizes,
  actions,
  decorator,
  slug,
  ...args
}, context) => {
  const [open1, setOpen1] = useState(false);
  const [open2, setOpen2] = useState(false);
  const [open3, setOpen3] = useState(false);
  const ref = useRef(undefined);
  const openButton1 = useRef();
  const openButton2 = useRef();
  const openButton3 = useRef();
  const wiredActions1 = Array.prototype.map.call(actions, action => {
    if (action.label === 'Cancel') {
      const previousClick = action.onClick;
      return {
        ...action,
        onClick: evt => {
          setOpen1(false);
          previousClick(evt);
        }
      };
    }
    return action;
  });
  const wiredActions2 = Array.prototype.map.call(actions, action => {
    if (action.label === 'Cancel') {
      const previousClick = action.onClick;
      return {
        ...action,
        onClick: evt => {
          setOpen2(false);
          previousClick(evt);
        }
      };
    }
    return action;
  });
  const wiredActions3 = Array.prototype.map.call(actions, action => {
    if (action.label === 'Cancel') {
      const previousClick = action.onClick;
      return {
        ...action,
        onClick: evt => {
          setOpen3(false);
          previousClick(evt);
        }
      };
    }
    return action;
  });
  const VariableSizeTearsheet = mixedSizes ? TearsheetNarrow : Tearsheet;
  useEffect(() => {
    setTimeout(() => {
      setOpen1(context.viewMode !== 'docs');
      setOpen2(context.viewMode !== 'docs');
      setOpen3(context.viewMode !== 'docs');
    }, 0);
  }, []);
  return <>
      <style>{\`.\${pkg.prefix}--tearsheet { opacity: 0 }\`};</style>
      <div style={{
      height: '3rem'
    }} data-reserve-space="for toggle buttons" />
      <ButtonSet style={{
      display: 'flex',
      position: 'fixed',
      top: 0,
      left: 0,
      zIndex: 10000
    }}>
        <Button onClick={() => setOpen1(!open1)} ref={openButton1}>
          Toggle&nbsp;tearsheet&nbsp;1
        </Button>
        <Button onClick={() => setOpen2(!open2)}>
          Toggle&nbsp;tearsheet&nbsp;2
        </Button>
        {!mixedSizes && <Button onClick={() => setOpen3(!open3)}>
            Toggle&nbsp;tearsheet&nbsp;3
          </Button>}
      </ButtonSet>
      <div ref={ref}>
        <Tearsheet {...args} actions={wiredActions1} headerActions={<ButtonSet>
              <Button kind="primary" size="sm" style={{
          width: 'initial'
        }} onClick={() => setOpen2(true)} disabled={open2} ref={openButton2}>
                Open tearsheet 2
              </Button>
            </ButtonSet>} title="Tearsheet 1" open={open1} onClose={() => setOpen1(false)} selectorPrimaryFocus="#stacked-input-1" decorator={decorator && sampleDecorator(decorator)} slug={slug && sampleDecorator(slug)} launcherButtonRef={openButton1}>
          <div className="tearsheet-stories__dummy-content-block">
            Main content 1
            <TextInput id="stacked-input-1" labelText="Enter an important value here" />
          </div>
        </Tearsheet>
        <VariableSizeTearsheet {...args} actions={wiredActions2} headerActions={<ButtonSet>
              <Button kind="primary" size="sm" style={{
          width: 'initial'
        }} onClick={() => setOpen3(true)} disabled={open3} ref={openButton3}>
                Open tearsheet 3
              </Button>
            </ButtonSet>} title="Tearsheet 2" open={open2} onClose={() => setOpen2(false)} selectorPrimaryFocus="#stacked-input-2" decorator={decorator && sampleDecorator(decorator)} slug={slug && sampleDecorator(slug)} launcherButtonRef={openButton2}>
          <div className="tearsheet-stories__dummy-content-block">
            Main content 2
            <TextInput id="stacked-input-2" labelText="Enter an important value here" />
          </div>
        </VariableSizeTearsheet>
        {!mixedSizes && <Tearsheet {...args} actions={wiredActions3} title="Tearsheet 3" open={open3} onClose={() => setOpen3(false)} selectorPrimaryFocus="#stacked-input-3" decorator={decorator && sampleDecorator(decorator)} slug={slug && sampleDecorator(slug)} launcherButtonRef={openButton3}>
            <div className="tearsheet-stories__dummy-content-block">
              Main content 3
              <TextInput id="stacked-input-3" labelText="Enter an important value here" />
            </div>
          </Tearsheet>}
      </div>
    </>;
}`,...(be=(ye=I.parameters)==null?void 0:ye.docs)==null?void 0:be.source}}};const cn=["tearsheet","withNavigation","withInfluencer","ReturnFocusToOpenButton","firstElementDisabled","firstElementReadOnly","fullyLoaded","stacked","stackedMixedSizes"];export{F as ReturnFocusToOpenButton,cn as __namedExportsOrder,ln as default,B as firstElementDisabled,w as firstElementReadOnly,A as fullyLoaded,S as stacked,I as stackedMixedSizes,E as tearsheet,O as withInfluencer,x as withNavigation};
