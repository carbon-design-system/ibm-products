import{e as t,r as d}from"./index-DtHxqM--.js";import"./index-CMVdkQrl.js";import{B as c}from"./settings-C3kz8lqM.js";import{a as f}from"./index-B-lxVbXh.js";import{S as u}from"./StoryDocsPage-Z4lHM_h2.js";import{u as g}from"./index-CK5iQhpn.js";import{b as y}from"./story-helper-CmBIJVOZ.js";import{I as p}from"./ImportModal-DtDIP7Jy.js";import"./_commonjsHelpers-Cpj98o6Y.js";import"./index-DgLvjnYm.js";import"./index-CiYgQLeJ.js";import"./events-OVwOsPzJ.js";import"./index-BLvAv8yb.js";import"./v4-CtRu48qb.js";import"./iframe-BEyU_vaq.js";import"./index-Dytf1aFS.js";import"./index-DrFu-skq.js";import"./ComposedModal-DK_gDe0c.js";import"./index-ly07KqNH.js";import"./LayerContext-B9CO-6mR.js";import"./clamp--00YEiB8.js";import"./ButtonSet-S29aEq84.js";import"./InlineLoading-C_FY6vWy.js";import"./bucket-6-CRocNvF-.js";import"./mergeRefs-CTUecegF.js";import"./requiredIfGivenPropIsTruthy-CU7JwK8h.js";import"./wrapFocus-4QzkQnOM.js";import"./FileUploaderItem-FDE893jx.js";import"./bucket-18-xYgoy0Nr.js";import"./Text-DeLhjZ72.js";import"./TextInput-CixU1YEY.js";import"./useNormalizedInputProps-DMHlP-q8.js";import"./FormContext-C4Nuixum.js";import"./devtools-CJD9WatR.js";import"./usePortalTarget-BpuhspP7.js";import"./feature-flags-CgeLICHA.js";import"./index-BLKsqoyU.js";import"./uuidv4-BN2rGLQG.js";import"./bucket-0-CHtg8bFp.js";const s=()=>{const{csfFile:e}=g("meta",["meta"]);return t.createElement(u,{altGuidelinesHref:[y(e),{href:"https://www.carbondesignsystem.com/components/modal/usage",label:"Carbon Modal usage guidelines"},{href:"https://react.carbondesignsystem.com/?path=/docs/components-modal",label:"Carbon Modal documentation"}]})};s.__docgenInfo={description:"",methods:[],displayName:"DocsPage"};const ae={title:"IBM Products/Patterns/Import and upload/ImportModal",component:p,tags:["autodocs"],parameters:{docs:{page:s}},argTypes:{accept:{control:{type:"select",labels:{0:"image (png, jpeg or gif)",1:"document (doc or pdf)",2:"development (html, css or javascript)"}},options:[0,1,2],mapping:{0:["image/png","image/jpeg","image/gif"],1:["application/doc","application/docx","application/pdf"],2:["text/plain","text/css","text/html","text/javascript"]}},portalTarget:{control:!1}}},b={className:"test-class",defaultErrorBody:"Select a new file and try again.",defaultErrorHeader:"Import failed",description:"You can specify a file to import by either dragging it into the drag and drop area or by specifying a URL. (Maximum file size of 500KB)",fetchErrorBody:"Unable to fetch URL.",fetchErrorHeader:"Import failed",fileDropHeader:"Add files using drag and drop",fileDropLabel:"Drag and drop files here or click to upload",fileUploadLabel:"files uploaded",inputButtonIcon:!1,inputButtonText:"Add file",inputId:"test-id",inputLabel:"Add a file by specifying a URL",inputPlaceholder:"URL",invalidFileTypeErrorBody:"Invalid file type.",invalidFileTypeErrorHeader:"Import failed",invalidIconDescription:"Delete",maxFileSize:5e5,maxFileSizeErrorBody:"500kb max file size. Select a new file and try again.",maxFileSizeErrorHeader:"Import failed",onClose:f("onClose event"),onRequestSubmit:e=>console.log("file contents",e),open:!0,primaryButtonText:"Import",secondaryButtonText:"Cancel",title:"Import"},h=({...e},l)=>{const[m,r]=d.useState(l.viewMode!=="docs");return t.createElement(t.Fragment,null,t.createElement(p,{...e,open:m,onClose:()=>r(!1)}),t.createElement(c,{onClick:()=>r(!0)},"Launch modal"))},o=h.bind({});o.args={accept:0,...b};var a,i,n;o.parameters={...o.parameters,docs:{...(a=o.parameters)==null?void 0:a.docs,source:{originalSource:`({
  ...args
}, context) => {
  const [open, setOpen] = useState(context.viewMode !== 'docs');
  return <>
      <ImportModal {...args} open={open} onClose={() => setOpen(false)} />
      <Button onClick={() => setOpen(true)}>Launch modal</Button>
    </>;
}`,...(n=(i=o.parameters)==null?void 0:i.docs)==null?void 0:n.source}}};const ie=["Standard"];export{o as Standard,ie as __namedExportsOrder,ae as default};
