import{r,e as F}from"./index-BOZkNhcz.js";import{B as f,D as b,P as p}from"./index-Cd8snwnz.js";const l=r.createContext(b);function g({children:e,flags:s={},...t}){const n=r.useContext(l),a={...Object.keys(t).reduce((o,c)=>(o[c]=t[c],o),{}),...s},[i,m]=r.useState(n),[h,d]=r.useState(()=>{const o=f(a);return o.mergeWithScope(n),o});if(n!==i){const o=f(a);o.mergeWithScope(n),d(o),m(n)}return v(a,S,o=>{const c=f(o);c.mergeWithScope(n),d(c)}),F.createElement(l.Provider,{value:h},e)}g.propTypes={children:p.node,flags:p.objectOf(p.bool)};function v(e,s,t){const n=r.useRef(!1),u=r.useRef(t),[a,i]=r.useState(e);s(a,e)||i(e),r.useEffect(()=>{u.current=t}),r.useEffect(()=>{n.current&&u.current(a)},[a]),r.useEffect(()=>{n.current=!0},[])}function j(e){return r.useContext(l).enabled(e)}function S(e,s){if(e===s)return!0;for(const t of Object.keys(e))if(e[t]!==s[t])return!1;for(const t of Object.keys(s))if(s[t]!==e[t])return!1;return!0}g.__docgenInfo={description:"Supports individual feature flag values as props, merging them\nalong with the current `FeatureFlagContext` to provide consumers to check if\na feature flag is enabled or disabled in a given React tree",methods:[],displayName:"FeatureFlags",props:{flags:{defaultValue:{value:"{}",computed:!1},description:"Provide the feature flags to enabled or disabled in the current React tree, this has been deprecated. as we are going to pass individual boolean props for each flag.",type:{name:"objectOf",value:{name:"bool"}},required:!1},children:{description:"",type:{name:"node"},required:!1}}};export{g as F,j as u};
