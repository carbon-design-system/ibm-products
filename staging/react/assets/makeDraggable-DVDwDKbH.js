const E=({el:e,dragHandle:s,focusableDragHandle:f,dragStep:p,shiftDragStep:y})=>{s?(s.style.cursor="move",e.style.cursor="default"):e.style.cursor="move";let n=!1,c=0,a=0;const r=(t,o)=>{const d={detail:o,bubbles:!0};e.dispatchEvent(new CustomEvent(t,d))},m=t=>{if(t.key==="Enter"&&(n=!n),n?r("dragstart",{keyboard:!0}):r("dragend",{keyboard:!0}),!n)return;const o=t.shiftKey?y??32:p??8;switch(t.key){case"Enter":case" ":t.preventDefault();break;case"ArrowLeft":e.style.left=`${e.offsetLeft-o}px`;break;case"ArrowRight":e.style.left=`${e.offsetLeft+o}px`;break;case"ArrowUp":e.style.top=`${e.offsetTop-o}px`;break;case"ArrowDown":e.style.top=`${e.offsetTop+o}px`;break}},u=t=>{const o=t.target;!(o instanceof Node)||!(s?s.contains(o):e.contains(o))||(c=t.clientX-e.offsetLeft,a=t.clientY-e.offsetTop,n=!0,r("dragstart",{mouse:!0}),document.addEventListener("mousemove",i),document.addEventListener("mouseup",v,{once:!0}))},i=t=>{n&&(e.style.left=`${t.clientX-c}px`,e.style.top=`${t.clientY-a}px`)},v=()=>{n&&(n=!1,r("dragend",{mouse:!0}),document.removeEventListener("mousemove",i))};return s?s.addEventListener("mousedown",u):e.addEventListener("mousedown",u),f?.addEventListener("keydown",m),{cleanup:()=>{s?s.removeEventListener("mousedown",u):e.removeEventListener("mousedown",u),f?.removeEventListener("keydown",m),document.removeEventListener("mousemove",i),document.removeEventListener("mouseup",v)}}};export{E as m};
