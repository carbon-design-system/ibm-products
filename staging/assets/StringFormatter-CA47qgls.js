import{e as s,r as b}from"./index-DzvNrmz8.js";import{d as O,P as a}from"./index-5As4T26e.js";import{g as E}from"./devtools-B_dijMH7.js";import{p as g}from"./settings-CP9zVSjJ.js";import{D as R}from"./DefinitionTooltip-DKyN1THq.js";import{a as v}from"./props-helper-DCsMHcG1.js";import{u as F}from"./useIsomorphicEffect-l5L8NYko.js";const e={TOP:"top",TOP_LEFT:"top-left",TOP_RIGHT:"top-right",BOTTOM:"bottom",BOTTOM_LEFT:"bottom-left",BOTTOM_RIGHT:"bottom-right",LEFT:"left",LEFT_BOTTOM:"left-bottom",LEFT_TOP:"left-top",RIGHT:"right",RIGHT_BOTTOM:"right-bottom",RIGHT_TOP:"right-top"},t={TOP:"top",TOP_START:"top-start",TOP_END:"top-end",BOTTOM:"bottom",BOTTOM_START:"bottom-start",BOTTOM_END:"bottom-end",LEFT:"left",LEFT_END:"left-end",LEFT_START:"left-start",RIGHT:"right",RIGHT_END:"right-end",RIGHT_START:"right-start"},A=i=>({[e.TOP_LEFT]:t.TOP_START,[e.TOP_RIGHT]:t.TOP_END,[e.BOTTOM_LEFT]:t.BOTTOM_START,[e.BOTTOM_RIGHT]:t.BOTTOM_END,[e.LEFT_BOTTOM]:t.LEFT_END,[e.LEFT_TOP]:t.LEFT_START,[e.RIGHT_BOTTOM]:t.RIGHT_END,[e.RIGHT_START]:t.RIGHT_START})[i],p=`${g.prefix}--string-formatter`,d="StringFormatter",T={lines:1,tooltipDirection:t.BOTTOM_START,truncate:!1,width:null};let o=s.forwardRef(({className:i,lines:r=T.lines,tooltipDirection:m=T.tooltipDirection,truncate:n=T.truncate,width:c=T.width,value:l,..._},h)=>{const u=b.useRef(null);F(()=>{u.current.style.maxWidth=c,u.current.style.WebkitLineClamp=r},[r,c]);const f=s.createElement("span",{ref:u,className:O(`${p}--content`,{[`${p}--truncate`]:n})},l);return s.createElement("span",{..._,className:O(p,i),ref:h,...E(d)},n?s.createElement(R,{className:`${p}__tooltip`,align:m,definition:l,openOnHover:!0},f):f)});o=g.checkComponentEnabled(o,d);o.displayName=d;o.validateAlignment=()=>(i,r,m)=>{const n=i[r];if(Object.values(e).includes(n)){const l=A(n);console.warn(`"${n}" is a deprecated value for the "${r}" prop on the "${m}" component. Use "${l}" instead. Allowable values are: ${Object.values(t).join(", ")}.`)}};o.propTypes={className:a.string,lines:a.number,tooltipDirection:v([o.validateAlignment(),a.oneOf(Object.values(e),Object.values(t))]),truncate:a.bool,value:a.string.isRequired,width:a.string};o.__docgenInfo={description:`StringFormatter allows for truncating text while displaying a tooltip
overlay on hover or focus with the entirety of the provided copy.`,methods:[{name:"validateAlignment",docblock:null,modifiers:["static"],params:[],returns:null}],displayName:"StringFormatter",props:{lines:{defaultValue:{value:"1",computed:!1},description:"Number of lines to clamp value.",type:{name:"number"},required:!1},tooltipDirection:{defaultValue:{value:"'bottom-start'",computed:!1},description:"Specify the direction of the tooltip. Can be either top or bottom.",type:{name:"custom",raw:`allPropTypes([
  StringFormatter.validateAlignment(),
  PropTypes.oneOf(
    Object.values(deprecated_StringFormatterAlignment),
    Object.values(StringFormatterAlignment)
  ),
])`},required:!1},truncate:{defaultValue:{value:"false",computed:!1},description:"Whether or not the value should be truncated.",type:{name:"bool"},required:!1},width:{defaultValue:{value:"null",computed:!1},description:"Maximum width of value which should include",type:{name:"string"},required:!1},className:{description:"Provide an optional class to be applied to the containing node.",type:{name:"string"},required:!1},value:{description:"Value to format.",type:{name:"string"},required:!0}}};export{o as S};
