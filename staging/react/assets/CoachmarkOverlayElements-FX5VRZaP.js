import{r as m,e as t,c as $,p as g,B as _,n as ie,P as n,W as me}from"./iframe-C3VsvcP9.js";import{u as ue}from"./uuidv4-BN2rGLQG.js";import{g as Y}from"./devtools-BjHf0isC.js";import{i as de}from"./bucket-6-CZ4baeq2.js";import{u as pe}from"./useIsomorphicEffect-X37BQc6H.js";import{c as K}from"./clamp-CsXXRQhr.js";import{C as fe}from"./Carousel-U0NGT8HO.js";var he=(e=>(e.DEFAULT="default",e))(he||{}),q=(e=>(e.TOOLTIP="tooltip",e.FLOATING="floating",e.FIXED="fixed",e.STACKED="stacked",e))(q||{}),y=(e=>(e.BOTTOM="bottom",e.BOTTOM_LEFT="bottom-left",e.BOTTOM_RIGHT="bottom-right",e.LEFT="left",e.LEFT_TOP="left-top",e.LEFT_BOTTOM="left-bottom",e.RIGHT="right",e.RIGHT_TOP="right-top",e.RIGHT_BOTTOM="right-bottom",e.TOP="top",e.TOP_LEFT="top-left",e.TOP_RIGHT="top-right",e))(y||{});const ye=m.createContext(null),le=()=>m.useContext(ye),te=`${g.prefix}--coachmark-dragbar`,ne=`${g.prefix}--coachmark-overlay`,A="CoachmarkDragbar",z={closeIconDescription:"Close",onDrag:()=>{},onClose:()=>{},showCloseButton:!0,theme:"light"};let R=t.forwardRef(({a11yKeyboardHandler:e,closeIconDescription:d=z.closeIconDescription,onClose:r=z.onClose,onDrag:s=z.onDrag,showCloseButton:c=z.showCloseButton,theme:i=z.theme,...l},T)=>{const[x,B]=m.useState(!1);m.useEffect(()=>{const v=()=>B(!1);return window.addEventListener("mouseup",v),()=>{window.removeEventListener("mouseup",v)}},[]),m.useEffect(()=>{const v=p=>{s(p.movementX,p.movementY)};return x&&window.addEventListener("mousemove",v),()=>{window.removeEventListener("mousemove",v)}},[x,s]);const F=()=>B(!0);return t.createElement("header",{...l,className:$(te,`${te}__${i}`,{}),ref:T,...Y(A)},t.createElement("button",{type:"button",className:`${ne}__handle`,onMouseDown:F,onKeyDown:e,title:"Drag Handle"},t.createElement(de,{size:"16"})),c&&t.createElement(_,{kind:"ghost",size:"sm",renderIcon:ie,iconDescription:d,hasIconOnly:!0,className:`${ne}--close-btn`,onClick:r}))});R=g.checkComponentEnabled(R,A);R.displayName=A;R.propTypes={a11yKeyboardHandler:n.func.isRequired,closeIconDescription:n.string,onClose:n.func,onDrag:n.func,showCloseButton:n.bool,theme:n.oneOf(["light","dark"])};R.__docgenInfo={description:`DO NOT USE. This component is for the exclusive use
of other Onboarding components.`,methods:[],displayName:"CoachmarkDragbar",props:{a11yKeyboardHandler:{required:!0,tsType:{name:"signature",type:"function",raw:"(event: React.KeyboardEvent<HTMLButtonElement>) => void",signature:{arguments:[{type:{name:"ReactKeyboardEvent",raw:"React.KeyboardEvent<HTMLButtonElement>",elements:[{name:"HTMLButtonElement"}]},name:"event"}],return:{name:"void"}}},description:"Handler to manage keyboard interactions with the dragbar.",type:{name:"func"}},closeIconDescription:{required:!1,tsType:{name:"string"},description:"Tooltip text and aria label for the Close button icon.",defaultValue:{value:"'Close'",computed:!1},type:{name:"string"}},onClose:{required:!1,tsType:{name:"signature",type:"function",raw:"() => void",signature:{arguments:[],return:{name:"void"}}},description:"Function to call when the close button is clicked.",defaultValue:{value:"() => {}",computed:!1},type:{name:"func"}},onDrag:{required:!1,tsType:{name:"signature",type:"function",raw:"(movementX: number, movementY: number) => void",signature:{arguments:[{type:{name:"number"},name:"movementX"},{type:{name:"number"},name:"movementY"}],return:{name:"void"}}},description:`Function to call when the user clicks and drags the Coachmark.
For internal use only by the parent CoachmarkOverlay.`,defaultValue:{value:"() => {}",computed:!1},type:{name:"func"}},showCloseButton:{required:!1,tsType:{name:"boolean"},description:'Show/hide the "X" close button.',defaultValue:{value:"true",computed:!1},type:{name:"bool"}},theme:{required:!1,tsType:{name:"union",raw:"'light' | 'dark'",elements:[{name:"literal",value:"'light'"},{name:"literal",value:"'dark'"}]},description:"Determines the theme of the component.",defaultValue:{value:"'light'",computed:!1},type:{name:"enum",value:[{value:"'light'",computed:!1},{value:"'dark'",computed:!1}]}}}};const ae=`${g.prefix}--coachmark-header`,oe=`${g.prefix}--coachmark-overlay`,ee="CoachmarkHeader",J={closeIconDescription:"Close",onClose:()=>{},showCloseButton:!0,theme:"light"};let I=t.forwardRef(({closeIconDescription:e=J.closeIconDescription,onClose:d=J.onClose,showCloseButton:r=J.showCloseButton,theme:s=J.theme,...c},i)=>t.createElement("header",{...c,className:$(ae,`${ae}__${s}`),ref:i,...Y(ee)},r&&t.createElement("div",{className:`${oe}--close-btn-container`},t.createElement(_,{kind:"ghost",size:"sm",renderIcon:ie,iconDescription:e,hasIconOnly:!0,className:`${oe}--close-btn`,onClick:d}))));I=g.checkComponentEnabled(I,ee);I.displayName=ee;I.propTypes={closeIconDescription:n.string,onClose:n.func,showCloseButton:n.bool,theme:n.oneOf(["light","dark"])};I.__docgenInfo={description:`DO NOT USE. This component is for the exclusive use
of other Onboarding components.`,methods:[],displayName:"CoachmarkHeader",props:{closeIconDescription:{required:!1,tsType:{name:"string"},description:"Tooltip text and aria label for the Close button icon.",defaultValue:{value:"'Close'",computed:!1},type:{name:"string"}},onClose:{required:!1,tsType:{name:"signature",type:"function",raw:"() => void",signature:{arguments:[],return:{name:"void"}}},description:"Function to call when the close button is clicked.",defaultValue:{value:"() => {}",computed:!1},type:{name:"func"}},showCloseButton:{required:!1,tsType:{name:"boolean"},description:'Show/hide the "X" close button.',defaultValue:{value:"true",computed:!1},type:{name:"bool"}},theme:{required:!1,tsType:{name:"union",raw:"'light' | 'dark'",elements:[{name:"literal",value:"'light'"},{name:"literal",value:"'dark'"}]},description:"Determines the theme of the component.",defaultValue:{value:"'light'",computed:!1},type:{name:"enum",value:[{value:"'light'",computed:!1},{value:"'dark'",computed:!1}]}}}};const ge=(e,d)=>{const{width:r,height:s}=e.targetRect,c=24;let i=0,l=0;if(d!==q.TOOLTIP)switch(e.align){case y.TOP:l=r/2;break;case y.TOP_LEFT:l=c;break;case y.TOP_RIGHT:l=r-c;break;case y.BOTTOM:i=s,l=r/2;break;case y.BOTTOM_LEFT:i=s,l=c;break;case y.BOTTOM_RIGHT:i=s,l=r-c;break;case y.LEFT:i=s/2;break;case y.LEFT_TOP:i=c;break;case y.LEFT_BOTTOM:i=s-c;break;case y.RIGHT:i=s/2,l=r;break;case y.RIGHT_TOP:i=c,l=r;break;case y.RIGHT_BOTTOM:i=s-c,l=r;break}return{top:i,left:l}},E=`${g.prefix}--coachmark-overlay`,Q="CoachmarkOverlay",re={kind:q.FLOATING,theme:"light"};let P=m.forwardRef((e,d)=>{const{children:r,onClose:s,fixedIsVisible:c,className:i,kind:l=re.kind,theme:T=re.theme,...x}=e,{winHeight:B,winWidth:F}=be(),[v,p]=m.useState(!1),k=m.useRef(null),b=le(),D=l===q.TOOLTIP,h=l===q.FLOATING,M=i?.includes("is-visible"),L=a=>{const{shiftKey:o,key:u}=a;if(u==="Enter"||u===" ")p(f=>!f);else if(v){const f=o?128:32;switch(u){case"ArrowLeft":w(f*-1,0);break;case"ArrowRight":w(f,0);break;case"ArrowUp":w(0,f*-1);break;case"ArrowDown":w(0,f);break}}},N=m.useMemo(()=>{const a={};if((D||h)&&(b?.targetRect&&(a.left=b.targetRect.x+window.scrollX,a.top=b.targetRect.y+window.scrollY),a.left&&a.top&&(D&&(a.left=a.left+16,a.top=a.top+16),h))){const o=ge(b,l);a.left=a.left+o.left,a.top=a.top+o.top}return a},[D,h,b,l]);function H(a,o){let u=a,f=o;const G=F-288,j=B-150;return u<0?u=0:u>G&&(u=G),f<0?f=0:f>j&&(f=j),{targetX:u,targetY:f}}function w(a,o){const u=k.current;if(!u)return;const{x:f,y:G}=u.getBoundingClientRect(),{targetX:j,targetY:ce}=H(f+a,G+o);u.style.transform="none",u.style.position="fixed",u.style.left=`${j}px`,u.style.top=`${ce}px`,u.style.bottom="auto"}const C=ue();return pe(()=>{if(k.current){const a=k.current?.style;Object.keys(N).forEach(o=>{const u=N[o];a.setProperty(o,`${u}px`)})}},[N,k]),t.createElement("div",{...x,className:$(E,`${E}--${l}`,`${E}__${T}`,(D||h)&&b?.align&&`${E}--${b.align}`,c&&`${E}--is-visible`,v&&`${E}--is-dragmode`,i),ref:k,"aria-labelledby":C,tabIndex:-1,...Y(Q)},h?t.createElement(R,{a11yKeyboardHandler:L,onBlur:()=>p(!1),onDrag:w,theme:T,onClose:s}):t.createElement(I,{onClose:s}),t.createElement("div",{className:`${E}__body`,ref:d,id:C},t.Children.map(r,a=>t.cloneElement(a,{isVisible:M}))))});function se(){const{innerWidth:e,innerHeight:d}=window;return{winWidth:e,winHeight:d}}const be=()=>{const[e,d]=m.useState(se());return m.useEffect(()=>{function r(){d(se())}return window.addEventListener("resize",r),()=>window.removeEventListener("resize",r)},[]),e};P.deprecated={level:"warn",details:`${Q} is deprecated.`};P=g.checkComponentEnabled(P,Q);P.displayName=Q;P.propTypes={children:n.node.isRequired,className:n.string,fixedIsVisible:n.bool.isRequired,kind:n.oneOf(Object.values(q)),onClose:n.func.isRequired,theme:n.oneOf(["light","dark"])};P.__docgenInfo={description:`DO NOT USE. This component is for the exclusive use
of other Onboarding components.`,methods:[],displayName:"CoachmarkOverlay",props:{children:{required:!0,tsType:{name:"ReactNode"},description:`The CoachmarkOverlayElements child components.
Validation is handled in the parent Coachmark component.`,type:{name:"node"}},className:{required:!1,tsType:{name:"string"},description:"Optional class name for this component.",type:{name:"string"}},fixedIsVisible:{required:!0,tsType:{name:"boolean"},description:`The visibility of CoachmarkOverlay is
managed in the parent Coachmark component.`,type:{name:"bool"}},kind:{required:!1,tsType:{name:"COACHMARK_OVERLAY_KIND"},description:"What kind or style of Coachmark to render.",type:{name:"enum",computed:!0,value:"Object.values(COACHMARK_OVERLAY_KIND)"}},onClose:{required:!0,tsType:{name:"signature",type:"function",raw:"() => void",signature:{arguments:[],return:{name:"void"}}},description:"Function to call when the Coachmark closes.",type:{name:"func"}},theme:{required:!1,tsType:{name:"union",raw:"'light' | 'dark'",elements:[{name:"literal",value:"'light'"},{name:"literal",value:"'dark'"}]},description:"Determines the theme of the component.",type:{name:"enum",value:[{value:"'light'",computed:!1},{value:"'dark'",computed:!1}]}}}};const X=`${g.prefix}--coachmark-overlay-element`,Z="CoachmarkOverlayElement";let S=t.forwardRef(({button:e,className:d,description:r,title:s,...c},i)=>t.createElement("div",{...c,className:$(X,d,{}),ref:i,...Y(Z)},t.createElement("div",{className:`${X}__content`},s&&t.createElement("h2",{className:`${X}__title`},s),r&&t.createElement("p",{className:`${X}__body`},r)),e&&t.createElement("div",{className:`${X}__button`},e)));S.deprecated={level:"warn",details:`${Z} is deprecated.`};S=g.checkComponentEnabled(S,Z);S.displayName=Z;S.propTypes={button:n.node,className:n.string,description:n.node.isRequired,title:n.string.isRequired};S.__docgenInfo={description:`Component to be displayed within a CoachmarkOverlayElements container.
Can be used 1 to N number, to display content in a Coachmark's overlay
in a carousel fashion.`,methods:[],displayName:"CoachmarkOverlayElement",props:{button:{required:!1,tsType:{name:"ReactNode"},description:`An optional button can be rendered below the description.
This can be a link, button, Coachmark button, etc.`,type:{name:"node"}},className:{required:!1,tsType:{name:"string"},description:"Optional class name for this component.",type:{name:"string"}},description:{required:!0,tsType:{name:"ReactNode"},description:"The description of the Coachmark.",type:{name:"node"}},title:{required:!0,tsType:{name:"string"},description:"The title of the Coachmark.",type:{name:"string"}}}};const W=`${g.prefix}--coachmark-overlay-elements`,U="CoachmarkOverlayElements",O={isVisible:!1,nextButtonText:"Next",previousButtonLabel:"Back",closeButtonLabel:"Got it",onNext:void 0,onBack:void 0,currentStep:0};let V=t.forwardRef(({className:e,children:d,isVisible:r=O.isVisible,renderMedia:s,currentStep:c=O.currentStep,nextButtonText:i=O.nextButtonText,previousButtonLabel:l=O.previousButtonLabel,closeButtonLabel:T=O.closeButtonLabel,onNext:x=O.onNext,onBack:B=O.onBack,...F},v)=>{const p=m.useRef(void 0),k=m.useRef(void 0),[b,D]=m.useState(0),[h,M]=m.useState(c),L=le(),N=o=>{h>0&&o===0&&p.current&&setTimeout(()=>{p.current?.focus()},1e3),M(o)},H=m.Children.count(d),w=0,C=H-1,a=m.useMemo(()=>s?.({playStep:h}),[h,s]);return m.useEffect(()=>{const o=K(c,w,C);k?.current?.scrollToView?.(o)},[c]),m.useEffect(()=>{p.current&&p.current.focus()},[]),m.useEffect(()=>{setTimeout(()=>{p.current&&r&&p.current.focus()},100)},[r]),L?t.createElement("section",{...F,className:$(W,e,{}),ref:v,...Y(U)},s&&t.createElement("div",{className:`${W}__element-stepped-media`},a),H===1?t.createElement(t.Fragment,null,d,T&&t.createElement("div",{className:$(`${W}__footer`,"coachmark-carousel-controls")},t.createElement(_,{size:"sm",...L.closeButtonProps,ref:p},T))):t.createElement(t.Fragment,null,t.createElement(fe,{ref:k,onScroll:o=>{D(o)}},d),t.createElement("div",{className:$(`${W}__footer`)},t.createElement("div",{className:`${W}--controls-progress`},`${h+1} / ${H}`),b>0&&t.createElement(_,{size:"sm",kind:"ghost",title:l,disabled:b===0,onClick:()=>{const o=K(h-1,w,C);k?.current?.scrollToView?.(o),N(o),B?.()}},l),h<C?t.createElement(_,{size:"sm",ref:p,title:i,disabled:b===1,onClick:()=>{const o=K(h+1,w,C);k?.current?.scrollToView?.(o),N(o),x?.()}},i):T&&t.createElement(_,{size:"sm",ref:p,...L.closeButtonProps},T)))):me.warn(`The ${U} is a composable container element which should be used only within the scope of a Coachmark or a CoachmarkFixed component.`)});V.deprecated={level:"warn",details:`${U} is deprecated.`};V=g.checkComponentEnabled(V,U);V.displayName=U;V.propTypes={children:n.node.isRequired,className:n.string,closeButtonLabel:n.string,currentStep:n.number,isVisible:n.bool,nextButtonText:n.string,onBack:n.func,onNext:n.func,previousButtonLabel:n.string,renderMedia:n.func};V.__docgenInfo={description:`Composable container to allow for the displaying of CoachmarkOverlayElement
components in a carousel fashion.`,methods:[],displayName:"CoachmarkOverlayElements",props:{children:{required:!0,tsType:{name:"ReactNode"},description:`CoachmarkOverlayElements should be used with one or many CoachmarkOverlayElement components as children.
@see CoachmarkOverlayElement`,type:{name:"node"}},className:{required:!1,tsType:{name:"string"},description:"Optional class name for this component.",type:{name:"string"}},isVisible:{required:!1,tsType:{name:"boolean"},description:`The visibility of CoachmarkOverlayElements is
managed in the parent component.`,defaultValue:{value:"false",computed:!1},type:{name:"bool"}},renderMedia:{required:!1,tsType:{name:"signature",type:"function",raw:"(params) => ReactNode",signature:{arguments:[{name:"params"}],return:{name:"ReactNode"}}},description:"Optional prop to render any media like images or any animated media.",type:{name:"func"}},nextButtonText:{required:!1,tsType:{name:"string"},description:"The label for the Next button.",defaultValue:{value:"'Next'",computed:!1},type:{name:"string"}},previousButtonLabel:{required:!1,tsType:{name:"string"},description:"The label for the Previous button.",defaultValue:{value:"'Back'",computed:!1},type:{name:"string"}},closeButtonLabel:{required:!1,tsType:{name:"string"},description:"The label for the Close button.",defaultValue:{value:"'Got it'",computed:!1},type:{name:"string"}},onNext:{required:!1,tsType:{name:"signature",type:"function",raw:"() => void",signature:{arguments:[],return:{name:"void"}}},description:"Callback called when clicking on the Next button.",defaultValue:{value:"undefined",computed:!0},type:{name:"func"}},onBack:{required:!1,tsType:{name:"signature",type:"function",raw:"() => void",signature:{arguments:[],return:{name:"void"}}},description:"Callback called when clicking on the Previous button.",defaultValue:{value:"undefined",computed:!0},type:{name:"func"}},currentStep:{required:!1,tsType:{name:"number"},description:"Current step of the coachmarks.",defaultValue:{value:"0",computed:!1},type:{name:"number"}}}};export{he as B,ye as C,P as a,q as b,I as c,V as d,S as e,le as u};
