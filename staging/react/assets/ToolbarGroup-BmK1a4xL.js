import{r as e,e as s,c as T,p as w,ad as o,I as D}from"./iframe-HX3uP5rF.js";import{g as I}from"./getFocusableElements-BW7cf991.js";import{g as A}from"./devtools-CNhWTRl7.js";const{checkComponentEnabled:B,prefix:F}=w,h=`${F}--toolbar`,R=e.createContext({});let u=e.forwardRef(({children:i,className:l,vertical:n,...p},g)=>{const d=e.useRef(void 0),r=e.useCallback(()=>d.current,[d]),y=e.useRef(null),m=g||y,[c,E]=e.useState(-1);e.useEffect(()=>{d.current=I(m?.current),c!==-1&&r()?.forEach((a,t)=>{a[t!==c?"setAttribute":"removeAttribute"]("tabindex","-1")})}),e.useEffect(()=>{c!==-1&&r()?.[c].focus()},[c,r]);const[k,P]=n?["ArrowDown","ArrowUp"]:["ArrowRight","ArrowLeft"];function v(a){const t=c+a;r()?.[t]&&E(t)}function $({target:a}){const t=r();t?.includes(a)&&E(t.indexOf(a))}function C({key:a,target:t}){if(r()?.includes(t))switch(a){case k:v(1);break;case P:v(-1);break}}return s.createElement("div",{...p,ref:m,className:T(h,l,{[`${h}--vertical`]:n}),onFocus:$,onKeyDown:C,...n&&{"aria-orientation":"vertical"},...A(N),role:"toolbar"},s.createElement(R.Provider,{value:{vertical:n}},i))});const N="Toolbar";u.displayName=N;u.propTypes={children:o.node.isRequired,className:o.string,vertical:o.bool};u=B(u,N);u.__docgenInfo={description:"Toolbars are a collection of action items that organize a programâ€™s interaction patterns into a series of closely related commands.",methods:[],displayName:"Toolbar",props:{className:{required:!1,tsType:{name:"string"},description:"Provide an optional class to be applied to the containing node",type:{name:"custom",raw:"string"}},vertical:{required:!1,tsType:{name:"boolean"},description:"Determines whether the `Toolbar` is rendered vertically",type:{name:"custom",raw:"bool"}},children:{description:"Provide the content of the `Toolbar`",type:{name:"node"},required:!0}}};const q=`${h}__button`;let f=e.forwardRef(({caret:i=!1,children:l,className:n,renderIcon:p,iconDescription:g="",label:d,...r},y)=>{const m=p;return s.createElement(D,{align:e.useContext(R)?.vertical?"right":"top",...r,label:d??g,ref:y,className:T(n,{[`${q}--caret`]:i}),kind:"ghost",size:"md"},s.createElement(s.Fragment,null,m?s.createElement(m,null):null,l,i&&s.createElement("span",{className:`${q}__caret`})))});const x="ToolbarButton";f.displayName=x;const G={iconDescription:o.string};f.propTypes={caret:o.bool,children:o.node,className:o.string,label:o.string.isRequired,renderIcon:o.func.isRequired,...G};f=w.checkComponentEnabled(f,x);f.__docgenInfo={description:"Toolbar buttons are common functions performed as part of a products interface or an open window.",methods:[],displayName:"ToolbarButton",props:{caret:{required:!1,tsType:{name:"boolean"},description:"Determines whether the caret is rendered",defaultValue:{value:"false",computed:!1},type:{name:"custom",raw:"bool"}},className:{required:!1,tsType:{name:"string"},description:"Provide an optional class to be applied to the containing node",type:{name:"custom",raw:"string"}},iconDescription:{required:!1,tsType:{name:"string"},description:"@deprecated use `label` instead\nSpecifies the label for the icon button",defaultValue:{value:"''",computed:!1},type:{name:"custom",raw:"string"}},label:{required:!0,tsType:{name:"string"},description:"Specifies the label for the icon button",type:{name:"string"}},renderIcon:{required:!0,tsType:{name:"ReactElementType",raw:"React.ElementType"},description:"Specifies the icon to be used by the ToolbarButton component",type:{name:"func"}},children:{description:"Provide the content of the `ToolbarButton`",type:{name:"custom",raw:"node"},required:!1}}};let b=e.forwardRef(({className:i,children:l,...n},p)=>s.createElement("div",{...n,ref:p,className:T(`${h}__group`,i)},l));const _="ToolbarGroup";b.displayName=_;b.propTypes={children:o.node.isRequired,className:o.string};b=w.checkComponentEnabled(b,_);b.__docgenInfo={description:"Toolbar groups organize the commands within a toolbar into related groups.",methods:[],displayName:"ToolbarGroup",props:{children:{required:!0,tsType:{name:"ReactNode"},description:"Provide the content of the `ToolbarGroup`",type:{name:"node"}},className:{required:!1,tsType:{name:"string"},description:"Provide an optional class to be applied to the containing node",type:{name:"custom",raw:"string"}}}};export{u as T,b as a,f as b};
