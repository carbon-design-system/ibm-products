import{p as Be,u as ln,e as t,N as sn,c as Z,P as e,r as p,U as un,V as mn,h as Fe,B as Ve,F as dn,G as pn,n as Me}from"./iframe-HX3uP5rF.js";import{T as cn,a as He,S as gn,V as yn}from"./TimePickerSelect-Cv6uhIQm.js";import{g as fn}from"./devtools-CNhWTRl7.js";import{S as we,H as Te}from"./index-CmB6Vns6.js";import{L as vn}from"./index-DaYmMccZ.js";import{a as bn}from"./bucket-19-DB0RW10U.js";import{u as U}from"./uuidv4-BN2rGLQG.js";import{A as We,q as wn}from"./bucket-0-BYnxl-xo.js";import{S as ze}from"./Search-D0434wgb.js";import{N as Tn}from"./NumberInput-xthfq6y8.js";import{T as Cn}from"./TextArea-v7XvC9aG.js";import{T as hn}from"./TextInput-CGHDlgIc.js";import{D as Re,a as ye}from"./DatePicker-CI1fuGEG.js";import{S as fe}from"./SelectItem-B8J5viA0.js";import{W as Ke}from"./bucket-17-D_IiUgFQ.js";import{B as qn}from"./bucket-1-CV829xS4.js";const r=`${Be.prefix}--condition-builder`,Ce="Non-Hierarchical",W="Hierarchical",Q=(n,a)=>{if(n){const i=n.target,o=n.target.closest('[role="row"]'),s=n.target.closest('[role="gridcell"]')?.querySelector("button").dataset.name;setTimeout(()=>{const l=o.querySelector(`button[data-name="${s}"]`);M(l,a),document.contains(i)&&(n.target.closest('[role="gridcell"]')?.querySelector("button")?.click(),n.target.closest('[role="gridcell"]')?.querySelector("button")?.focus())},0)}},X=(n,a)=>{setTimeout(()=>{M(n,a)},0)},ve=(n,a,i,o,s,l)=>{n==document.activeElement?a!==i.length-1?X(i[a+1],l):X(i[o?0:i.length-1],l):Array.from(i).indexOf(document.activeElement)==-1&&s&&X(i[0],l)},be=(n,a,i,o,s,l)=>{n==document.activeElement?X(a!==0?i[a-1]:i[o?i.length-1:0],l):Array.from(i).indexOf(document.activeElement)==-1&&s&&X(i[i.length-1],l)},An=(n,a)=>n[a],te=n=>n&&n!=="INVALID",M=(n,a)=>{const i=n?.closest(`.${r}__content-container`)??n?.closest(`.${r}__actions-container`);i&&Array.from(i.querySelectorAll('[tabindex="0"]')).map(o=>o?.setAttribute("tabindex","-1")),n?.setAttribute("tabindex","0"),a.current?.querySelector(`.${r}__statement-button`)?.setAttribute("tabindex","1"),n?.focus()},kn=(n,a,i)=>i?.valueFormatter&&["custom"].includes(n)?i.valueFormatter(a):n==="option"&&a&&typeof a!="string"?(Array.isArray(a)?a:[a]).map(s=>s.label).join(", "):a,he=(n,a)=>n?.operator==="oneOf"||a?.operators?.find(i=>n?.operator===i.id&&i.isMultiSelect),Ze=(n,a,i)=>{!n.currentTarget.value&&n.key==="Escape"&&(Q(n,a),i?.())},J=({className:n,label:a,hideLabel:i,tooltipAlign:o,renderIcon:s,onClick:l,showToolTip:y,wrapperProps:m,onBlur:h,onFocus:d,onMouseEnter:f,onMouseLeave:q,isInvalid:b,wrapperClassName:C,tabIndex:k,description:v,...c})=>{const w=v||a,u=ln(),O=()=>{const N=c["data-name"]??"";return t.createElement("button",{tabIndex:k!==void 0?k:-1,className:Z([n,`${r}__button`,{[`${r}__text-ellipsis`]:y&&!i&&!b},{[`${r}__invalid-input`]:b}]),type:"button",onClick:l,onBlur:h,onFocus:d,onMouseEnter:f,onMouseLeave:q,"data-name":N,...c},s&&t.createElement(s,null),!i&&t.createElement("span",null,a),b&&t.createElement(bn,null))};return i||y||v?t.createElement(sn,{label:w,align:o,className:`${C} ${r}__tooltip ${u}--icon-tooltip`,...m,leaveDelayMs:0},O()):t.createElement(t.Fragment,null,O())};J.propTypes={className:e.string,hideLabel:e.bool,isInvalid:e.bool,label:e.string,onBlur:e.func,onClick:e.func,onFocus:e.func,onMouseEnter:e.func,onMouseLeave:e.func,renderIcon:e.oneOfType([e.func,e.object]),showToolTip:e.bool,tabIndex:e.number,tooltipAlign:e.string,wrapperClassName:e.string,wrapperProps:e.object};J.__docgenInfo={description:"",methods:[],displayName:"ConditionBuilderButton",props:{className:{required:!1,tsType:{name:"string"},description:"Provide an optional class to be applied to the containing node.",type:{name:"string"}},label:{required:!1,tsType:{name:"string"},description:"label of the button",type:{name:"string"}},hideLabel:{required:!1,tsType:{name:"boolean"},description:"decides if label and tooltip to be hidden",type:{name:"bool"}},tooltipAlign:{required:!1,tsType:{name:"PopoverAlignment"},description:"tooltip position",type:{name:"string"}},renderIcon:{required:!1,tsType:{name:"CarbonIconType"},description:"Optional prop to allow overriding the icon rendering.",type:{name:"union",value:[{name:"func"},{name:"object"}]}},onClick:{required:!1,tsType:{name:"signature",type:"function",raw:"(e: React.MouseEvent<HTMLButtonElement>) => void",signature:{arguments:[{type:{name:"ReactMouseEvent",raw:"React.MouseEvent<HTMLButtonElement>",elements:[{name:"HTMLButtonElement"}]},name:"e"}],return:{name:"void"}}},description:"callback triggered on click of add button",type:{name:"func"}},onBlur:{required:!1,tsType:{name:"ReactFocusEventHandler",raw:"React.FocusEventHandler<HTMLButtonElement>",elements:[{name:"HTMLButtonElement"}]},description:"mouse events callbacks",type:{name:"func"}},onFocus:{required:!1,tsType:{name:"ReactFocusEventHandler",raw:"React.FocusEventHandler<HTMLButtonElement>",elements:[{name:"HTMLButtonElement"}]},description:"",type:{name:"func"}},onMouseEnter:{required:!1,tsType:{name:"signature",type:"function",raw:"(e: React.MouseEvent<HTMLButtonElement>) => void",signature:{arguments:[{type:{name:"ReactMouseEvent",raw:"React.MouseEvent<HTMLButtonElement>",elements:[{name:"HTMLButtonElement"}]},name:"e"}],return:{name:"void"}}},description:"",type:{name:"func"}},onMouseLeave:{required:!1,tsType:{name:"signature",type:"function",raw:"(e: React.MouseEvent<HTMLButtonElement>) => void",signature:{arguments:[{type:{name:"ReactMouseEvent",raw:"React.MouseEvent<HTMLButtonElement>",elements:[{name:"HTMLButtonElement"}]},name:"e"}],return:{name:"void"}}},description:"",type:{name:"func"}},showToolTip:{required:!1,tsType:{name:"boolean"},description:"decides if  tooltip to be shown",type:{name:"bool"}},wrapperProps:{required:!1,tsType:{name:"object"},description:"optional props for tree grid to add role and aria-label to wrapper span",type:{name:"object"}},isInvalid:{required:!1,tsType:{name:"boolean"},description:"boolean to know the updated value in not valid",type:{name:"bool"}},wrapperClassName:{required:!1,tsType:{name:"string"},description:"classname applies to the wrapper of popover",type:{name:"string"}},tabIndex:{required:!1,tsType:{name:"number"},description:"Tab index",type:{name:"number"}},description:{required:!1,tsType:{name:"string"},description:""}}};const On={operator:"or",groups:[{groupOperator:"and",statement:"ifAll",id:U(),conditions:[{property:void 0,operator:"",value:"",popoverToOpen:"propertyField",id:U()}]}]},H=p.createContext({rootState:{groups:[]}}),qe=n=>{const[a,i]=p.useState({groups:[]}),[o,s]=p.useState([]),l={rootState:a,setRootState:i,actionState:o,setActionState:s,inputConfig:n.inputConfig,popOverSearchThreshold:n.popOverSearchThreshold,getOptions:n.getOptions,variant:n.variant,translateWithId:n.translateWithId,conditionBuilderRef:n.conditionBuilderRef,statementConfigCustom:n.statementConfigCustom,onAddItem:n.onAddItem};return t.createElement(H.Provider,{value:l},n.children)};qe.propTypes={children:e.node.isRequired,conditionBuilderRef:e.object,getOptions:e.func,inputConfig:e.shape({properties:e.arrayOf(e.shape({id:e.string.isRequired,label:e.string.isRequired,icon:e.oneOfType([e.func,e.object]),description:e.string,type:e.oneOf(["text","textarea","number","date","option","time","custom"]).isRequired,config:e.shape({options:e.arrayOf(e.shape({id:e.string.isRequired,label:e.string.isRequired,icon:e.oneOfType([e.func,e.object])})),component:e.func,operators:e.arrayOf(e.shape({id:e.string.isRequired,label:e.string.isRequired})),long:e.bool})}))}).isRequired,popOverSearchThreshold:e.number.isRequired,translateWithId:e.func,variant:e.string.isRequired};qe.__docgenInfo={description:"",methods:[],displayName:"ConditionBuilderProvider",props:{rootState:{required:!1,tsType:{name:"signature",type:"object",raw:`{
  groups?: ConditionGroup[];
  operator?: LogicalOperator;
}`,signature:{properties:[{key:"groups",value:{name:"Array",elements:[{name:"signature",type:"object",raw:`{
  conditions?: (ConditionGroup | Condition)[];
  groupOperator?: LogicalOperator;
  statement?: StatementOperator;
  id: string;
}`,signature:{properties:[{key:"conditions",value:{name:"Array",elements:[{name:"unknown"}],raw:"(ConditionGroup | Condition)[]",required:!1}},{key:"groupOperator",value:{name:"union",raw:"'and' | 'or'",elements:[{name:"literal",value:"'and'"},{name:"literal",value:"'or'"}],required:!1}},{key:"statement",value:{name:"union",raw:"'ifAll' | 'ifAny' | 'unlessAll' | 'unlessAny'",elements:[{name:"literal",value:"'ifAll'"},{name:"literal",value:"'ifAny'"},{name:"literal",value:"'unlessAll'"},{name:"literal",value:"'unlessAny'"}],required:!1}},{key:"id",value:{name:"string",required:!0}}]}}],raw:"ConditionGroup[]",required:!1}},{key:"operator",value:{name:"union",raw:"'and' | 'or'",elements:[{name:"literal",value:"'and'"},{name:"literal",value:"'or'"}],required:!1}}]}},description:""},setRootState:{required:!1,tsType:{name:"Dispatch",elements:[{name:"SetStateAction",elements:[{name:"signature",type:"object",raw:`{
  groups?: ConditionGroup[];
  operator?: LogicalOperator;
}`,signature:{properties:[{key:"groups",value:{name:"Array",elements:[{name:"signature",type:"object",raw:`{
  conditions?: (ConditionGroup | Condition)[];
  groupOperator?: LogicalOperator;
  statement?: StatementOperator;
  id: string;
}`,signature:{properties:[{key:"conditions",value:{name:"Array",elements:[{name:"unknown"}],raw:"(ConditionGroup | Condition)[]",required:!1}},{key:"groupOperator",value:{name:"union",raw:"'and' | 'or'",elements:[{name:"literal",value:"'and'"},{name:"literal",value:"'or'"}],required:!1}},{key:"statement",value:{name:"union",raw:"'ifAll' | 'ifAny' | 'unlessAll' | 'unlessAny'",elements:[{name:"literal",value:"'ifAll'"},{name:"literal",value:"'ifAny'"},{name:"literal",value:"'unlessAll'"},{name:"literal",value:"'unlessAny'"}],required:!1}},{key:"id",value:{name:"string",required:!0}}]}}],raw:"ConditionGroup[]",required:!1}},{key:"operator",value:{name:"union",raw:"'and' | 'or'",elements:[{name:"literal",value:"'and'"},{name:"literal",value:"'or'"}],required:!1}}]}}],raw:"SetStateAction<ConditionBuilderState>"}],raw:"Dispatch<SetStateAction<ConditionBuilderState>>"},description:""},actionState:{required:!1,tsType:{name:"Array",elements:[{name:"signature",type:"object",raw:"{ id?: string | number; label?: string }",signature:{properties:[{key:"id",value:{name:"union",raw:"string | number",elements:[{name:"string"},{name:"number"}],required:!1}},{key:"label",value:{name:"string",required:!1}}]}}],raw:"Action[]"},description:""},setActionState:{required:!1,tsType:{name:"Dispatch",elements:[{name:"SetStateAction",elements:[{name:"Array",elements:[{name:"signature",type:"object",raw:"{ id?: string | number; label?: string }",signature:{properties:[{key:"id",value:{name:"union",raw:"string | number",elements:[{name:"string"},{name:"number"}],required:!1}},{key:"label",value:{name:"string",required:!1}}]}}],raw:"Action[]"}],raw:"SetStateAction<Action[]>"}],raw:"Dispatch<SetStateAction<Action[]>>"},description:""},onAddItem:{required:!1,tsType:{name:"signature",type:"function",raw:"(config: AddItemConfig) => { preventAdd: boolean }",signature:{arguments:[{type:{name:"signature",type:"object",raw:`{
  type: AddItemType;
  state: ConditionBuilderState;
  group?: ConditionGroup;
}`,signature:{properties:[{key:"type",value:{name:"union",raw:"'condition' | 'subgroup' | 'group'",elements:[{name:"literal",value:"'condition'"},{name:"literal",value:"'subgroup'"},{name:"literal",value:"'group'"}],required:!0}},{key:"state",value:{name:"signature",type:"object",raw:`{
  groups?: ConditionGroup[];
  operator?: LogicalOperator;
}`,signature:{properties:[{key:"groups",value:{name:"Array",elements:[{name:"signature",type:"object",raw:`{
  conditions?: (ConditionGroup | Condition)[];
  groupOperator?: LogicalOperator;
  statement?: StatementOperator;
  id: string;
}`,signature:{properties:[{key:"conditions",value:{name:"Array",elements:[{name:"unknown"}],raw:"(ConditionGroup | Condition)[]",required:!1}},{key:"groupOperator",value:{name:"union",raw:"'and' | 'or'",elements:[{name:"literal",value:"'and'"},{name:"literal",value:"'or'"}],required:!1}},{key:"statement",value:{name:"union",raw:"'ifAll' | 'ifAny' | 'unlessAll' | 'unlessAny'",elements:[{name:"literal",value:"'ifAll'"},{name:"literal",value:"'ifAny'"},{name:"literal",value:"'unlessAll'"},{name:"literal",value:"'unlessAny'"}],required:!1}},{key:"id",value:{name:"string",required:!0}}]},required:!1}],raw:"ConditionGroup[]",required:!1}},{key:"operator",value:{name:"union",raw:"'and' | 'or'",elements:[{name:"literal",value:"'and'"},{name:"literal",value:"'or'"}],required:!1}}]},required:!0}},{key:"group",value:{name:"signature",type:"object",raw:`{
  conditions?: (ConditionGroup | Condition)[];
  groupOperator?: LogicalOperator;
  statement?: StatementOperator;
  id: string;
}`,signature:{properties:[{key:"conditions",value:{name:"Array",elements:[{name:"unknown"}],raw:"(ConditionGroup | Condition)[]",required:!1}},{key:"groupOperator",value:{name:"union",raw:"'and' | 'or'",elements:[{name:"literal",value:"'and'"},{name:"literal",value:"'or'"}],required:!1}},{key:"statement",value:{name:"union",raw:"'ifAll' | 'ifAny' | 'unlessAll' | 'unlessAny'",elements:[{name:"literal",value:"'ifAll'"},{name:"literal",value:"'ifAny'"},{name:"literal",value:"'unlessAll'"},{name:"literal",value:"'unlessAny'"}],required:!1}},{key:"id",value:{name:"string",required:!0}}]},required:!1}}]}},name:"config"}],return:{name:"signature",type:"object",raw:"{ preventAdd: boolean }",signature:{properties:[{key:"preventAdd",value:{name:"boolean",required:!0}}]}}}},description:""},children:{required:!0,tsType:{name:"ReactNode"},description:"Provide the contents of the ConditionBuilder.",type:{name:"node"}},inputConfig:{required:!0,tsType:{name:"signature",type:"object",raw:"{ properties: Property[] }",signature:{properties:[{key:"properties",value:{name:"Array",elements:[{name:"intersection",raw:`Item & {
  icon?: CarbonIconType;
  description?: string;
  type?: any;
  config?: any;
} & ConfigType`,elements:[{name:"signature",type:"object",raw:"{ id: string; label: string }",signature:{properties:[{key:"id",value:{name:"string",required:!0}},{key:"label",value:{name:"string",required:!0}}]}},{name:"signature",type:"object",raw:`{
  icon?: CarbonIconType;
  description?: string;
  type?: any;
  config?: any;
}`,signature:{properties:[{key:"icon",value:{name:"CarbonIconType",required:!1}},{key:"description",value:{name:"string",required:!1}},{key:"type",value:{name:"any",required:!1}},{key:"config",value:{name:"any",required:!1}}]}},{name:"union",raw:`| PropertyConfigOption['config']
| PropertyConfigTextArea['config']
| PropertyConfigText['config']
| PropertyConfigNumber['config']
| PropertyConfigDate['config']
| PropertyConfigTime['config']
| PropertyConfigCustom['config']`,elements:[{name:"signature",raw:"PropertyConfigOption['config']"},{name:"PropertyConfigTextArea['config']",raw:"PropertyConfigTextArea['config']"},{name:"PropertyConfigText['config']",raw:"PropertyConfigText['config']"},{name:"PropertyConfigNumber['config']",raw:"PropertyConfigNumber['config']"},{name:"intersection",raw:"PropertyConfigDate['config']"},{name:"signature",raw:"PropertyConfigTime['config']"},{name:"signature",raw:"PropertyConfigCustom['config']"}]}]}],raw:"Property[]",required:!0}}]}},description:"This is a mandatory prop that defines the input to the condition builder.",type:{name:"shape",value:{properties:{name:"arrayOf",value:{name:"shape",value:{id:{name:"string",required:!0},label:{name:"string",required:!0},icon:{name:"union",value:[{name:"func"},{name:"object"}],required:!1},description:{name:"string",required:!1},type:{name:"enum",value:[{value:"'text'",computed:!1},{value:"'textarea'",computed:!1},{value:"'number'",computed:!1},{value:"'date'",computed:!1},{value:"'option'",computed:!1},{value:"'time'",computed:!1},{value:"'custom'",computed:!1}],required:!0},config:{name:"shape",value:{options:{name:"arrayOf",value:{name:"shape",value:{id:{name:"string",required:!0},label:{name:"string",required:!0},icon:{name:"union",value:[{name:"func"},{name:"object"}],required:!1}}},required:!1},component:{name:"func",required:!1},operators:{name:"arrayOf",value:{name:"shape",value:{id:{name:"string",required:!0},label:{name:"string",required:!0}}},required:!1},long:{name:"bool",required:!1}},required:!1}}},required:!1}}}},popOverSearchThreshold:{required:!0,tsType:{name:"number"},description:"Provide an mandatory numeric value that will be used to enable search option in the popovers with list.",type:{name:"number"}},getOptions:{required:!1,tsType:{name:"signature",type:"function",raw:`(
  state: ConditionBuilderState,
  condition: Condition
) => Promise<Option[]>`,signature:{arguments:[{type:{name:"signature",type:"object",raw:`{
  groups?: ConditionGroup[];
  operator?: LogicalOperator;
}`,signature:{properties:[{key:"groups",value:{name:"Array",elements:[{name:"signature",type:"object",raw:`{
  conditions?: (ConditionGroup | Condition)[];
  groupOperator?: LogicalOperator;
  statement?: StatementOperator;
  id: string;
}`,signature:{properties:[{key:"conditions",value:{name:"Array",elements:[{name:"unknown"}],raw:"(ConditionGroup | Condition)[]",required:!1}},{key:"groupOperator",value:{name:"union",raw:"'and' | 'or'",elements:[{name:"literal",value:"'and'"},{name:"literal",value:"'or'"}],required:!1}},{key:"statement",value:{name:"union",raw:"'ifAll' | 'ifAny' | 'unlessAll' | 'unlessAny'",elements:[{name:"literal",value:"'ifAll'"},{name:"literal",value:"'ifAny'"},{name:"literal",value:"'unlessAll'"},{name:"literal",value:"'unlessAny'"}],required:!1}},{key:"id",value:{name:"string",required:!0}}]}}],raw:"ConditionGroup[]",required:!1}},{key:"operator",value:{name:"union",raw:"'and' | 'or'",elements:[{name:"literal",value:"'and'"},{name:"literal",value:"'or'"}],required:!1}}]}},name:"state"},{type:{name:"signature",type:"object",raw:`{
  property?: string;
  operator?: Operator | '' | 'INVALID';
  value?: string | Option[] | Option;
  id?: string | number;
  popoverToOpen?: string;
}`,signature:{properties:[{key:"property",value:{name:"string",required:!1}},{key:"operator",value:{name:"union",raw:"Operator | '' | 'INVALID'",elements:[{name:"union",raw:`| LogicalOperator
| StatementOperator
| CoreOperator
| NumberOperator
| StringOperator
| ArrayOperator
| OptionOperator
| DateOperator`,elements:[{name:"union",raw:"'and' | 'or'",elements:[{name:"literal",value:"'and'"},{name:"literal",value:"'or'"}],required:!1},{name:"union",raw:"'ifAll' | 'ifAny' | 'unlessAll' | 'unlessAny'",elements:[{name:"literal",value:"'ifAll'"},{name:"literal",value:"'ifAny'"},{name:"literal",value:"'unlessAll'"},{name:"literal",value:"'unlessAny'"}],required:!1},{name:"literal",value:"'is'"},{name:"union",raw:"'greater' | 'greaterEqual' | 'lower' | 'lowerEqual'",elements:[{name:"literal",value:"'greater'"},{name:"literal",value:"'greaterEqual'"},{name:"literal",value:"'lower'"},{name:"literal",value:"'lowerEqual'"}]},{name:"union",raw:"'startsWith' | 'endsWith'",elements:[{name:"literal",value:"'startsWith'"},{name:"literal",value:"'endsWith'"}]},{name:"literal",value:"'contains'"},{name:"literal",value:"'oneOf'"},{name:"union",raw:"'before' | 'after'",elements:[{name:"literal",value:"'before'"},{name:"literal",value:"'after'"}]}]},{name:"literal",value:"''"},{name:"literal",value:"'INVALID'"}],required:!1}},{key:"value",value:{name:"union",raw:"string | Option[] | Option",elements:[{name:"string"},{name:"Array",elements:[{name:"intersection",raw:"Item & { icon?: CarbonIconType }",elements:[{name:"signature",type:"object",raw:"{ id: string; label: string }",signature:{properties:[{key:"id",value:{name:"string",required:!0}},{key:"label",value:{name:"string",required:!0}}]}},{name:"signature",type:"object",raw:"{ icon?: CarbonIconType }",signature:{properties:[{key:"icon",value:{name:"CarbonIconType",required:!1}}]}}]}],raw:"Option[]"},{name:"intersection",raw:"Item & { icon?: CarbonIconType }",elements:[{name:"signature",type:"object",raw:"{ id: string; label: string }",signature:{properties:[{key:"id",value:{name:"string",required:!0}},{key:"label",value:{name:"string",required:!0}}]}},{name:"signature",type:"object",raw:"{ icon?: CarbonIconType }",signature:{properties:[{key:"icon",value:{name:"CarbonIconType",required:!1}}]}}]}],required:!1}},{key:"id",value:{name:"union",raw:"string | number",elements:[{name:"string"},{name:"number"}],required:!1}},{key:"popoverToOpen",value:{name:"string",required:!1}}]}},name:"condition"}],return:{name:"Promise",elements:[{name:"Array",elements:[{name:"intersection",raw:"Item & { icon?: CarbonIconType }",elements:[{name:"signature",type:"object",raw:"{ id: string; label: string }",signature:{properties:[{key:"id",value:{name:"string",required:!0}},{key:"label",value:{name:"string",required:!0}}]}},{name:"signature",type:"object",raw:"{ icon?: CarbonIconType }",signature:{properties:[{key:"icon",value:{name:"CarbonIconType",required:!1}}]}}]}],raw:"Option[]"}],raw:"Promise<Option[]>"}}},description:`This is an optional callback function that will be triggered when options array is not passed in the inputConfig against a property. 
This can be a asynchronous function that need  to  return a promise, so it will allow to fetch options from API call.
options has to be in valid format
[{
          label: 'label',
          id: 'id',
        },...]`,type:{name:"func"}},variant:{required:!0,tsType:{name:"string"},description:"Provide the condition builder variant: Non-Hierarchical/ Hierarchical",type:{name:"string"}},translateWithId:{required:!1,tsType:{name:"signature",type:"function",raw:"(id: ConditionBuilderTextKeys) => string",signature:{arguments:[{type:{name:"union",raw:`| 'ifText'
| 'unlessText'
| 'excl_if'
| 'and'
| 'or'
| 'is'
| 'ifAll'
| 'ifAny'
| 'unlessAll'
| 'unlessAny'
| 'greater'
| 'greaterEqual'
| 'lower'
| 'lowerEqual'
| 'startsWith'
| 'endsWith'
| 'contains'
| 'oneOf'
| 'before'
| 'after'
| 'between'
| 'addConditionText'
| 'addConditionGroupText'
| 'addSubgroupText'
| 'conditionText'
| 'propertyText'
| 'operatorText'
| 'valueText'
| 'connectorText'
| 'conditionRowText'
| 'conditionRowGroupText'
| 'removeConditionText'
| 'addConditionRowText'
| 'startText'
| 'endText'
| 'clearSearchText'
| 'actionsText'
| 'then'
| 'removeActionText'
| 'addActionText'
| 'invalidText'
| 'invalidNumberWarnText'
| 'conditionBuilderText'
| 'actionSectionText'
| 'conditionHeadingText'
| 'addPropertyText'
| 'addOperatorText'
| 'addValueText'
| 'conditionBuilderHierarchicalText'`,elements:[{name:"literal",value:"'ifText'"},{name:"literal",value:"'unlessText'"},{name:"literal",value:"'excl_if'"},{name:"literal",value:"'and'"},{name:"literal",value:"'or'"},{name:"literal",value:"'is'"},{name:"literal",value:"'ifAll'"},{name:"literal",value:"'ifAny'"},{name:"literal",value:"'unlessAll'"},{name:"literal",value:"'unlessAny'"},{name:"literal",value:"'greater'"},{name:"literal",value:"'greaterEqual'"},{name:"literal",value:"'lower'"},{name:"literal",value:"'lowerEqual'"},{name:"literal",value:"'startsWith'"},{name:"literal",value:"'endsWith'"},{name:"literal",value:"'contains'"},{name:"literal",value:"'oneOf'"},{name:"literal",value:"'before'"},{name:"literal",value:"'after'"},{name:"literal",value:"'between'"},{name:"literal",value:"'addConditionText'"},{name:"literal",value:"'addConditionGroupText'"},{name:"literal",value:"'addSubgroupText'"},{name:"literal",value:"'conditionText'"},{name:"literal",value:"'propertyText'"},{name:"literal",value:"'operatorText'"},{name:"literal",value:"'valueText'"},{name:"literal",value:"'connectorText'"},{name:"literal",value:"'conditionRowText'"},{name:"literal",value:"'conditionRowGroupText'"},{name:"literal",value:"'removeConditionText'"},{name:"literal",value:"'addConditionRowText'"},{name:"literal",value:"'startText'"},{name:"literal",value:"'endText'"},{name:"literal",value:"'clearSearchText'"},{name:"literal",value:"'actionsText'"},{name:"literal",value:"'then'"},{name:"literal",value:"'removeActionText'"},{name:"literal",value:"'addActionText'"},{name:"literal",value:"'invalidText'"},{name:"literal",value:"'invalidNumberWarnText'"},{name:"literal",value:"'conditionBuilderText'"},{name:"literal",value:"'actionSectionText'"},{name:"literal",value:"'conditionHeadingText'"},{name:"literal",value:"'addPropertyText'"},{name:"literal",value:"'addOperatorText'"},{name:"literal",value:"'addValueText'"},{name:"literal",value:"'conditionBuilderHierarchicalText'"}]},name:"id"}],return:{name:"string"}}},description:`Optional prop if you want to pass translation to the texts used . Otherwise this will the defined defaults.
This callback function will receive the message id and you need to return the corresponding text for that id.
The message key will be one of [   "ifText",   "addConditionText",   "addConditionGroupText",   "addSubgroupText",   "conditionText",   "propertyText",   "operatorText",   "valueText",   "connectorText",   "conditionRowText",   "removeConditionText",   "addConditionRowText",   "startText",   "endText",   "clearSearchText",   "actionsText",   "then",   "removeActionText",   "addActionText",   "invalidText",   "invalidNumberWarnText"
]`,type:{name:"func"}},statementConfigCustom:{required:!1,tsType:{name:"Array",elements:[{name:"intersection",raw:`Item & {
  connector: 'and' | 'or';
  secondaryLabel?: string;
}`,elements:[{name:"signature",type:"object",raw:"{ id: string; label: string }",signature:{properties:[{key:"id",value:{name:"string",required:!0}},{key:"label",value:{name:"string",required:!0}}]}},{name:"signature",type:"object",raw:`{
  connector: 'and' | 'or';
  secondaryLabel?: string;
}`,signature:{properties:[{key:"connector",value:{name:"union",raw:"'and' | 'or'",elements:[{name:"literal",value:"'and'"},{name:"literal",value:"'or'"}],required:!0}},{key:"secondaryLabel",value:{name:"string",required:!1}}]}}]}],raw:"statementConfig[]"},description:""},conditionBuilderRef:{required:!1,tsType:{name:"ForwardedRef",elements:[{name:"HTMLDivElement"}],raw:"ForwardedRef<HTMLDivElement>"},description:"ref of condition builder",type:{name:"object"}}},composes:["PropsWithChildren"]};const ae={ifText:"if",unlessText:"unless",excl_if:"excl.if",and:"and",or:"or",is:"is",ifAll:"if all",ifAny:"if any",unlessAll:"unless all",unlessAny:"unless any",greater:"is greater than",greaterEqual:"is greater than or equal to",lower:"is lower than",lowerEqual:"is lower than or equal to",startsWith:"starts with",endsWith:"ends with",contains:"contains",oneOf:"is one of",before:"is before",after:"is after",between:"is between",addConditionText:"Add condition",addConditionGroupText:"Add condition group",addSubgroupText:"Add subgroup",conditionText:"Condition",propertyText:"Property",operatorText:"Operator",valueText:"Value",connectorText:"Connector",conditionRowText:"Condition row",conditionRowGroupText:"Condition row group",removeConditionText:"Delete condition",addConditionRowText:"Add condition row",startText:"Start",endText:"End",clearSearchText:"Clear search input",actionsText:"Actions",then:"then",removeActionText:"Remove Action",addActionText:"Add action",invalidText:"Incomplete",invalidNumberWarnText:"Invalid number, must be 0 or greater",conditionBuilderText:"Condition Builder",actionSectionText:"Action Section",conditionHeadingText:"Condition",addPropertyText:"Add property",addOperatorText:"Add operator",addValueText:"Add value",conditionBuilderHierarchicalText:"Condition Builder Hierarchical"},B=(n,a)=>{const{translateWithId:i}=p.useContext(H);return n.map(o=>(a?.[o]&&(o=a[o]),i?.(o)?i(o):ae[o]?ae[o]:o))},xn=(n,a,i)=>{document.activeElement.closest(`.${r}__popover`)?.querySelector('[role="dialog"]')||Sn(n,a,i)},_n=(n,a,i,o)=>{En(n)||In(n,i?.current,a,o)},En=n=>!["Escape"].includes(n.key)&&n.target.closest(`.${r}__item-date`),In=(n,a,i,o)=>{const s=n.key,l=An(n,"shiftKey"),y=a.querySelector("ul")?.dataset.multiSelect,m=a.querySelectorAll('[role="option"]')?.length;let h=[];if(s==="Escape"&&(o?.(),Q(n,i),n.preventDefault(),n.stopPropagation()),m)switch(s){case"ArrowUp":n.preventDefault(),a.querySelectorAll('[role="option"]').forEach((d,f,q)=>{be(d,f,q,null,null,i)}),Array.from(n.target.closest("ul")?.querySelectorAll("li")??[]).indexOf(n.target)===1&&(a.querySelector(`.${r}__popover-content-wrapper`).scrollTop=0);break;case"ArrowDown":n.preventDefault(),a.querySelectorAll('[role="option"]').forEach((d,f,q)=>{ve(d,f,q,null,null,i)});break;case"Tab":h=[...Array.from(a.querySelectorAll(`.${r}__selectAll-button,[role="searchbox"]`)),a.querySelector('[role="option"]')],h.forEach((d,f,q)=>{l?be(d,f,q,!0,!0,i):ve(d,f,q,!0,!0,i)}),n.preventDefault();break;case" ":y==="true"&&(document.activeElement.type!=="button"&&document.activeElement?.click(),n.preventDefault());break;case"Enter":document.activeElement.type!=="button"&&(Q(n,i),document.activeElement?.click());break}else s==="Enter"&&!l&&document.activeElement.type!=="button"&&(o?.(),Q(n,i))},Sn=(n,a,i)=>{switch(n.key){case"ArrowRight":if(n.preventDefault(),i==W){let o=Array.from(n.target.closest('[role="row"]')?.querySelectorAll('[role="gridcell"] button'));if(o.length===1)n.target=n.target.closest('[role="row"]'),De(n,a,i);else if(n.target.getAttribute("role")=="row")M(o[0],a);else{let s=o.indexOf(n.target);s<o.length-1&&X(o[s+1],a)}}else Ge(n,a);break;case"ArrowLeft":if(n.preventDefault(),i==W){if(n.target.getAttribute("role")!=="row"){let o=Array.from(n.target.closest('[role="row"]')?.querySelectorAll('[role="gridcell"] button')),s=o.indexOf(n.target);if(s>0)X(o[s-1],a);else{let l=n.target.closest('[role="row"]');M(l,a)}}}else Ge(n,a);break;case"ArrowUp":case"ArrowDown":n.preventDefault(),i==W?De(n,a,i):Nn(n,a,i);break;case"Enter":document.activeElement?.querySelectorAll("button")?.length===1&&document.activeElement?.querySelectorAll("button")[0]?.click();break}},Ae=n=>Array.from(n.current?.querySelectorAll('[role="row"]')),Ue=(n,a)=>Ae(a).findIndex(o=>o.contains(n)),Nn=(n,a,i)=>{const o=Ae(a),s=Ue(n.target,a);Je(n,s,o,i,a)},De=(n,a,i)=>{const o=Ae(a),s=Ue(n.target,a);let l=s;n.target.getAttribute("role")=="row"?(["ArrowDown","ArrowRight"].includes(n.key)?l+=1:n.key==="ArrowUp"&&(l-=1),l<0?l=0:l>=o.length&&(l=o.length-1),l!==s&&M(o[l],a)):Je(n,s,o,i,a)},Je=(n,a,i,o,s)=>{let l=a;n.key==="ArrowUp"&&(l=a==0?a:a-1),n.key==="ArrowDown"&&(l=a===i.length-1?i.length-1:a+1);const y=i[l],m=n.target.dataset.name;y?.querySelector(`[data-name="${m}"]`)?M(y?.querySelector(`[data-name="${m}"]`),s):o===W&&M(y,s)},Ge=(n,a)=>{a.current.querySelectorAll('[role="gridcell"] button').forEach((i,o,s)=>{n.key==="ArrowRight"?ve(i,o,s,null,null,a):be(i,o,s,null,null,a)})},L=({children:n,className:a,label:i,renderIcon:o,title:s,type:l,showToolTip:y,condition:m,popOverClassName:h,config:d,renderChildren:f,onChange:q,description:b,...C})=>{const k=p.useRef(null),[v,c]=p.useState(!1),{conditionBuilderRef:w,statementConfigCustom:u}=p.useContext(H),O={ifAll:ae.ifText,ifAny:ae.ifText,unlessAll:ae.unlessText,unlessAny:ae.unlessText};u?.forEach(_=>{O[_.id]=_.label});const[N,P,A,E,D,R]=B(["invalidText","addConditionText","addPropertyText","addOperatorText","addValueText",i],O),I=()=>{const{property:_,operator:$}=m||{};return i==="INVALID"||C["data-name"]==="propertyField"&&_==="INVALID"||C["data-name"]==="operatorField"&&$==="INVALID"?{propertyLabel:N,isInvalid:!0}:{isInvalid:!1,propertyLabel:C["data-name"]=="valueField"&&l?kn(l,i,d):R}},{propertyLabel:S,isInvalid:F}=I();p.useEffect(()=>{if(m){const _=C["data-name"];(m.popoverToOpen&&_!==m.popoverToOpen||_=="valueField"&&l==="option"&&!he(m,d))&&K(),m.popoverToOpen==_&&setTimeout(()=>{ne()})}else K()},[m,i]),p.useEffect(()=>{if(v&&k.current){const _=k?.current?.querySelector("input,textarea");_&&setTimeout(()=>_.focus(),0)}},[k,v]);const Y=()=>{(C["data-name"]==="propertyField"&&!m?.property||C["data-name"]==="operatorField"&&!m?.operator||C["data-name"]==="valueField"&&!m?.value)&&q?.("INVALID")},K=()=>{v&&Y(),c(!1)},ne=()=>c(!0),T=()=>{(n||f)&&c(!v)},g=_=>{_n(_,w,k,K),_.key==="Escape"&&Y()},x=_=>_&&d?.operators?.find($=>$.id===_),V=()=>d?.operators&&C["data-name"]==="operatorField"?x(S)?.label??E:S||(C["data-name"]==="propertyField"?A:C["data-name"]==="operatorField"?E:C["data-name"]==="valueField"?D:P);return t.createElement(un,{open:v,isTabTip:!0,role:"gridcell",className:`${h} ${r}__popover`,ref:k,onRequestClose:K},t.createElement(J,{label:V(),hideLabel:!i,onClick:T,className:a,"aria-haspopup":!0,"aria-expanded":v,renderIcon:o||(i==null?We:void 0),showToolTip:y,isInvalid:F,description:b,...C}),v&&t.createElement(mn,{className:`${r}__popover-content-wrapper`,role:"dialog","aria-label":s,onKeyDown:g},t.createElement(vn,null,t.createElement(we,null,t.createElement(Te,{className:`${r}__item__title`},s),t.createElement("div",{className:`${r}__popover-content`},f?f(k,K):n)))))};L.propTypes={children:e.node,className:e.string,condition:e.object,config:e.object,label:e.oneOfType([e.string,e.array,e.object]),onChange:e.func,popOverClassName:e.string,renderChildren:e.func,renderIcon:e.oneOfType([e.func,e.object]),showToolTip:e.bool,title:e.string,type:e.string};L.__docgenInfo={description:"",methods:[],displayName:"ConditionBuilderItem",props:{className:{required:!1,tsType:{name:"string"},description:"Provide an optional class to be applied to the containing node.",type:{name:"string"}},label:{required:!1,tsType:{name:"union",raw:"string | Option | Option[]",elements:[{name:"string"},{name:"intersection",raw:"Item & { icon?: CarbonIconType }",elements:[{name:"signature",type:"object",raw:"{ id: string; label: string }",signature:{properties:[{key:"id",value:{name:"string",required:!0}},{key:"label",value:{name:"string",required:!0}}]}},{name:"signature",type:"object",raw:"{ icon?: CarbonIconType }",signature:{properties:[{key:"icon",value:{name:"CarbonIconType",required:!1}}]}}]},{name:"Array",elements:[{name:"intersection",raw:"Item & { icon?: CarbonIconType }",elements:[{name:"signature",type:"object",raw:"{ id: string; label: string }",signature:{properties:[{key:"id",value:{name:"string",required:!0}},{key:"label",value:{name:"string",required:!0}}]}},{name:"signature",type:"object",raw:"{ icon?: CarbonIconType }",signature:{properties:[{key:"icon",value:{name:"CarbonIconType",required:!1}}]}}]}],raw:"Option[]"}]},description:"text to be displayed in the field",type:{name:"union",value:[{name:"string"},{name:"array"},{name:"object"}]}},renderIcon:{required:!1,tsType:{name:"CarbonIconType"},description:"Optional prop to allow overriding the icon rendering.",type:{name:"union",value:[{name:"func"},{name:"object"}]}},title:{required:!1,tsType:{name:"string"},description:"title of the popover",type:{name:"string"}},showToolTip:{required:!1,tsType:{name:"boolean"},description:"show tool tip",type:{name:"bool"}},popOverClassName:{required:!1,tsType:{name:"string"},description:"class name for popover",type:{name:"string"}},type:{required:!1,tsType:{name:"string"},description:"input type",type:{name:"string"}},description:{required:!1,tsType:{name:"string"},description:""},condition:{required:!1,tsType:{name:"intersection",raw:"Action & Condition",elements:[{name:"signature",type:"object",raw:"{ id?: string | number; label?: string }",signature:{properties:[{key:"id",value:{name:"union",raw:"string | number",elements:[{name:"string"},{name:"number"}],required:!1}},{key:"label",value:{name:"string",required:!1}}]}},{name:"signature",type:"object",raw:`{
  property?: string;
  operator?: Operator | '' | 'INVALID';
  value?: string | Option[] | Option;
  id?: string | number;
  popoverToOpen?: string;
}`,signature:{properties:[{key:"property",value:{name:"string",required:!1}},{key:"operator",value:{name:"union",raw:"Operator | '' | 'INVALID'",elements:[{name:"union",raw:`| LogicalOperator
| StatementOperator
| CoreOperator
| NumberOperator
| StringOperator
| ArrayOperator
| OptionOperator
| DateOperator`,elements:[{name:"union",raw:"'and' | 'or'",elements:[{name:"literal",value:"'and'"},{name:"literal",value:"'or'"}]},{name:"union",raw:"'ifAll' | 'ifAny' | 'unlessAll' | 'unlessAny'",elements:[{name:"literal",value:"'ifAll'"},{name:"literal",value:"'ifAny'"},{name:"literal",value:"'unlessAll'"},{name:"literal",value:"'unlessAny'"}]},{name:"literal",value:"'is'"},{name:"union",raw:"'greater' | 'greaterEqual' | 'lower' | 'lowerEqual'",elements:[{name:"literal",value:"'greater'"},{name:"literal",value:"'greaterEqual'"},{name:"literal",value:"'lower'"},{name:"literal",value:"'lowerEqual'"}]},{name:"union",raw:"'startsWith' | 'endsWith'",elements:[{name:"literal",value:"'startsWith'"},{name:"literal",value:"'endsWith'"}]},{name:"literal",value:"'contains'"},{name:"literal",value:"'oneOf'"},{name:"union",raw:"'before' | 'after'",elements:[{name:"literal",value:"'before'"},{name:"literal",value:"'after'"}]}]},{name:"literal",value:"''"},{name:"literal",value:"'INVALID'"}],required:!1}},{key:"value",value:{name:"union",raw:"string | Option[] | Option",elements:[{name:"string"},{name:"Array",elements:[{name:"intersection",raw:"Item & { icon?: CarbonIconType }",elements:[{name:"signature",type:"object",raw:"{ id: string; label: string }",signature:{properties:[{key:"id",value:{name:"string",required:!0}},{key:"label",value:{name:"string",required:!0}}]}},{name:"signature",type:"object",raw:"{ icon?: CarbonIconType }",signature:{properties:[{key:"icon",value:{name:"CarbonIconType",required:!1}}]}}]}],raw:"Option[]"},{name:"intersection",raw:"Item & { icon?: CarbonIconType }",elements:[{name:"signature",type:"object",raw:"{ id: string; label: string }",signature:{properties:[{key:"id",value:{name:"string",required:!0}},{key:"label",value:{name:"string",required:!0}}]}},{name:"signature",type:"object",raw:"{ icon?: CarbonIconType }",signature:{properties:[{key:"icon",value:{name:"CarbonIconType",required:!1}}]}}]}],required:!1}},{key:"id",value:{name:"union",raw:"string | number",elements:[{name:"string"},{name:"number"}],required:!1}},{key:"popoverToOpen",value:{name:"string",required:!1}}]}}]},description:"current condition state object",type:{name:"object"}},config:{required:!1,tsType:{name:"union",raw:`| PropertyConfigOption['config']
| PropertyConfigTextArea['config']
| PropertyConfigText['config']
| PropertyConfigNumber['config']
| PropertyConfigDate['config']
| PropertyConfigTime['config']
| PropertyConfigCustom['config']`,elements:[{name:"signature",raw:"PropertyConfigOption['config']"},{name:"PropertyConfigTextArea['config']",raw:"PropertyConfigTextArea['config']"},{name:"PropertyConfigText['config']",raw:"PropertyConfigText['config']"},{name:"PropertyConfigNumber['config']",raw:"PropertyConfigNumber['config']"},{name:"intersection",raw:"PropertyConfigDate['config']"},{name:"signature",raw:"PropertyConfigTime['config']"},{name:"signature",raw:"PropertyConfigCustom['config']"}]},description:"this is the config object again the current property from inputConfig",type:{name:"object"}},renderChildren:{required:!1,tsType:{name:"signature",type:"function",raw:`(
  ref: Ref<HTMLDivElement | null>,
  closePopover: () => void
) => ReactNode`,signature:{arguments:[{type:{name:"Ref",elements:[{name:"union",raw:"HTMLDivElement | null",elements:[{name:"HTMLDivElement"},{name:"null"}]}],raw:"Ref<HTMLDivElement | null>"},name:"ref"},{type:{name:"signature",type:"function",raw:"() => void",signature:{arguments:[],return:{name:"void"}}},name:"closePopover"}],return:{name:"ReactNode"}}},description:"callback prop that returns the jsx for children",type:{name:"func"}},onChange:{required:!1,tsType:{name:"signature",type:"function",raw:"(val: string) => void",signature:{arguments:[{type:{name:"string"},name:"val"}],return:{name:"void"}}},description:"callback to update the current condition of the state tree",type:{name:"func"}},tabIndex:{required:!1,tsType:{name:"number"},description:""},onMouseEnter:{required:!1,tsType:{name:"signature",type:"function",raw:"(e: React.MouseEvent<HTMLButtonElement>) => void",signature:{arguments:[{type:{name:"ReactMouseEvent",raw:"React.MouseEvent<HTMLButtonElement>",elements:[{name:"HTMLButtonElement"}]},name:"e"}],return:{name:"void"}}},description:""},onMouseLeave:{required:!1,tsType:{name:"signature",type:"function",raw:"(e: React.MouseEvent<HTMLButtonElement>) => void",signature:{arguments:[{type:{name:"ReactMouseEvent",raw:"React.MouseEvent<HTMLButtonElement>",elements:[{name:"HTMLButtonElement"}]},name:"e"}],return:{name:"void"}}},description:""},onFocus:{required:!1,tsType:{name:"ReactFocusEventHandler",raw:"React.FocusEventHandler<HTMLButtonElement>",elements:[{name:"HTMLButtonElement"}]},description:""},onBlur:{required:!1,tsType:{name:"ReactFocusEventHandler",raw:"React.FocusEventHandler<HTMLButtonElement>",elements:[{name:"HTMLButtonElement"}]},description:""},children:{description:"provide the contents of the popover",type:{name:"node"},required:!1}},composes:["PropsWithChildren"]};const ee=({conditionState:n={},config:a={},onChange:i,closePopover:o})=>{const{popOverSearchThreshold:s}=p.useContext(H),l=p.useRef(null),[y,m]=B(["propertyText","clearSearchText"]),{conditionBuilderRef:h}=p.useContext(H),d=a.options,[f,q]=p.useState(""),b=n.value,C=f?d?.filter(u=>u.label?.toLowerCase().includes(f.toLowerCase())):d;p.useEffect(()=>{if(l.current){const u=l.current?.querySelector("input, button,li");u&&u.focus()}},[d]);const k=(u,O)=>{i(O.id,u)},v=u=>{const{value:O}=u.target;q(O)},c=()=>n.label?n.label:y,w=u=>t.createElement("div",{className:`${r}__statement_wrapper`},t.createElement("div",null,u.label," (",u.connector,")"),t.createElement("div",null,u.secondaryLabel));if(d)return t.createElement("div",{className:`${r}__item-option`,ref:l},s&&d.length>s&&t.createElement("div",{className:`${r}__item-option__search`},t.createElement(ze,{size:"sm",labelText:m,closeButtonLabelText:m,onChange:v,onKeyDown:u=>{Ze(u,h,o)}})),t.createElement("ul",{"aria-label":c(),role:"listbox"},C?.map(u=>{const O=b===u.id,N=u.icon;return t.createElement("li",{tabIndex:0,key:u.id,role:"option","aria-selected":O,className:`${r}__item-option__option`,onKeyUp:()=>!1,onClick:P=>k(P,u)},t.createElement("div",{className:`${r}__item-option__option-content`},t.createElement("span",{className:`${r}__item-option__option-label`},N&&t.createElement(N,null),a.isStatement?w(u):u.label),O&&t.createElement(Fe,{className:`${r}__checkmark`})))})))};ee.propTypes={conditionState:e.object,config:e.object,onChange:e.func};ee.__docgenInfo={description:"",methods:[],displayName:"ItemOption",props:{conditionState:{required:!1,tsType:{name:"signature",type:"object",raw:`{
  label?: string;
  value?: string;
}`,signature:{properties:[{key:"label",value:{name:"string",required:!1}},{key:"value",value:{name:"string",required:!1}}]}},description:"current condition object",defaultValue:{value:"{}",computed:!1},type:{name:"object"}},config:{required:!1,tsType:{name:"intersection",raw:`{ options?: option[] | statementConfig[] } & {
  isStatement?: boolean;
}`,elements:[{name:"signature",type:"object",raw:"{ options?: option[] | statementConfig[] }",signature:{properties:[{key:"options",value:{name:"union",raw:"option[] | statementConfig[]",elements:[{name:"Array",elements:[{name:"intersection",raw:"Item & { icon?: CarbonIconType }",elements:[{name:"signature",type:"object",raw:"{ id: string; label: string }",signature:{properties:[{key:"id",value:{name:"string",required:!0}},{key:"label",value:{name:"string",required:!0}}]}},{name:"signature",type:"object",raw:"{ icon?: CarbonIconType }",signature:{properties:[{key:"icon",value:{name:"CarbonIconType",required:!1}}]}}]}],raw:"option[]"},{name:"Array",elements:[{name:"intersection",raw:`Item & {
  connector: 'and' | 'or';
  secondaryLabel?: string;
}`,elements:[{name:"signature",type:"object",raw:"{ id: string; label: string }",signature:{properties:[{key:"id",value:{name:"string",required:!0}},{key:"label",value:{name:"string",required:!0}}]}},{name:"signature",type:"object",raw:`{
  connector: 'and' | 'or';
  secondaryLabel?: string;
}`,signature:{properties:[{key:"connector",value:{name:"union",raw:"'and' | 'or'",elements:[{name:"literal",value:"'and'"},{name:"literal",value:"'or'"}],required:!0}},{key:"secondaryLabel",value:{name:"string",required:!1}}]}}]}],raw:"statementConfig[]"}],required:!1}}]}},{name:"signature",type:"object",raw:`{
  isStatement?: boolean;
}`,signature:{properties:[{key:"isStatement",value:{name:"boolean",required:!1}}]}}]},description:"current config object that this property is part of",defaultValue:{value:"{}",computed:!1},type:{name:"object"}},onChange:{required:!1,tsType:{name:"signature",type:"function",raw:"(value: string, e: Event) => void",signature:{arguments:[{type:{name:"string"},name:"value"},{type:{name:"Event"},name:"e"}],return:{name:"void"}}},description:"callback to update state oin date change",type:{name:"func"}},closePopover:{required:!1,tsType:{name:"signature",type:"function",raw:"() => void",signature:{arguments:[],return:{name:"void"}}},description:""}}};const de=()=>{const[n,a,i,o,s,l,y,m,h,d,f,q,b,C,k,v,c,w]=B(["ifAll","ifAny","unlessAll","unlessAny","and","or","is","greater","greaterEqual","lower","lowerEqual","startsWith","endsWith","contains","oneOf","before","after","between"]),{statementConfigCustom:u}=p.useContext(H);return{statementConfig:u??[{id:"ifAll",connector:"and",label:n,secondaryLabel:"(a && b)"},{id:"ifAny",connector:"or",label:a,secondaryLabel:"(a || b)"},{id:"unlessAll",connector:"and",label:i,secondaryLabel:"! (a && b)"},{id:"unlessAny",connector:"or",label:o,secondaryLabel:"! (a || b)"}],connectorConfig:[{label:s,id:"and"},{label:l,id:"or"}],operatorConfig:[{label:y,id:"is",type:"all"},{label:m,id:"greater",type:"number"},{label:h,id:"greaterEqual",type:"number"},{label:d,id:"lower",type:"number"},{label:f,id:"lowerEqual",type:"number"},{label:q,id:"startsWith",type:"text,textarea"},{label:b,id:"endsWith",type:"text,textarea"},{label:C,id:"contains",type:"text,textarea"},{label:k,id:"oneOf",type:"option"},{label:v,id:"before",type:"date,time"},{label:c,id:"after",type:"date,time"},{label:w,id:"between",type:"date"}]}},se=({operator:n,className:a,onChange:i,...o})=>{const{variant:s,conditionBuilderRef:l}=p.useContext(H),[y]=B(["connectorText"]),{connectorConfig:m}=de(),h=p.useCallback((b,C)=>{C?b.classList.add("hoveredConnector"):b.classList.remove("hoveredConnector")},[]),d=b=>{const C=b?.currentTarget.closest(".eachGroup");h(C,!0)},f=b=>{const C=b?.currentTarget.closest(".eachGroup");h(C,!1)},q=(b,C)=>{i?.(b),Q(C,l)};return s==W?t.createElement("span",{className:`${a} ${r}__connector--disabled`},t.createElement(J,{label:n})):t.createElement(L,{label:n,title:y,"data-name":"connectorField",onMouseEnter:d,onMouseLeave:f,onFocus:d,onBlur:f,...o,popOverClassName:a,className:`${r}__connector-button`},t.createElement(ee,{config:{options:m},conditionState:{value:n,label:y},onChange:q}))};se.propTypes={className:e.string,onChange:e.func,operator:e.string};se.__docgenInfo={description:"",methods:[],displayName:"ConditionConnector",props:{operator:{required:!1,tsType:{name:"string"},description:"string that defines the connector operator (and/or)",type:{name:"string"}},className:{required:!1,tsType:{name:"string"},description:"Provide an optional class to be applied to the containing node.",type:{name:"string"}},onChange:{required:!1,tsType:{name:"signature",type:"function",raw:"(op: string) => void",signature:{arguments:[{type:{name:"string"},name:"op"}],return:{name:"void"}}},description:"callback to update the current condition of the state tree",type:{name:"func"}}}};const ke=({conditionState:n,config:a,onChange:i})=>{const[o]=B(["invalidNumberWarnText"]),s=(m,{value:h})=>{h!==""&&!isNaN(h)&&l(h)?i(`${h} ${a.unit??""}`):i("INVALID")},l=m=>!(a.max!==void 0&&a.min===void 0&&m>a.max||a.min!==void 0&&a.max===void 0&&m<a.min||a.max!==void 0&&a.min!==void 0&&(m>a.max||m<a.min)),y=()=>n.value?.split(" ")?.[0]??"";return t.createElement("div",{className:`${r}__item-number`},t.createElement(Tn,{...a,label:n.property,hideLabel:!0,id:n.property?.replace(/\s/g,""),invalidText:o,allowEmpty:!0,onChange:s,defaultValue:y()}))};ke.propTypes={conditionState:e.object,config:e.object,onChange:e.func};ke.__docgenInfo={description:"",methods:[],displayName:"ConditionBuilderItemNumber",props:{conditionState:{required:!1,tsType:{name:"signature",type:"object",raw:`{
  property?: string;
  operator?: Operator | '' | 'INVALID';
  value?: string | Option[] | Option;
  id?: string | number;
  popoverToOpen?: string;
}`,signature:{properties:[{key:"property",value:{name:"string",required:!1}},{key:"operator",value:{name:"union",raw:"Operator | '' | 'INVALID'",elements:[{name:"union",raw:`| LogicalOperator
| StatementOperator
| CoreOperator
| NumberOperator
| StringOperator
| ArrayOperator
| OptionOperator
| DateOperator`,elements:[{name:"union",raw:"'and' | 'or'",elements:[{name:"literal",value:"'and'"},{name:"literal",value:"'or'"}]},{name:"union",raw:"'ifAll' | 'ifAny' | 'unlessAll' | 'unlessAny'",elements:[{name:"literal",value:"'ifAll'"},{name:"literal",value:"'ifAny'"},{name:"literal",value:"'unlessAll'"},{name:"literal",value:"'unlessAny'"}]},{name:"literal",value:"'is'"},{name:"union",raw:"'greater' | 'greaterEqual' | 'lower' | 'lowerEqual'",elements:[{name:"literal",value:"'greater'"},{name:"literal",value:"'greaterEqual'"},{name:"literal",value:"'lower'"},{name:"literal",value:"'lowerEqual'"}]},{name:"union",raw:"'startsWith' | 'endsWith'",elements:[{name:"literal",value:"'startsWith'"},{name:"literal",value:"'endsWith'"}]},{name:"literal",value:"'contains'"},{name:"literal",value:"'oneOf'"},{name:"union",raw:"'before' | 'after'",elements:[{name:"literal",value:"'before'"},{name:"literal",value:"'after'"}]}]},{name:"literal",value:"''"},{name:"literal",value:"'INVALID'"}],required:!1}},{key:"value",value:{name:"union",raw:"string | Option[] | Option",elements:[{name:"string"},{name:"Array",elements:[{name:"intersection",raw:"Item & { icon?: CarbonIconType }",elements:[{name:"signature",type:"object",raw:"{ id: string; label: string }",signature:{properties:[{key:"id",value:{name:"string",required:!0}},{key:"label",value:{name:"string",required:!0}}]}},{name:"signature",type:"object",raw:"{ icon?: CarbonIconType }",signature:{properties:[{key:"icon",value:{name:"CarbonIconType",required:!1}}]}}]}],raw:"Option[]"},{name:"intersection",raw:"Item & { icon?: CarbonIconType }",elements:[{name:"signature",type:"object",raw:"{ id: string; label: string }",signature:{properties:[{key:"id",value:{name:"string",required:!0}},{key:"label",value:{name:"string",required:!0}}]}},{name:"signature",type:"object",raw:"{ icon?: CarbonIconType }",signature:{properties:[{key:"icon",value:{name:"CarbonIconType",required:!1}}]}}]}],required:!1}},{key:"id",value:{name:"union",raw:"string | number",elements:[{name:"string"},{name:"number"}],required:!1}},{key:"popoverToOpen",value:{name:"string",required:!1}}]}},description:"current condition object",type:{name:"object"}},config:{required:!1,tsType:{name:"PropertyConfigNumber['config']",raw:"PropertyConfigNumber['config']"},description:"current config object that this property is part of",type:{name:"object"}},onChange:{required:!1,tsType:{name:"signature",type:"function",raw:"(value: string) => void",signature:{arguments:[{type:{name:"string"},name:"value"}],return:{name:"void"}}},description:"callback to update state oin date change",type:{name:"func"}}}};const ue=({conditionState:n,onChange:a,config:i,type:o})=>{const s={...i,hideLabel:!0,value:te(n.value)?n.value:"",id:n.property?.replace(/\s/g,""),onChange:l=>{a(l.target.value)},labelText:n.property};return t.createElement("div",{className:`${r}__item-text`},o=="textarea"?t.createElement(Cn,{...s}):t.createElement(hn,{...s}))};ue.propTypes={conditionState:e.object,config:e.object,onChange:e.func,type:e.string};ue.__docgenInfo={description:"",methods:[],displayName:"ConditionBuilderItemText",props:{conditionState:{required:!1,tsType:{name:"signature",type:"object",raw:`{
  property?: string;
  operator?: Operator | '' | 'INVALID';
  value?: string | Option[] | Option;
  id?: string | number;
  popoverToOpen?: string;
}`,signature:{properties:[{key:"property",value:{name:"string",required:!1}},{key:"operator",value:{name:"union",raw:"Operator | '' | 'INVALID'",elements:[{name:"union",raw:`| LogicalOperator
| StatementOperator
| CoreOperator
| NumberOperator
| StringOperator
| ArrayOperator
| OptionOperator
| DateOperator`,elements:[{name:"union",raw:"'and' | 'or'",elements:[{name:"literal",value:"'and'"},{name:"literal",value:"'or'"}]},{name:"union",raw:"'ifAll' | 'ifAny' | 'unlessAll' | 'unlessAny'",elements:[{name:"literal",value:"'ifAll'"},{name:"literal",value:"'ifAny'"},{name:"literal",value:"'unlessAll'"},{name:"literal",value:"'unlessAny'"}]},{name:"literal",value:"'is'"},{name:"union",raw:"'greater' | 'greaterEqual' | 'lower' | 'lowerEqual'",elements:[{name:"literal",value:"'greater'"},{name:"literal",value:"'greaterEqual'"},{name:"literal",value:"'lower'"},{name:"literal",value:"'lowerEqual'"}]},{name:"union",raw:"'startsWith' | 'endsWith'",elements:[{name:"literal",value:"'startsWith'"},{name:"literal",value:"'endsWith'"}]},{name:"literal",value:"'contains'"},{name:"literal",value:"'oneOf'"},{name:"union",raw:"'before' | 'after'",elements:[{name:"literal",value:"'before'"},{name:"literal",value:"'after'"}]}]},{name:"literal",value:"''"},{name:"literal",value:"'INVALID'"}],required:!1}},{key:"value",value:{name:"union",raw:"string | Option[] | Option",elements:[{name:"string"},{name:"Array",elements:[{name:"intersection",raw:"Item & { icon?: CarbonIconType }",elements:[{name:"signature",type:"object",raw:"{ id: string; label: string }",signature:{properties:[{key:"id",value:{name:"string",required:!0}},{key:"label",value:{name:"string",required:!0}}]}},{name:"signature",type:"object",raw:"{ icon?: CarbonIconType }",signature:{properties:[{key:"icon",value:{name:"CarbonIconType",required:!1}}]}}]}],raw:"Option[]"},{name:"intersection",raw:"Item & { icon?: CarbonIconType }",elements:[{name:"signature",type:"object",raw:"{ id: string; label: string }",signature:{properties:[{key:"id",value:{name:"string",required:!0}},{key:"label",value:{name:"string",required:!0}}]}},{name:"signature",type:"object",raw:"{ icon?: CarbonIconType }",signature:{properties:[{key:"icon",value:{name:"CarbonIconType",required:!1}}]}}]}],required:!1}},{key:"id",value:{name:"union",raw:"string | number",elements:[{name:"string"},{name:"number"}],required:!1}},{key:"popoverToOpen",value:{name:"string",required:!1}}]}},description:"current condition object",type:{name:"object"}},config:{required:!1,tsType:{name:"union",raw:"PropertyConfigText | PropertyConfigTextArea",elements:[{name:"PropertyConfigText"},{name:"PropertyConfigTextArea"}]},description:"config of the current property",type:{name:"object"}},onChange:{required:!1,tsType:{name:"signature",type:"function",raw:"(value: string) => void",signature:{arguments:[{type:{name:"string"},name:"value"}],return:{name:"void"}}},description:"callback to update state oin date change",type:{name:"func"}},type:{required:!1,tsType:{name:"union",raw:"'textarea' | 'text'",elements:[{name:"literal",value:"'textarea'"},{name:"literal",value:"'text'"}]},description:"current input type",type:{name:"string"}}}};const Oe=({conditionState:n,onChange:a,parentRef:i,config:o})=>{const s=p.useRef(null),[l,y]=B(["startText","endText"]),[m,h]=p.useState(),d=o.dateFormat||"m/d/Y",{conditionBuilderRef:f}=p.useContext(H),q=n.operator=="between"||he(n,o)?"range":"single";p.useEffect(()=>{q==="range"&&h(b(n.value)??void 0)},[]);const b=v=>{const c=s?.current?.calendar;if(!c||!v)return null;const[w,u]=v.split(" - "),O=[];return w&&w!=="INVALID"&&O.push(c.parseDate(w,d)),u&&u!=="INVALID"&&O.push(c.parseDate(u,d)),O.length?O:null},C=(v,c,w)=>{let u=c;q==="range"&&v.length===2&&(u=`${w.formatDate(v[0],d)} - ${w.formatDate(v[1],d)}`),a(u||"INVALID")},k=v=>{if(v.key==="Enter"){const c=s?.current?.calendar;c&&C(c.selectedDates,v.target.value,c),Q(v,f)}};return t.createElement("div",{className:`${r}__item-date `},q=="single"&&t.createElement(Re,{...o,ref:s,datePickerType:"single",value:n.value,onClose:C,onKeyPress:k,appendTo:i?.current},t.createElement(ye,{id:"datePicker",placeholder:"dd/mm/yyyy",labelText:n.property})),q=="range"&&t.createElement(Re,{...o,ref:s,datePickerType:q,onClose:C,onKeyPress:k,value:m,appendTo:i?.current},t.createElement(ye,{id:"datePickerStart",placeholder:"dd/mm/yyyy",labelText:l}),t.createElement(ye,{id:"datePickerEnd",placeholder:"dd/mm/yyyy",labelText:y})))};Oe.propTypes={conditionState:e.object,config:e.object,onChange:e.func,parentRef:e.object};Oe.__docgenInfo={description:"",methods:[],displayName:"ConditionBuilderItemDate",props:{conditionState:{description:"current condition object",type:{name:"object"},required:!1},config:{description:"",type:{name:"object"},required:!1},onChange:{description:"callback to update state oin date change",type:{name:"func"},required:!1},parentRef:{description:"reference to the popover node",type:{name:"object"},required:!1}}};const xe=({onChange:n,config:a,conditionState:i})=>{const o=c=>{const w={time:0,dayZone:1,timeZone:2};return i.value!=="INVALID"?i.value?.split(" ")[w[c]]??void 0:void 0},s=o("time"),l=o("dayZone"),y=o("timeZone"),[m,h]=p.useState(s),[d,f]=p.useState(l??"AM"),[q,b]=p.useState(y??a?.timeZones?.[0]);p.useEffect(()=>{const c=`${m??""} ${d??""} ${q??""}`;n(m?c:"INVALID")},[m,d,q]);const C=c=>{b(c.target.value)},k=c=>{f(c.target.value)},v=c=>{h(c.target.value)};return t.createElement("div",{className:`${r}__item-time`},t.createElement(cn,{defaultValue:s,id:"time-picker",labelText:"Select a time",onChange:v},t.createElement(He,{id:"time-picker-day-zone",defaultValue:l,onChange:k},t.createElement(fe,{value:"AM",text:"AM"}),t.createElement(fe,{value:"PM",text:"PM"})),t.createElement(He,{id:"time-picker-time-zone",defaultValue:y,onChange:C},a?.timeZones?.map((c,w)=>t.createElement(fe,{key:w,value:c,text:c})))))};xe.propTypes={conditionState:e.object,config:e.object,onChange:e.func};xe.__docgenInfo={description:"",methods:[],displayName:"ConditionBuilderItemTime",props:{conditionState:{description:"current condition object",type:{name:"object"},required:!1},config:{description:"current config object that this property is part of",type:{name:"object"},required:!1},onChange:{description:"callback to update state oin date change",type:{name:"func"},required:!1}}};const ie=({className:n,onClick:a,addConditionSubGroupHandler:i,showConditionSubGroupPreviewHandler:o,hideConditionSubGroupPreviewHandler:s,showConditionPreviewHandler:l,hideConditionPreviewHandler:y,enableSubGroup:m,buttonLabel:h,tabIndex:d,group:f})=>{const[q,b,C]=B(["addConditionText","addConditionRowText","addSubgroupText"]),{onAddItem:k,rootState:v}=p.useContext(H),c=()=>{const{preventAdd:A}=k?.({type:"condition",state:v,group:f})??{};A||(y?.(),a())},w=()=>m?{onMouseEnter:l,onMouseLeave:y,onFocus:l,onBlur:y}:{},u=()=>({onMouseEnter:o,onMouseLeave:s,onFocus:o,onBlur:s}),O=()=>{const{preventAdd:A}=k?.({type:"subgroup",state:v,group:f})??{};A||i?.()},N=()=>h||(m?void 0:b),P=m?{role:"gridcell"}:{};return t.createElement("div",{className:`${n} ${r}__add-button-wrapper`,role:m?"none":"gridcell","aria-label":N()},t.createElement(J,{renderIcon:wn,onClick:c,...w(),wrapperProps:P,className:`${r}__add-button`,hideLabel:!0,"data-name":"addButton",label:h??q,tabIndex:d,wrapperClassName:`${r}__add-condition-wrapper`}),m&&t.createElement(J,{renderIcon:Ke,onClick:O,className:Z(`${r}__add-condition-sub-group`),hideLabel:!0,label:C,wrapperProps:P,wrapperClassName:`${r}__add-condition-sub-group-wrapper ${r}__gap-left`,...u()}))};ie.propTypes={addConditionSubGroupHandler:e.func,buttonLabel:e.string,className:e.string,enableSubGroup:e.bool,hideConditionPreviewHandler:e.func,hideConditionSubGroupPreviewHandler:e.func,onClick:e.func,showConditionPreviewHandler:e.func,showConditionSubGroupPreviewHandler:e.func,tabIndex:e.number};ie.__docgenInfo={description:"",methods:[],displayName:"ConditionBuilderAdd",props:{className:{required:!1,tsType:{name:"string"},description:"Provide an optional class to be applied to the containing node.",type:{name:"string"}},onClick:{required:!1,tsType:{name:"signature",type:"function",raw:"() => void",signature:{arguments:[],return:{name:"void"}}},description:"callback triggered on click of add button",type:{name:"func"}},addConditionSubGroupHandler:{required:!1,tsType:{name:"signature",type:"function",raw:"() => void",signature:{arguments:[],return:{name:"void"}}},description:"handler for hiding sub group preview",type:{name:"func"}},showConditionSubGroupPreviewHandler:{required:!1,tsType:{name:"signature",type:"function",raw:"() => void",signature:{arguments:[],return:{name:"void"}}},description:"",type:{name:"func"}},hideConditionSubGroupPreviewHandler:{required:!1,tsType:{name:"signature",type:"function",raw:"() => void",signature:{arguments:[],return:{name:"void"}}},description:"",type:{name:"func"}},showConditionPreviewHandler:{required:!1,tsType:{name:"signature",type:"function",raw:"() => void",signature:{arguments:[],return:{name:"void"}}},description:"",type:{name:"func"}},hideConditionPreviewHandler:{required:!1,tsType:{name:"signature",type:"function",raw:"() => void",signature:{arguments:[],return:{name:"void"}}},description:"handler for hiding sub group preview",type:{name:"func"}},enableSubGroup:{required:!1,tsType:{name:"boolean"},description:"boolean to enable sub groups for the tree variant",type:{name:"bool"}},buttonLabel:{required:!1,tsType:{name:"string"},description:"tooltip label for plus button",type:{name:"string"}},tabIndex:{required:!1,tsType:{name:"number"},description:"Tab index",type:{name:"number"}},group:{required:!1,tsType:{name:"signature",type:"object",raw:`{
  conditions?: (ConditionGroup | Condition)[];
  groupOperator?: LogicalOperator;
  statement?: StatementOperator;
  id: string;
}`,signature:{properties:[{key:"conditions",value:{name:"Array",elements:[{name:"unknown"}],raw:"(ConditionGroup | Condition)[]",required:!1}},{key:"groupOperator",value:{name:"union",raw:"'and' | 'or'",elements:[{name:"literal",value:"'and'"},{name:"literal",value:"'or'"}],required:!1}},{key:"statement",value:{name:"union",raw:"'ifAll' | 'ifAny' | 'unlessAll' | 'unlessAny'",elements:[{name:"literal",value:"'ifAll'"},{name:"literal",value:"'ifAny'"},{name:"literal",value:"'unlessAll'"},{name:"literal",value:"'unlessAny'"}],required:!1}},{key:"id",value:{name:"string",required:!0}}]}},description:""}}};const pe=({conditionState:n={},config:a={},onChange:i,closePopover:o})=>{const s=he(n,a),{popOverSearchThreshold:l,getOptions:y,rootState:m}=p.useContext(H),[h,d]=B(["propertyText","clearSearchText"]),{conditionBuilderRef:f}=p.useContext(H),q=p.useRef(null),[b,C]=p.useState(a.options),[k,v]=p.useState(""),c=b?.filter(A=>A.label.toLowerCase().includes(k.toLowerCase())),w=Array.isArray(n.value)?n.value:n.value!==void 0?[n.value]:[];p.useEffect(()=>{!b&&y&&(async()=>{const E=await y(m,n);E?.length>0&&Object.keys(E[0]).includes("label")&&Object.keys(E[0]).includes("id")&&C(E)})()},[]),p.useEffect(()=>{if(q.current){const A=q.current.querySelector("input, button,li");A&&A?.focus()}},[b]);const u=A=>{A.currentTarget.dataset.selectedAll=="false"?i(void 0):i(b)},O=A=>{const{value:E}=A.target;v(E)},N=(A,E,D)=>{const R=w.filter(I=>I!=="INVALID");if(s)if(D){const I=R.filter(S=>S.id!==E.id);i(I.length>0?I:void 0)}else i([...R,E]);else i(E,A);A.target instanceof SVGElement&&A.stopPropagation()},P=()=>n.label?n.label:n.property?n.property:h;return b?t.createElement("div",{className:`${r}__item-option`,ref:q},l&&b.length>l&&t.createElement("div",{className:`${r}__item-option__search`},t.createElement(ze,{size:"sm",labelText:d,closeButtonLabelText:d,onChange:O,onKeyDown:A=>{Ze(A,f,o)}})),s&&t.createElement("div",{className:`${r}__multiselectSelectionStatusContainer`},t.createElement("label",null,w.length,"/",b.length," Selected"),t.createElement(Ve,{kind:"ghost",size:"sm","data-selected-all":`${w.length==0}`,onClick:u,className:`${r}__selectAll-button`},w.length==0?"Select all":"Deselect all")),t.createElement("ul",{"aria-label":P(),role:"listbox","data-multi-select":s},c?.map(A=>{const E=w.map(R=>R.id).includes(A.id),D=A.icon;return t.createElement("li",{tabIndex:0,key:A.id,role:"option","aria-selected":E,className:`${r}__item-option__option`,onKeyUp:()=>!1,onClick:R=>N(R,A,E)},t.createElement("div",{className:`${r}__item-option__option-content`},s?t.createElement(t.Fragment,null,t.createElement("span",{className:`${r}__option-check-box`},E?t.createElement(dn,null):t.createElement(pn,null)),t.createElement("span",{className:`${r}__item-option__option-label`},A.label),D&&t.createElement("span",{className:`${r}__option-icon`},t.createElement(D,null))):t.createElement(t.Fragment,null,t.createElement("span",{className:`${r}__item-option__option-label`},D&&t.createElement(D,null),A.label),E&&t.createElement(Fe,{className:`${r}__checkmark`}))))}))):t.createElement(gn,null)};pe.propTypes={conditionState:e.object,config:e.object,onChange:e.func};pe.__docgenInfo={description:"",methods:[],displayName:"ItemOptionForValueField",props:{conditionState:{required:!1,tsType:{name:"intersection",raw:"Condition & { label?: string }",elements:[{name:"signature",type:"object",raw:`{
  property?: string;
  operator?: Operator | '' | 'INVALID';
  value?: string | Option[] | Option;
  id?: string | number;
  popoverToOpen?: string;
}`,signature:{properties:[{key:"property",value:{name:"string",required:!1}},{key:"operator",value:{name:"union",raw:"Operator | '' | 'INVALID'",elements:[{name:"union",raw:`| LogicalOperator
| StatementOperator
| CoreOperator
| NumberOperator
| StringOperator
| ArrayOperator
| OptionOperator
| DateOperator`,elements:[{name:"union",raw:"'and' | 'or'",elements:[{name:"literal",value:"'and'"},{name:"literal",value:"'or'"}]},{name:"union",raw:"'ifAll' | 'ifAny' | 'unlessAll' | 'unlessAny'",elements:[{name:"literal",value:"'ifAll'"},{name:"literal",value:"'ifAny'"},{name:"literal",value:"'unlessAll'"},{name:"literal",value:"'unlessAny'"}]},{name:"literal",value:"'is'"},{name:"union",raw:"'greater' | 'greaterEqual' | 'lower' | 'lowerEqual'",elements:[{name:"literal",value:"'greater'"},{name:"literal",value:"'greaterEqual'"},{name:"literal",value:"'lower'"},{name:"literal",value:"'lowerEqual'"}]},{name:"union",raw:"'startsWith' | 'endsWith'",elements:[{name:"literal",value:"'startsWith'"},{name:"literal",value:"'endsWith'"}]},{name:"literal",value:"'contains'"},{name:"literal",value:"'oneOf'"},{name:"union",raw:"'before' | 'after'",elements:[{name:"literal",value:"'before'"},{name:"literal",value:"'after'"}]}]},{name:"literal",value:"''"},{name:"literal",value:"'INVALID'"}],required:!1}},{key:"value",value:{name:"union",raw:"string | Option[] | Option",elements:[{name:"string"},{name:"Array",elements:[{name:"intersection",raw:"Item & { icon?: CarbonIconType }",elements:[{name:"signature",type:"object",raw:"{ id: string; label: string }",signature:{properties:[{key:"id",value:{name:"string",required:!0}},{key:"label",value:{name:"string",required:!0}}]}},{name:"signature",type:"object",raw:"{ icon?: CarbonIconType }",signature:{properties:[{key:"icon",value:{name:"CarbonIconType",required:!1}}]}}]}],raw:"Option[]"},{name:"intersection",raw:"Item & { icon?: CarbonIconType }",elements:[{name:"signature",type:"object",raw:"{ id: string; label: string }",signature:{properties:[{key:"id",value:{name:"string",required:!0}},{key:"label",value:{name:"string",required:!0}}]}},{name:"signature",type:"object",raw:"{ icon?: CarbonIconType }",signature:{properties:[{key:"icon",value:{name:"CarbonIconType",required:!1}}]}}]}],required:!1}},{key:"id",value:{name:"union",raw:"string | number",elements:[{name:"string"},{name:"number"}],required:!1}},{key:"popoverToOpen",value:{name:"string",required:!1}}]}},{name:"signature",type:"object",raw:"{ label?: string }",signature:{properties:[{key:"label",value:{name:"string",required:!1}}]}}]},description:"current condition object",defaultValue:{value:"{}",computed:!1},type:{name:"object"}},config:{required:!1,tsType:{name:"signature",raw:"PropertyConfigOption['config']"},description:"current config object that this property is part of",defaultValue:{value:"{}",computed:!1},type:{name:"object"}},onChange:{required:!1,tsType:{name:"signature",type:"function",raw:"(value: any, e?: Event) => void",signature:{arguments:[{type:{name:"any"},name:"value"},{type:{name:"Event"},name:"e"}],return:{name:"void"}}},description:"callback to update state oin date change",type:{name:"func"}},closePopover:{required:!1,tsType:{name:"signature",type:"function",raw:"() => void",signature:{arguments:[],return:{name:"void"}}},description:""}}};const me=n=>{const{onRemove:a,onChange:i,condition:o={},conjunction:s,onConnectorOperatorChange:l,isStatement:y,group:m,onStatementChange:h,conditionIndex:d,addConditionHandler:f,addConditionSubGroupHandler:q,aria:b,hideConditionSubGroupPreviewHandler:C,showConditionSubGroupPreviewHandler:k,hideConditionPreviewHandler:v,showConditionPreviewHandler:c,isLastCondition:w}=n,{property:u,value:O,operator:N}=o,{inputConfig:P,variant:A,conditionBuilderRef:E}=p.useContext(H),[D,R]=p.useState(!1),[I,S]=p.useState(!1),[F,Y,K,ne,T]=B(["conditionRowText","conditionText","propertyText","operatorText","removeConditionText"]),{statementConfig:g,operatorConfig:x}=de(),V=j=>P?.properties?.find(z=>z.id==j)??{},{icon:_,type:$,config:G,label:re,description:ge}=V(u),Qe={text:ue,number:ke,date:Oe,time:xe,option:pe,custom:G?.component,textarea:ue}[$],Xe=()=>{S(!0)},Se=()=>{S(!1)},en=(j,z)=>{Q(z,E),h?.(j)},Ne=j=>{i({...o,property:j,operator:void 0,value:"",popoverToOpen:te(j)?"operatorField":""})},je=j=>{i({...o,operator:j,value:void 0,popoverToOpen:te(j)?"valueField":""})},Pe=j=>{const z={...o};delete z.popoverToOpen,i({...z,value:j})},Le=()=>{R(!0)},$e=()=>{R(!1)},nn=(j,z)=>A===W?!0:w(j,z),tn=()=>G?.operators?G?.operators:x.filter(j=>j.type.indexOf($)!=-1||j.type=="all"),an=()=>A==W?{"aria-level":b.level,"aria-posinset":b.posinset,"aria-setsize":b.setsize}:{},rn=(j,z)=>t.createElement(Qe,{conditionState:{property:u,operator:N,value:O},onChange:Pe,config:G,"data-name":"valueField",parentRef:j,type:$,closePopover:z}),on=(j,z)=>t.createElement(ee,{conditionState:{value:u,label:K},onChange:Ne,config:{options:P?.properties},closePopover:z});return t.createElement("div",{className:Z(`${r}__condition-block`,{[`${r}__condition__deletion-preview`]:D},{[`${r}__gap-bottom`]:A==W},{[`${r}__gap ${r}__gap-bottom`]:A==Ce},{[`${r}__condition--interacting`]:I}),role:"row","aria-label":F,...an(),tabIndex:-1,onMouseEnter:Xe,onMouseLeave:Se,onBlur:Se},s?t.createElement(se,{className:`${r}__gap`,operator:s,onChange:j=>l?.(j)}):"",y&&t.createElement(L,{label:m.statement,title:Y,"data-name":"connectorField",popOverClassName:`${r}__gap`,className:`${r}__statement-button`,tabIndex:0},t.createElement(ee,{conditionState:{value:m.statement,label:Y},onChange:en,config:{options:g,isStatement:!0}})),t.createElement(L,{label:re??o?.property,title:K,renderIcon:_??void 0,className:`${r}__property-field`,"data-name":"propertyField",condition:o,type:$,description:ge,onChange:Ne,renderChildren:on}),te(u)&&t.createElement(L,{label:N,title:ne,"data-name":"operatorField",condition:o,type:$,config:G,onChange:je},t.createElement(ee,{config:{options:tn()},conditionState:{value:N,label:ne},onChange:je})),te(u)&&te(N)&&t.createElement(L,{label:O,type:$,title:re,showToolTip:!0,"data-name":"valueField",condition:o,config:G,onChange:Pe,renderChildren:rn}),t.createElement("span",{role:"gridcell","aria-label":T},t.createElement(J,{hideLabel:!0,label:T,onClick:a,onMouseEnter:Le,onMouseLeave:$e,onFocus:Le,onBlur:$e,renderIcon:Me,className:`${r}__close-condition`,"data-name":"closeCondition",wrapperClassName:`${r}__close-condition-wrapper`})),nn(d,m.conditions)&&t.createElement(ie,{onClick:()=>{f?.(d)},addConditionSubGroupHandler:()=>{q?.(d)},showConditionSubGroupPreviewHandler:k,hideConditionSubGroupPreviewHandler:C,enableSubGroup:A==W,showConditionPreviewHandler:c,hideConditionPreviewHandler:v,className:`${r}__gap ${r}__gap-left`,group:m}))};me.propTypes={addConditionHandler:e.func,addConditionSubGroupHandler:e.func,aria:e.object,condition:e.object,conditionIndex:e.number,conjunction:e.string,group:e.object,hideConditionPreviewHandler:e.func,hideConditionSubGroupPreviewHandler:e.func,isLastCondition:e.func,isStatement:e.bool,onChange:e.func,onConnectorOperatorChange:e.func,onRemove:e.func,onStatementChange:e.func,showConditionPreviewHandler:e.func,showConditionSubGroupPreviewHandler:e.func,state:e.object};me.__docgenInfo={description:"",methods:[],displayName:"ConditionBlock",props:{condition:{required:!1,tsType:{name:"signature",type:"object",raw:`{
  property?: string;
  operator?: Operator | '' | 'INVALID';
  value?: string | Option[] | Option;
  id?: string | number;
  popoverToOpen?: string;
}`,signature:{properties:[{key:"property",value:{name:"string",required:!1}},{key:"operator",value:{name:"union",raw:"Operator | '' | 'INVALID'",elements:[{name:"union",raw:`| LogicalOperator
| StatementOperator
| CoreOperator
| NumberOperator
| StringOperator
| ArrayOperator
| OptionOperator
| DateOperator`,elements:[{name:"union",raw:"'and' | 'or'",elements:[{name:"literal",value:"'and'"},{name:"literal",value:"'or'"}]},{name:"union",raw:"'ifAll' | 'ifAny' | 'unlessAll' | 'unlessAny'",elements:[{name:"literal",value:"'ifAll'"},{name:"literal",value:"'ifAny'"},{name:"literal",value:"'unlessAll'"},{name:"literal",value:"'unlessAny'"}]},{name:"literal",value:"'is'"},{name:"union",raw:"'greater' | 'greaterEqual' | 'lower' | 'lowerEqual'",elements:[{name:"literal",value:"'greater'"},{name:"literal",value:"'greaterEqual'"},{name:"literal",value:"'lower'"},{name:"literal",value:"'lowerEqual'"}]},{name:"union",raw:"'startsWith' | 'endsWith'",elements:[{name:"literal",value:"'startsWith'"},{name:"literal",value:"'endsWith'"}]},{name:"literal",value:"'contains'"},{name:"literal",value:"'oneOf'"},{name:"union",raw:"'before' | 'after'",elements:[{name:"literal",value:"'before'"},{name:"literal",value:"'after'"}]}]},{name:"literal",value:"''"},{name:"literal",value:"'INVALID'"}],required:!1}},{key:"value",value:{name:"union",raw:"string | Option[] | Option",elements:[{name:"string"},{name:"Array",elements:[{name:"intersection",raw:"Item & { icon?: CarbonIconType }",elements:[{name:"signature",type:"object",raw:"{ id: string; label: string }",signature:{properties:[{key:"id",value:{name:"string",required:!0}},{key:"label",value:{name:"string",required:!0}}]}},{name:"signature",type:"object",raw:"{ icon?: CarbonIconType }",signature:{properties:[{key:"icon",value:{name:"CarbonIconType",required:!1}}]}}]}],raw:"Option[]"},{name:"intersection",raw:"Item & { icon?: CarbonIconType }",elements:[{name:"signature",type:"object",raw:"{ id: string; label: string }",signature:{properties:[{key:"id",value:{name:"string",required:!0}},{key:"label",value:{name:"string",required:!0}}]}},{name:"signature",type:"object",raw:"{ icon?: CarbonIconType }",signature:{properties:[{key:"icon",value:{name:"CarbonIconType",required:!1}}]}}]}],required:!1}},{key:"id",value:{name:"union",raw:"string | number",elements:[{name:"string"},{name:"number"}],required:!1}},{key:"popoverToOpen",value:{name:"string",required:!1}}]}},description:"",type:{name:"object"}},onRemove:{required:!1,tsType:{name:"signature",type:"function",raw:"(e: React.MouseEvent<HTMLButtonElement>) => void",signature:{arguments:[{type:{name:"ReactMouseEvent",raw:"React.MouseEvent<HTMLButtonElement>",elements:[{name:"HTMLButtonElement"}]},name:"e"}],return:{name:"void"}}},description:"callback for Remove a condition",type:{name:"func"}},onChange:{required:!1,tsType:{name:"signature",type:"function",raw:"(condition: Condition) => void",signature:{arguments:[{type:{name:"signature",type:"object",raw:`{
  property?: string;
  operator?: Operator | '' | 'INVALID';
  value?: string | Option[] | Option;
  id?: string | number;
  popoverToOpen?: string;
}`,signature:{properties:[{key:"property",value:{name:"string",required:!1}},{key:"operator",value:{name:"union",raw:"Operator | '' | 'INVALID'",elements:[{name:"union",raw:`| LogicalOperator
| StatementOperator
| CoreOperator
| NumberOperator
| StringOperator
| ArrayOperator
| OptionOperator
| DateOperator`,elements:[{name:"union",raw:"'and' | 'or'",elements:[{name:"literal",value:"'and'"},{name:"literal",value:"'or'"}]},{name:"union",raw:"'ifAll' | 'ifAny' | 'unlessAll' | 'unlessAny'",elements:[{name:"literal",value:"'ifAll'"},{name:"literal",value:"'ifAny'"},{name:"literal",value:"'unlessAll'"},{name:"literal",value:"'unlessAny'"}]},{name:"literal",value:"'is'"},{name:"union",raw:"'greater' | 'greaterEqual' | 'lower' | 'lowerEqual'",elements:[{name:"literal",value:"'greater'"},{name:"literal",value:"'greaterEqual'"},{name:"literal",value:"'lower'"},{name:"literal",value:"'lowerEqual'"}]},{name:"union",raw:"'startsWith' | 'endsWith'",elements:[{name:"literal",value:"'startsWith'"},{name:"literal",value:"'endsWith'"}]},{name:"literal",value:"'contains'"},{name:"literal",value:"'oneOf'"},{name:"union",raw:"'before' | 'after'",elements:[{name:"literal",value:"'before'"},{name:"literal",value:"'after'"}]}]},{name:"literal",value:"''"},{name:"literal",value:"'INVALID'"}],required:!1}},{key:"value",value:{name:"union",raw:"string | Option[] | Option",elements:[{name:"string"},{name:"Array",elements:[{name:"intersection",raw:"Item & { icon?: CarbonIconType }",elements:[{name:"signature",type:"object",raw:"{ id: string; label: string }",signature:{properties:[{key:"id",value:{name:"string",required:!0}},{key:"label",value:{name:"string",required:!0}}]}},{name:"signature",type:"object",raw:"{ icon?: CarbonIconType }",signature:{properties:[{key:"icon",value:{name:"CarbonIconType",required:!1}}]}}]}],raw:"Option[]"},{name:"intersection",raw:"Item & { icon?: CarbonIconType }",elements:[{name:"signature",type:"object",raw:"{ id: string; label: string }",signature:{properties:[{key:"id",value:{name:"string",required:!0}},{key:"label",value:{name:"string",required:!0}}]}},{name:"signature",type:"object",raw:"{ icon?: CarbonIconType }",signature:{properties:[{key:"icon",value:{name:"CarbonIconType",required:!1}}]}}]}],required:!1}},{key:"id",value:{name:"union",raw:"string | number",elements:[{name:"string"},{name:"number"}],required:!1}},{key:"popoverToOpen",value:{name:"string",required:!1}}]}},name:"condition"}],return:{name:"void"}}},description:"callback to update the current condition of the state tree",type:{name:"func"}},onConnectorOperatorChange:{required:!1,tsType:{name:"signature",type:"function",raw:"(op: string) => void",signature:{arguments:[{type:{name:"string"},name:"op"}],return:{name:"void"}}},description:"callback to handle the connector(and/or) change",type:{name:"func"}},onStatementChange:{required:!1,tsType:{name:"signature",type:"function",raw:"(v: string) => void",signature:{arguments:[{type:{name:"string"},name:"v"}],return:{name:"void"}}},description:"callback to handle the statement(if/ excl.if) change",type:{name:"func"}},addConditionHandler:{required:!1,tsType:{name:"signature",type:"function",raw:"(conditionIndex: number) => void",signature:{arguments:[{type:{name:"number"},name:"conditionIndex"}],return:{name:"void"}}},description:"callback to add a new condition",type:{name:"func"}},addConditionSubGroupHandler:{required:!1,tsType:{name:"signature",type:"function",raw:"(conditionIndex: number) => void",signature:{arguments:[{type:{name:"number"},name:"conditionIndex"}],return:{name:"void"}}},description:"callback to add a new condition subgroup",type:{name:"func"}},hideConditionSubGroupPreviewHandler:{required:!1,tsType:{name:"signature",type:"function",raw:"() => void",signature:{arguments:[],return:{name:"void"}}},description:"handler for hiding sub group preview",type:{name:"func"}},showConditionSubGroupPreviewHandler:{required:!1,tsType:{name:"signature",type:"function",raw:"() => void",signature:{arguments:[],return:{name:"void"}}},description:"handler for showing sub group preview",type:{name:"func"}},hideConditionPreviewHandler:{required:!1,tsType:{name:"signature",type:"function",raw:"() => void",signature:{arguments:[],return:{name:"void"}}},description:"handler for hiding sub group preview",type:{name:"func"}},showConditionPreviewHandler:{required:!1,tsType:{name:"signature",type:"function",raw:"() => void",signature:{arguments:[],return:{name:"void"}}},description:"handler for showing add condition preview",type:{name:"func"}},conjunction:{required:!1,tsType:{name:"union",raw:"'and' | 'or'",elements:[{name:"literal",value:"'and'"},{name:"literal",value:"'or'"}]},description:"string that decides to show the condition connector",type:{name:"string"}},isStatement:{required:!1,tsType:{name:"boolean"},description:"boolean that decides to show the statement(if/ excl.if)",type:{name:"bool"}},group:{required:!1,tsType:{name:"signature",type:"object",raw:`{
  conditions?: (ConditionGroup | Condition)[];
  groupOperator?: LogicalOperator;
  statement?: StatementOperator;
  id: string;
}`,signature:{properties:[{key:"conditions",value:{name:"Array",elements:[{name:"unknown"}],raw:"(ConditionGroup | Condition)[]",required:!1}},{key:"groupOperator",value:{name:"union",raw:"'and' | 'or'",elements:[{name:"literal",value:"'and'"},{name:"literal",value:"'or'"}],required:!1}},{key:"statement",value:{name:"union",raw:"'ifAll' | 'ifAny' | 'unlessAll' | 'unlessAny'",elements:[{name:"literal",value:"'ifAll'"},{name:"literal",value:"'ifAny'"},{name:"literal",value:"'unlessAll'"},{name:"literal",value:"'unlessAny'"}],required:!1}},{key:"id",value:{name:"string",required:!0}}]}},description:"object that hold the current group object where is condition is part of",type:{name:"object"}},conditionIndex:{required:!1,tsType:{name:"number"},description:"",type:{name:"number"}},aria:{required:!1,tsType:{name:"signature",type:"object",raw:`{
  level: number;
  posinset: number;
  setsize?: number;
}`,signature:{properties:[{key:"level",value:{name:"number",required:!0}},{key:"posinset",value:{name:"number",required:!0}},{key:"setsize",value:{name:"number",required:!1}}]}},description:"object hold aria attributes",type:{name:"object"}},isLastCondition:{required:!1,tsType:{name:"signature",type:"function",raw:`(
  index: number,
  conditions: (ConditionGroup | Condition)[]
) => void`,signature:{arguments:[{type:{name:"number"},name:"index"},{type:{name:"Array",elements:[{name:"unknown"}],raw:"(ConditionGroup | Condition)[]"},name:"conditions"}],return:{name:"void"}}},description:"",type:{name:"func"}},state:{description:"object that hold the current condition",type:{name:"object"},required:!1}}};const oe=({previewType:n,group:a,colorIndex:i})=>{const[o,s]=p.useState(!1),[l,y,m,h]=B(["valueText","operatorText","propertyText","ifText"]);p.useEffect(()=>{s(!0)},[]);const d=()=>t.createElement("div",{className:`${r}__preview-condition`},t.createElement(L,{label:l,renderIcon:qn}),t.createElement(L,{label:y}),t.createElement(L,{label:m}));return t.createElement(t.Fragment,null,n=="newGroup"&&t.createElement(t.Fragment,null,t.createElement("div",{className:Z([`${r}__group__row ${r}__group-preview `,{[`${r}__group-preview-animate`]:o}])},t.createElement(L,{className:`${r}__statement-button`,label:a.groupOperator})),t.createElement("div",{"data-color-index":i,"aria-hidden":!0,className:Z([`${r}__group ${r}__condition-wrapper ${r}__group-preview ${r}__group-wrapper `,{[`${r}__group-preview-animate`]:o}])},t.createElement("div",{className:`${r}__gap`},t.createElement(L,{className:`${r}__statement-button`,label:h})),d())),n=="subGroup"&&t.createElement("div",{className:Z([`${r}__group__row ${r}__group-preview ${r}__gap-bottom`,{[`${r}__group-preview-animate`]:o}])},t.createElement("div",{className:`${r}__condition-block  ${r}__gap`},t.createElement(L,{label:a.groupOperator,className:`${r}__statement-button`,popOverClassName:`${r}__gap`}),t.createElement("div",{className:`${r}__group ${r}__condition-wrapper`},t.createElement(se,{className:`${r}__gap ${r}__groupConnector`,operator:h}),d()))),n=="condition"&&t.createElement("div",{className:Z([`${r}__group__row ${r}__group-preview ${r}__gap-bottom`,{[`${r}__group-preview-animate`]:o}])},t.createElement("div",{className:`${r}__condition-block  ${r}__gap`},t.createElement(L,{label:a.groupOperator,className:`${r}__statement-button`,popOverClassName:`${r}__gap`}),d())))};oe.propTypes={colorIndex:e.number,group:e.object,previewType:e.oneOf(["condition","subGroup","newGroup"])};oe.__docgenInfo={description:"",methods:[],displayName:"ConditionPreview",props:{previewType:{required:!1,tsType:{name:"union",raw:"'newGroup' | 'subGroup' | 'condition'",elements:[{name:"literal",value:"'newGroup'"},{name:"literal",value:"'subGroup'"},{name:"literal",value:"'condition'"}]},description:"type of review to be displayed",type:{name:"enum",value:[{value:"'condition'",computed:!1},{value:"'subGroup'",computed:!1},{value:"'newGroup'",computed:!1}]}},group:{required:!1,tsType:{name:"signature",type:"object",raw:`{
  conditions?: (ConditionGroup | Condition)[];
  groupOperator?: LogicalOperator;
  statement?: StatementOperator;
  id: string;
}`,signature:{properties:[{key:"conditions",value:{name:"Array",elements:[{name:"unknown"}],raw:"(ConditionGroup | Condition)[]",required:!1}},{key:"groupOperator",value:{name:"union",raw:"'and' | 'or'",elements:[{name:"literal",value:"'and'"},{name:"literal",value:"'or'"}],required:!1}},{key:"statement",value:{name:"union",raw:"'ifAll' | 'ifAny' | 'unlessAll' | 'unlessAny'",elements:[{name:"literal",value:"'ifAll'"},{name:"literal",value:"'ifAny'"},{name:"literal",value:"'unlessAll'"},{name:"literal",value:"'unlessAny'"}],required:!1}},{key:"id",value:{name:"string",required:!0}}]}},description:"current conditional group",type:{name:"object"}},colorIndex:{required:!1,tsType:{name:"number"},description:"index of the color for next group",type:{name:"number"}}}};const ce=({group:n,aria:a,onRemove:i,onChange:o,className:s})=>{const[l,y,m]=B(["conditionBuilderGroupText","conditionText","conditionBuilderText"]),{statementConfig:h}=de(),{variant:d,conditionBuilderRef:f}=p.useContext(H),[q,b]=p.useState(-1),[C,k]=p.useState(-1);p.useState(!1);const v=p.useRef(null),c=(T,g,x)=>{if(n&&n.conditions&&n.conditions.length>1)if(d==W?P(g):N(g,x),w(n.conditions,T)){const V=n.conditions.filter(_=>T!==_.id);if((V?.[0]).conditions){const _=V[0];V.splice(0,1,..._?.conditions)}o?.({...n,conditions:V})}else{const V=n?.conditions?.reduce((_,$)=>{const G=$;return G.conditions?_.concat(G.conditions):_},[]);o?.({...n,conditions:V})}else i?.(g)},w=(T,g)=>T.find(x=>!x.conditions&&x.id!==g),u=(T,g)=>{const x=[...n?.conditions?n.conditions.slice(0,g):[],T,...n?.conditions?n.conditions.slice(g+1):[]];o?.({...n,conditions:x,id:n?.id??U()})},O=T=>{const g={property:void 0,operator:"",value:"",popoverToOpen:"propertyField",id:U()};o?.({...n,conditions:[...n.conditions?n.conditions.slice(0,T+1):[],g,...n.conditions?n.conditions.slice(T+1):[]]})},N=(T,g)=>{const x=T.currentTarget.closest(`.${r}__group`)?.querySelectorAll('[data-name="closeCondition"]');g==x.length-1?M(x[g-1],f):M(x[g+1],f)},P=T=>{const g=T.currentTarget?.closest('[role="row"]')?.getAttribute("aria-level"),x=T.currentTarget?.closest('[role="row"]')?.getAttribute("aria-posinset"),V=v.current?.querySelector(`[aria-level="${g}"][aria-posinset="${Number(x)+1}"]`),_=v.current?.querySelector(`[aria-level="${g}"][aria-posinset="${Number(x)-1}"]`);if(V?.classList.contains(`${r}__condition-block`))M(V?.querySelector('[data-name="closeCondition"]'),f);else if(_?.classList.contains(`${r}__condition-block`))M(_?.querySelector('[data-name="closeCondition"]'),f);else{const $=v.current?.querySelectorAll(`[aria-level="${Number(g)-1}"][role="row"]`),G=v.current?.querySelector(`[aria-level="${Number(g)+1}"][role="row"]`);if(G){const re={ariaLevel:Number(G.ariaLevel)-1,ariaPosInSet:G.ariaPosInSet};setTimeout(()=>{const ge=v.current?.querySelector(`[role="row"][aria-level="${re.ariaLevel}"][aria-posinset="${re.ariaPosInSet}"]`);M(ge?.querySelector('[data-name="closeCondition"]'),f)},0)}else $?.length&&$.length>1&&M($[$.length-2]?.querySelector('[data-name="closeCondition"]'),f)}},A=T=>{o({...n,conditions:[...n.conditions?n.conditions.slice(0,T+1):[],{statement:"ifAll",groupOperator:"and",conditions:[{property:void 0,operator:"",value:"",popoverToOpen:"propertyField",id:U()}],id:U()},...n.conditions?n.conditions.slice(T+1):[]]})},E=(T,g)=>T+1>=g.length||g.length-1!=T&&g[T+1].conditions,D=T=>{k(T)},R=()=>{k(-1)},I=T=>{b(T)},S=()=>{b(-1)},F=T=>{const g=h.find(x=>x.id==T)?.connector;o({...n,groupOperator:g,statement:T})},Y=T=>{o({...n,groupOperator:T})},K=()=>t.createElement("div",{className:`${s}  eachGroup`},t.createElement("div",{className:`${r}__condition-wrapper`,role:"grid","aria-label":m},n?.conditions?.map((T,g)=>t.createElement("div",{key:T.id,className:`${r}__group-wrapper`},t.createElement(me,{conjunction:g>0?n.groupOperator:void 0,aria:{level:a.level+1,posinset:g+1,setsize:n?.conditions?.length},isStatement:g==0,condition:T,group:n,conditionIndex:g,onChange:x=>{u(x,g)},addConditionHandler:O,onRemove:x=>{c(T.id,x,g)},onConnectorOperatorChange:Y,onStatementChange:F,isLastCondition:E}))))),ne=()=>t.createElement("div",{className:`${s} ${r}__condition-wrapper`,role:a.level===1?"rowgroup":void 0,"aria-label":a.level==1?l:void 0,ref:v},t.createElement("div",{tabIndex:0,role:"row","aria-level":a.level,"aria-posinset":a.posinset,"aria-setsize":a.setsize},t.createElement(L,{label:n.statement,title:y,"data-name":"connectorField",popOverClassName:`${r}__gap`,className:`${r}__statement-button`},t.createElement(ee,{conditionState:{value:n.statement,label:y},onChange:(T,g)=>{Q(g,f),F(T)},config:{options:h,isStatement:!0}}))),n?.conditions?.map((T,g)=>t.createElement(p.Fragment,{key:T.id},T.conditions?t.createElement("div",{className:Z(`${r}__condition-block subgroup  ${r}__gap`,{[`${r}__gap-bottom`]:n&&n.conditions&&n.conditions.length<g+1},{})},t.createElement(se,{className:`${r}__gap ${r}__gap-bottom ${r}__groupConnector`,operator:n.groupOperator,"aria-hidden":!0}),t.createElement(ce,{aria:{level:a.level+1,posinset:g+1,setsize:n.conditions?.length??0},className:`${r}__group`,group:T,onChange:x=>{u(x,g)},onRemove:x=>{c(T.id,x,g)}})):t.createElement("div",null,t.createElement(me,{conjunction:g>0?n.groupOperator:void 0,aria:{level:a.level+1,posinset:g+1,setsize:n.conditions?.length??0},isStatement:!1,condition:T,group:n,conditionIndex:g,addConditionHandler:O,addConditionSubGroupHandler:A,onChange:x=>{u(x,g)},onRemove:x=>{c(T.id,x,g)},onConnectorOperatorChange:Y,onStatementChange:F,showConditionSubGroupPreviewHandler:()=>{D(g)},hideConditionSubGroupPreviewHandler:R,showConditionPreviewHandler:()=>{I(g)},hideConditionPreviewHandler:S,isLastCondition:E})),g==C&&t.createElement(oe,{previewType:"subGroup",group:n}),g==q&&t.createElement(oe,{previewType:"condition",group:n}))));return t.createElement(t.Fragment,null,d==W&&ne(),d==Ce&&K())};ce.propTypes={aria:e.object,className:e.string,group:e.object,onChange:e.func,onRemove:e.func};ce.__docgenInfo={description:"",methods:[],displayName:"ConditionGroupBuilder",props:{group:{required:!1,tsType:{name:"signature",type:"object",raw:`{
  conditions?: (ConditionGroup | Condition)[];
  groupOperator?: LogicalOperator;
  statement?: StatementOperator;
  id: string;
}`,signature:{properties:[{key:"conditions",value:{name:"Array",elements:[{name:"unknown"}],raw:"(ConditionGroup | Condition)[]",required:!1}},{key:"groupOperator",value:{name:"union",raw:"'and' | 'or'",elements:[{name:"literal",value:"'and'"},{name:"literal",value:"'or'"}],required:!1}},{key:"statement",value:{name:"union",raw:"'ifAll' | 'ifAny' | 'unlessAll' | 'unlessAny'",elements:[{name:"literal",value:"'ifAll'"},{name:"literal",value:"'ifAny'"},{name:"literal",value:"'unlessAll'"},{name:"literal",value:"'unlessAny'"}],required:!1}},{key:"id",value:{name:"string",required:!0}}]}},description:"",type:{name:"object"}},onRemove:{required:!1,tsType:{name:"signature",type:"function",raw:"(e: Event) => void",signature:{arguments:[{type:{name:"Event"},name:"e"}],return:{name:"void"}}},description:"call back to remove the particular group from the state tree",type:{name:"func"}},onChange:{required:!1,tsType:{name:"signature",type:"function",raw:"(group: ConditionGroup) => void",signature:{arguments:[{type:{name:"signature",type:"object",raw:`{
  conditions?: (ConditionGroup | Condition)[];
  groupOperator?: LogicalOperator;
  statement?: StatementOperator;
  id: string;
}`,signature:{properties:[{key:"conditions",value:{name:"Array",elements:[{name:"unknown"}],raw:"(ConditionGroup | Condition)[]",required:!1}},{key:"groupOperator",value:{name:"union",raw:"'and' | 'or'",elements:[{name:"literal",value:"'and'"},{name:"literal",value:"'or'"}],required:!1}},{key:"statement",value:{name:"union",raw:"'ifAll' | 'ifAny' | 'unlessAll' | 'unlessAny'",elements:[{name:"literal",value:"'ifAll'"},{name:"literal",value:"'ifAny'"},{name:"literal",value:"'unlessAll'"},{name:"literal",value:"'unlessAny'"}],required:!1}},{key:"id",value:{name:"string",required:!0}}]}},name:"group"}],return:{name:"void"}}},description:"callback to update the current condition of the state tree",type:{name:"func"}},className:{required:!1,tsType:{name:"string"},description:"Provide an optional class to be applied to the containing node.",type:{name:"string"}},aria:{required:!1,tsType:{name:"signature",type:"object",raw:`{
  level: number;
  posinset: number;
  setsize: number;
}`,signature:{properties:[{key:"level",value:{name:"number",required:!0}},{key:"posinset",value:{name:"number",required:!0}},{key:"setsize",value:{name:"number",required:!0}}]}},description:"object contains the aria attributes",type:{name:"object"}}}};const Ye=()=>{const{rootState:n,setRootState:a}=p.useContext(H),[i]=B(["conditionText"]),{connectorConfig:o}=de(),s=l=>{a({...n,operator:l})};return t.createElement("div",{className:`${r}__group-separator ${r}__group-separator-row`,role:"row",tabIndex:-1,"aria-level":1},t.createElement(L,{label:n.operator,title:i,"data-name":"connectorField",popOverClassName:`${r}__gap`,className:`${r}__statement-button`},t.createElement(ee,{conditionState:{value:n.operator,label:i},onChange:s,config:{options:o}})))};Ye.__docgenInfo={description:"",methods:[],displayName:"GroupConnector"};const _e=({actions:n,className:a})=>{const{actionState:i=[],setActionState:o}=p.useContext(H),[s,l]=p.useState(-1),[y,m,h,d,f,q]=B(["actionsText","then","and","removeActionText","addActionText","actionSectionText"]),b=()=>{const w={id:U(),label:void 0,popoverToOpen:"valueField"};o?.([...i,w])},C=(w,u)=>{const N={...n.find(P=>P.id===w),id:i[u].id};o?.([...i.slice(0,u),N,...i.slice(u+1)])},k=w=>{o?.(i.filter(u=>u.id!==w))},v=w=>{l(w)},c=()=>{l(-1)};return t.createElement("div",{className:a},t.createElement(we,{className:`${r}__heading`,level:4},t.createElement(Te,null,y)),t.createElement("div",{className:`${r}__condition-wrapper`,role:"grid","aria-label":q},i?.map((w,u)=>t.createElement("div",{key:w.id,role:"row",className:Z(`${r}__condition-block ${r}__gap ${r}__gap-bottom`,{[`${r}__condition__deletion-preview`]:s==u})},t.createElement(L,{className:`${r}__statement-button`,tabIndex:0,popOverClassName:`${r}__gap`,label:u===0?m:h}),t.createElement(L,{label:w.label,title:y,condition:w,"data-name":"valueField",type:"option"},t.createElement(pe,{conditionState:{value:w.label},onChange:O=>C(O.id,u),config:{options:n}})),t.createElement("span",{role:"gridcell","aria-label":d},t.createElement(J,{hideLabel:!0,label:d,onClick:()=>k(w.id),onMouseEnter:()=>v(u),onMouseLeave:c,onFocus:()=>v(u),onBlur:c,renderIcon:Me,className:`${r}__close-condition`,"data-name":"closeCondition"})),i.length===u+1&&t.createElement(ie,{onClick:b,className:`${r}__gap ${r}__gap-left`,buttonLabel:f,tabIndex:0}))),i.length===0&&t.createElement(ie,{onClick:b,className:`${r}__gap ${r}__gap-left`,buttonLabel:f,tabIndex:0})))};_e.propTypes={actions:e.arrayOf(e.shape({id:e.oneOfType([e.string,e.number]).isRequired,label:e.string.isRequired})),className:e.string};_e.__docgenInfo={description:"",methods:[],displayName:"ConditionBuilderActions",props:{actions:{required:!1,tsType:{name:"union",raw:"Action[] | Option[]",elements:[{name:"Array",elements:[{name:"signature",type:"object",raw:"{ id?: string | number; label?: string }",signature:{properties:[{key:"id",value:{name:"union",raw:"string | number",elements:[{name:"string"},{name:"number"}],required:!1}},{key:"label",value:{name:"string",required:!1}}]}}],raw:"Action[]"},{name:"Array",elements:[{name:"intersection",raw:"Item & { icon?: CarbonIconType }",elements:[{name:"signature",type:"object",raw:"{ id: string; label: string }",signature:{properties:[{key:"id",value:{name:"string",required:!0}},{key:"label",value:{name:"string",required:!0}}]}},{name:"signature",type:"object",raw:"{ icon?: CarbonIconType }",signature:{properties:[{key:"icon",value:{name:"CarbonIconType",required:!1}}]}}]}],raw:"Option[]"}]},description:"optional array of object that give the list of actions.",type:{name:"arrayOf",value:{name:"shape",value:{id:{name:"union",value:[{name:"string"},{name:"number"}],required:!0},label:{name:"string",required:!0}}}}},className:{required:!1,tsType:{name:"string"},description:"Provide an optional class to be applied to the containing node.",type:{name:"string"}}}};const Ee=({startConditionLabel:n,getConditionState:a,getActionsState:i,initialState:o,actions:s})=>{const{rootState:l,setRootState:y,variant:m,actionState:h,onAddItem:d}=p.useContext(H),f=p.useRef(o?.state?JSON.parse(JSON.stringify(o?.state)):null),[q,b]=p.useState(!1),[C,k]=p.useState(!1),[v,c,w]=B(["addConditionGroupText","conditionHeadingText","conditionBuilderHierarchicalText"]),u=()=>{k(!0)},O=()=>{k(!1)};p.useEffect(()=>{l?.groups?.length?b(!0):b(!1),a&&a(l??{})},[l]),p.useEffect(()=>{i?.(h??[])},[h]),p.useEffect(()=>{o?.enabledDefault&&y?.(o.state)},[o]);const N=()=>{b(!0),f?.current?.groups?.length?(y?.(f.current),f.current=null):y?.(On)},P=p.useCallback(I=>{const S=l?.groups?.filter(F=>I!==F?.id);y?.({...l,groups:l?S:[]}),S?.length===0&&(f.current=null)},[y,l]),A=(I,S)=>{if(l&&l.groups){const F=[...l.groups?l.groups.slice(0,S):[],I,...l.groups?l.groups.slice(S+1):[]];y?.({...l,groups:F})}},E=()=>{const{preventAdd:I}=d?.({type:"group",state:l})??{};if(!I){const S={statement:"ifAll",groupOperator:"and",id:U(),conditions:[{property:void 0,operator:"",value:"",popoverToOpen:"propertyField",id:U()}]};y?.({...l,groups:l&&l.groups?[...l.groups,S]:[S]})}},D=()=>(l?.groups?.length??0)%5;if(!q)return t.createElement(Ve,{className:`${r}__addConditionText-button`,renderIcon:I=>t.createElement(We,{...I}),iconDescription:n,kind:"ghost",size:"sm",onClick:N},n);const R=m===W?{role:"treegrid","aria-label":w}:null;return t.createElement(t.Fragment,null,t.createElement(we,{className:`${r}__heading`,level:4},t.createElement(Te,null,c)),t.createElement("div",{className:`${r}__content-container`,...R},l&&l?.groups?.map((I,S)=>t.createElement("div",{key:I.id,className:`${r}__group-wrapper`},t.createElement(ce,{className:`${r}__group`,aria:{level:1,posinset:S*2+1,setsize:(l.groups&&l.groups.length*2)??0},group:I,onRemove:()=>{P(I.id)},onChange:F=>{A(F,S)}}),l.groups&&S<l.groups.length-1&&t.createElement(Ye,null))),m==W&&t.createElement("div",{role:"row",tabIndex:-1,"aria-level":1,className:`${r}__add-group`},t.createElement(J,{renderIcon:Ke,onClick:E,onMouseEnter:u,onMouseLeave:O,onFocus:u,onBlur:O,className:`${r}__add-condition-group `,hideLabel:!0,label:v,wrapperProps:{role:"gridcell","aria-label":v}})),C&&t.createElement(oe,{previewType:"newGroup",colorIndex:D(),group:{groupOperator:l?.operator,id:U()}})),s&&t.createElement(_e,{actions:s,className:`${r}__actions-container`}))};Ee.propTypes={actions:e.arrayOf(e.shape({id:e.oneOfType([e.string,e.number]).isRequired,label:e.string.isRequired})),getActionsState:e.func,getConditionState:e.func.isRequired,initialState:e.shape({state:e.shape({groups:e.arrayOf(e.shape({groupOperator:e.string,statement:e.string,conditions:e.arrayOf(e.oneOfType([e.shape({property:e.string,operator:e.string,value:e.oneOfType([e.string,e.arrayOf(e.shape({id:e.string,label:e.string})),e.shape({id:e.string,label:e.string})])}),e.object]))})),operator:e.string}),enabledDefault:e.bool}),startConditionLabel:e.string.isRequired};Ee.__docgenInfo={description:"",methods:[],displayName:"ConditionBuilderContent",props:{startConditionLabel:{required:!0,tsType:{name:"string"},description:"",type:{name:"string"}},getConditionState:{required:!0,tsType:{name:"signature",type:"function",raw:"(state: ConditionBuilderState) => void",signature:{arguments:[{type:{name:"signature",type:"object",raw:`{
  groups?: ConditionGroup[];
  operator?: LogicalOperator;
}`,signature:{properties:[{key:"groups",value:{name:"Array",elements:[{name:"signature",type:"object",raw:`{
  conditions?: (ConditionGroup | Condition)[];
  groupOperator?: LogicalOperator;
  statement?: StatementOperator;
  id: string;
}`,signature:{properties:[{key:"conditions",value:{name:"Array",elements:[{name:"unknown"}],raw:"(ConditionGroup | Condition)[]",required:!1}},{key:"groupOperator",value:{name:"union",raw:"'and' | 'or'",elements:[{name:"literal",value:"'and'"},{name:"literal",value:"'or'"}],required:!1}},{key:"statement",value:{name:"union",raw:"'ifAll' | 'ifAny' | 'unlessAll' | 'unlessAny'",elements:[{name:"literal",value:"'ifAll'"},{name:"literal",value:"'ifAny'"},{name:"literal",value:"'unlessAll'"},{name:"literal",value:"'unlessAny'"}],required:!1}},{key:"id",value:{name:"string",required:!0}}]}}],raw:"ConditionGroup[]",required:!1}},{key:"operator",value:{name:"union",raw:"'and' | 'or'",elements:[{name:"literal",value:"'and'"},{name:"literal",value:"'or'"}],required:!1}}]}},name:"state"}],return:{name:"void"}}},description:"This is a callback function that returns the updated state",type:{name:"func"}},getActionsState:{required:!1,tsType:{name:"signature",type:"function",raw:"(state: Action[]) => void",signature:{arguments:[{type:{name:"Array",elements:[{name:"signature",type:"object",raw:"{ id?: string | number; label?: string }",signature:{properties:[{key:"id",value:{name:"union",raw:"string | number",elements:[{name:"string"},{name:"number"}],required:!1}},{key:"label",value:{name:"string",required:!1}}]}}],raw:"Action[]"},name:"state"}],return:{name:"void"}}},description:"callback functions that will provide the updated action state back.",type:{name:"func"}},initialState:{required:!1,tsType:{name:"signature",type:"object",raw:`{
  state: ConditionBuilderState;
  enabledDefault?: boolean;
}`,signature:{properties:[{key:"state",value:{name:"signature",type:"object",raw:`{
  groups?: ConditionGroup[];
  operator?: LogicalOperator;
}`,signature:{properties:[{key:"groups",value:{name:"Array",elements:[{name:"signature",type:"object",raw:`{
  conditions?: (ConditionGroup | Condition)[];
  groupOperator?: LogicalOperator;
  statement?: StatementOperator;
  id: string;
}`,signature:{properties:[{key:"conditions",value:{name:"Array",elements:[{name:"unknown"}],raw:"(ConditionGroup | Condition)[]",required:!1}},{key:"groupOperator",value:{name:"union",raw:"'and' | 'or'",elements:[{name:"literal",value:"'and'"},{name:"literal",value:"'or'"}],required:!1}},{key:"statement",value:{name:"union",raw:"'ifAll' | 'ifAny' | 'unlessAll' | 'unlessAny'",elements:[{name:"literal",value:"'ifAll'"},{name:"literal",value:"'ifAny'"},{name:"literal",value:"'unlessAll'"},{name:"literal",value:"'unlessAny'"}],required:!1}},{key:"id",value:{name:"string",required:!0}}]}}],raw:"ConditionGroup[]",required:!1}},{key:"operator",value:{name:"union",raw:"'and' | 'or'",elements:[{name:"literal",value:"'and'"},{name:"literal",value:"'or'"}],required:!1}}]},required:!0}},{key:"enabledDefault",value:{name:"boolean",required:!1}}]}},description:"Optional prop if the condition building need to start from a predefined initial state",type:{name:"shape",value:{state:{name:"shape",value:{groups:{name:"arrayOf",value:{name:"shape",value:{groupOperator:{name:"string",required:!1},statement:{name:"string",required:!1},conditions:{name:"arrayOf",value:{name:"union",value:[{name:"shape",value:{property:{name:"string",required:!1},operator:{name:"string",required:!1},value:{name:"union",value:[{name:"string"},{name:"arrayOf",value:{name:"shape",value:{id:{name:"string",required:!1},label:{name:"string",required:!1}}}},{name:"shape",value:{id:{name:"string",required:!1},label:{name:"string",required:!1}}}],required:!1}}},{name:"object"}]},required:!1}}},required:!1},operator:{name:"string",required:!1}},required:!1},enabledDefault:{name:"bool",required:!1}}}},actions:{required:!1,tsType:{name:"Array",elements:[{name:"signature",type:"object",raw:"{ id?: string | number; label?: string }",signature:{properties:[{key:"id",value:{name:"union",raw:"string | number",elements:[{name:"string"},{name:"number"}],required:!1}},{key:"label",value:{name:"string",required:!1}}]}}],raw:"Action[]"},description:"optional array of object that give the list of actions.",type:{name:"arrayOf",value:{name:"shape",value:{id:{name:"union",value:[{name:"string"},{name:"number"}],required:!0},label:{name:"string",required:!0}}}}}}};const Ie="ConditionBuilder";let le=t.forwardRef(({className:n,inputConfig:a,startConditionLabel:i="Add Condition",popOverSearchThreshold:o,getOptions:s,initialState:l,getConditionState:y,getActionsState:m,variant:h=Ce,actions:d,translateWithId:f,statementConfigCustom:q,onAddItem:b,...C},k)=>{const v=p.useRef(null),c=k||v,w=u=>{xn(u,c,h)};return t.createElement(qe,{inputConfig:a,popOverSearchThreshold:o,getOptions:s,variant:h,translateWithId:f,conditionBuilderRef:c,statementConfigCustom:q,onAddItem:b},t.createElement("div",{...C,className:Z(r,n,{}),ref:c,...fn(Ie)},t.createElement(yn,{className:`${r}__${h}`,onKeyDown:w},t.createElement(Ee,{startConditionLabel:i,getConditionState:y,getActionsState:m,initialState:l,actions:d}))))});le=Be.checkComponentEnabled(le,Ie);le.displayName=Ie;le.propTypes={actions:e.arrayOf(e.shape({id:e.oneOfType([e.string,e.number]).isRequired,label:e.string.isRequired})),className:e.string,getActionsState:e.func,getConditionState:e.func.isRequired,getOptions:e.func,initialState:e.shape({state:e.shape({groups:e.arrayOf(e.shape({groupOperator:e.string,statement:e.string,conditions:e.arrayOf(e.oneOfType([e.shape({property:e.string,operator:e.string,value:e.oneOfType([e.string,e.arrayOf(e.shape({id:e.string,label:e.string})),e.shape({id:e.string,label:e.string})])}),e.object]))})),operator:e.string}),enabledDefault:e.bool}),inputConfig:e.shape({properties:e.arrayOf(e.shape({id:e.string.isRequired,label:e.string.isRequired,icon:e.oneOfType([e.func,e.object]),type:e.oneOf(["text","textarea","number","date","option","time","custom"]).isRequired,description:e.string,config:e.shape({options:e.arrayOf(e.shape({id:e.string.isRequired,label:e.string.isRequired,icon:e.oneOfType([e.func,e.object])})),component:e.func,operators:e.arrayOf(e.shape({id:e.string.isRequired,label:e.string.isRequired})),valueFormatter:e.func})}))}).isRequired,onAddItem:e.func,popOverSearchThreshold:e.number.isRequired,startConditionLabel:e.string,statementConfigCustom:e.arrayOf(e.shape({id:e.string.isRequired,connector:e.oneOf(["and","or"]).isRequired,label:e.string.isRequired,secondaryLabel:e.string})),translateWithId:e.func,variant:e.oneOf(["Non-Hierarchical","Hierarchical"])};le.__docgenInfo={description:"TODO: A description of the component.",methods:[],displayName:"ConditionBuilder",props:{inputConfig:{required:!0,tsType:{name:"signature",type:"object",raw:"{ properties: Property[] }",signature:{properties:[{key:"properties",value:{name:"Array",elements:[{name:"intersection",raw:`Item & {
  icon?: CarbonIconType;
  description?: string;
  type?: any;
  config?: any;
} & ConfigType`,elements:[{name:"signature",type:"object",raw:"{ id: string; label: string }",signature:{properties:[{key:"id",value:{name:"string",required:!0}},{key:"label",value:{name:"string",required:!0}}]}},{name:"signature",type:"object",raw:`{
  icon?: CarbonIconType;
  description?: string;
  type?: any;
  config?: any;
}`,signature:{properties:[{key:"icon",value:{name:"CarbonIconType",required:!1}},{key:"description",value:{name:"string",required:!1}},{key:"type",value:{name:"any",required:!1}},{key:"config",value:{name:"any",required:!1}}]}},{name:"union",raw:`| PropertyConfigOption['config']
| PropertyConfigTextArea['config']
| PropertyConfigText['config']
| PropertyConfigNumber['config']
| PropertyConfigDate['config']
| PropertyConfigTime['config']
| PropertyConfigCustom['config']`,elements:[{name:"signature",raw:"PropertyConfigOption['config']"},{name:"PropertyConfigTextArea['config']",raw:"PropertyConfigTextArea['config']"},{name:"PropertyConfigText['config']",raw:"PropertyConfigText['config']"},{name:"PropertyConfigNumber['config']",raw:"PropertyConfigNumber['config']"},{name:"intersection",raw:"PropertyConfigDate['config']"},{name:"signature",raw:"PropertyConfigTime['config']"},{name:"signature",raw:"PropertyConfigCustom['config']"}]}]}],raw:"Property[]",required:!0}}]}},description:"This is a mandatory prop that defines the input to the condition builder.",type:{name:"shape",value:{properties:{name:"arrayOf",value:{name:"shape",value:{id:{name:"string",required:!0},label:{name:"string",required:!0},icon:{name:"union",value:[{name:"func"},{name:"object"}],required:!1},type:{name:"enum",value:[{value:"'text'",computed:!1},{value:"'textarea'",computed:!1},{value:"'number'",computed:!1},{value:"'date'",computed:!1},{value:"'option'",computed:!1},{value:"'time'",computed:!1},{value:"'custom'",computed:!1}],required:!0},description:{name:"string",required:!1},config:{name:"shape",value:{options:{name:"arrayOf",value:{name:"shape",value:{id:{name:"string",required:!0},label:{name:"string",required:!0},icon:{name:"union",value:[{name:"func"},{name:"object"}],required:!1}}},required:!1},component:{name:"func",required:!1},operators:{name:"arrayOf",value:{name:"shape",value:{id:{name:"string",required:!0},label:{name:"string",required:!0}}},required:!1},valueFormatter:{name:"func",required:!1}},required:!1}}},required:!1}}}},initialState:{required:!1,tsType:{name:"signature",type:"object",raw:`{
  state: ConditionBuilderState;
  enabledDefault?: boolean;
}`,signature:{properties:[{key:"state",value:{name:"signature",type:"object",raw:`{
  groups?: ConditionGroup[];
  operator?: LogicalOperator;
}`,signature:{properties:[{key:"groups",value:{name:"Array",elements:[{name:"signature",type:"object",raw:`{
  conditions?: (ConditionGroup | Condition)[];
  groupOperator?: LogicalOperator;
  statement?: StatementOperator;
  id: string;
}`,signature:{properties:[{key:"conditions",value:{name:"Array",elements:[{name:"unknown"}],raw:"(ConditionGroup | Condition)[]",required:!1}},{key:"groupOperator",value:{name:"union",raw:"'and' | 'or'",elements:[{name:"literal",value:"'and'"},{name:"literal",value:"'or'"}],required:!1}},{key:"statement",value:{name:"union",raw:"'ifAll' | 'ifAny' | 'unlessAll' | 'unlessAny'",elements:[{name:"literal",value:"'ifAll'"},{name:"literal",value:"'ifAny'"},{name:"literal",value:"'unlessAll'"},{name:"literal",value:"'unlessAny'"}],required:!1}},{key:"id",value:{name:"string",required:!0}}]}}],raw:"ConditionGroup[]",required:!1}},{key:"operator",value:{name:"union",raw:"'and' | 'or'",elements:[{name:"literal",value:"'and'"},{name:"literal",value:"'or'"}],required:!1}}]},required:!0}},{key:"enabledDefault",value:{name:"boolean",required:!1}}]}},description:`Optional prop if you want to pass a saved condition state, pass as "initialState.state".
"initialState.enabledDefault" will populate the builder with the provided initial state before clicking Add Condition button.

 This state should respect the structure of condition state that is available in getConditionState callback`,type:{name:"shape",value:{state:{name:"shape",value:{groups:{name:"arrayOf",value:{name:"shape",value:{groupOperator:{name:"string",required:!1},statement:{name:"string",required:!1},conditions:{name:"arrayOf",value:{name:"union",value:[{name:"shape",value:{property:{name:"string",required:!1},operator:{name:"string",required:!1},value:{name:"union",value:[{name:"string"},{name:"arrayOf",value:{name:"shape",value:{id:{name:"string",required:!1},label:{name:"string",required:!1}}}},{name:"shape",value:{id:{name:"string",required:!1},label:{name:"string",required:!1}}}],required:!1}}},{name:"object"}]},required:!1}}},required:!1},operator:{name:"string",required:!1}},required:!1},enabledDefault:{name:"bool",required:!1}}}},getActionsState:{required:!1,tsType:{name:"signature",type:"function",raw:"(state: Action[] | undefined) => void",signature:{arguments:[{type:{name:"union",raw:"Action[] | undefined",elements:[{name:"Array",elements:[{name:"signature",type:"object",raw:"{ id?: string | number; label?: string }",signature:{properties:[{key:"id",value:{name:"union",raw:"string | number",elements:[{name:"string"},{name:"number"}],required:!1}},{key:"label",value:{name:"string",required:!1}}]}}],raw:"Action[]"},{name:"undefined"}]},name:"state"}],return:{name:"void"}}},description:"This is a callback that gives back the updated action state",type:{name:"func"}},getConditionState:{required:!0,tsType:{name:"signature",type:"function",raw:"(state: ConditionBuilderState | undefined) => void",signature:{arguments:[{type:{name:"union",raw:"ConditionBuilderState | undefined",elements:[{name:"signature",type:"object",raw:`{
  groups?: ConditionGroup[];
  operator?: LogicalOperator;
}`,signature:{properties:[{key:"groups",value:{name:"Array",elements:[{name:"signature",type:"object",raw:`{
  conditions?: (ConditionGroup | Condition)[];
  groupOperator?: LogicalOperator;
  statement?: StatementOperator;
  id: string;
}`,signature:{properties:[{key:"conditions",value:{name:"Array",elements:[{name:"unknown"}],raw:"(ConditionGroup | Condition)[]",required:!1}},{key:"groupOperator",value:{name:"union",raw:"'and' | 'or'",elements:[{name:"literal",value:"'and'"},{name:"literal",value:"'or'"}],required:!1}},{key:"statement",value:{name:"union",raw:"'ifAll' | 'ifAny' | 'unlessAll' | 'unlessAny'",elements:[{name:"literal",value:"'ifAll'"},{name:"literal",value:"'ifAny'"},{name:"literal",value:"'unlessAll'"},{name:"literal",value:"'unlessAny'"}],required:!1}},{key:"id",value:{name:"string",required:!0}}]}}],raw:"ConditionGroup[]",required:!1}},{key:"operator",value:{name:"union",raw:"'and' | 'or'",elements:[{name:"literal",value:"'and'"},{name:"literal",value:"'or'"}],required:!1}}]}},{name:"undefined"}]},name:"state"}],return:{name:"void"}}},description:"This is a callback that gives back updated condition state",type:{name:"func"}},getOptions:{required:!1,tsType:{name:"signature",type:"function",raw:`(
  state: ConditionBuilderState,
  condition: Condition
) => Promise<Option[]>`,signature:{arguments:[{type:{name:"signature",type:"object",raw:`{
  groups?: ConditionGroup[];
  operator?: LogicalOperator;
}`,signature:{properties:[{key:"groups",value:{name:"Array",elements:[{name:"signature",type:"object",raw:`{
  conditions?: (ConditionGroup | Condition)[];
  groupOperator?: LogicalOperator;
  statement?: StatementOperator;
  id: string;
}`,signature:{properties:[{key:"conditions",value:{name:"Array",elements:[{name:"unknown"}],raw:"(ConditionGroup | Condition)[]",required:!1}},{key:"groupOperator",value:{name:"union",raw:"'and' | 'or'",elements:[{name:"literal",value:"'and'"},{name:"literal",value:"'or'"}],required:!1}},{key:"statement",value:{name:"union",raw:"'ifAll' | 'ifAny' | 'unlessAll' | 'unlessAny'",elements:[{name:"literal",value:"'ifAll'"},{name:"literal",value:"'ifAny'"},{name:"literal",value:"'unlessAll'"},{name:"literal",value:"'unlessAny'"}],required:!1}},{key:"id",value:{name:"string",required:!0}}]}}],raw:"ConditionGroup[]",required:!1}},{key:"operator",value:{name:"union",raw:"'and' | 'or'",elements:[{name:"literal",value:"'and'"},{name:"literal",value:"'or'"}],required:!1}}]}},name:"state"},{type:{name:"signature",type:"object",raw:`{
  property?: string;
  operator?: Operator | '' | 'INVALID';
  value?: string | Option[] | Option;
  id?: string | number;
  popoverToOpen?: string;
}`,signature:{properties:[{key:"property",value:{name:"string",required:!1}},{key:"operator",value:{name:"union",raw:"Operator | '' | 'INVALID'",elements:[{name:"union",raw:`| LogicalOperator
| StatementOperator
| CoreOperator
| NumberOperator
| StringOperator
| ArrayOperator
| OptionOperator
| DateOperator`,elements:[{name:"union",raw:"'and' | 'or'",elements:[{name:"literal",value:"'and'"},{name:"literal",value:"'or'"}],required:!1},{name:"union",raw:"'ifAll' | 'ifAny' | 'unlessAll' | 'unlessAny'",elements:[{name:"literal",value:"'ifAll'"},{name:"literal",value:"'ifAny'"},{name:"literal",value:"'unlessAll'"},{name:"literal",value:"'unlessAny'"}],required:!1},{name:"literal",value:"'is'"},{name:"union",raw:"'greater' | 'greaterEqual' | 'lower' | 'lowerEqual'",elements:[{name:"literal",value:"'greater'"},{name:"literal",value:"'greaterEqual'"},{name:"literal",value:"'lower'"},{name:"literal",value:"'lowerEqual'"}]},{name:"union",raw:"'startsWith' | 'endsWith'",elements:[{name:"literal",value:"'startsWith'"},{name:"literal",value:"'endsWith'"}]},{name:"literal",value:"'contains'"},{name:"literal",value:"'oneOf'"},{name:"union",raw:"'before' | 'after'",elements:[{name:"literal",value:"'before'"},{name:"literal",value:"'after'"}]}]},{name:"literal",value:"''"},{name:"literal",value:"'INVALID'"}],required:!1}},{key:"value",value:{name:"union",raw:"string | Option[] | Option",elements:[{name:"string"},{name:"Array",elements:[{name:"intersection",raw:"Item & { icon?: CarbonIconType }",elements:[{name:"signature",type:"object",raw:"{ id: string; label: string }",signature:{properties:[{key:"id",value:{name:"string",required:!0}},{key:"label",value:{name:"string",required:!0}}]}},{name:"signature",type:"object",raw:"{ icon?: CarbonIconType }",signature:{properties:[{key:"icon",value:{name:"CarbonIconType",required:!1}}]}}]}],raw:"Option[]"},{name:"intersection",raw:"Item & { icon?: CarbonIconType }",elements:[{name:"signature",type:"object",raw:"{ id: string; label: string }",signature:{properties:[{key:"id",value:{name:"string",required:!0}},{key:"label",value:{name:"string",required:!0}}]}},{name:"signature",type:"object",raw:"{ icon?: CarbonIconType }",signature:{properties:[{key:"icon",value:{name:"CarbonIconType",required:!1}}]}}]}],required:!1}},{key:"id",value:{name:"union",raw:"string | number",elements:[{name:"string"},{name:"number"}],required:!1}},{key:"popoverToOpen",value:{name:"string",required:!1}}]}},name:"condition"}],return:{name:"Promise",elements:[{name:"Array",elements:[{name:"intersection",raw:"Item & { icon?: CarbonIconType }",elements:[{name:"signature",type:"object",raw:"{ id: string; label: string }",signature:{properties:[{key:"id",value:{name:"string",required:!0}},{key:"label",value:{name:"string",required:!0}}]}},{name:"signature",type:"object",raw:"{ icon?: CarbonIconType }",signature:{properties:[{key:"icon",value:{name:"CarbonIconType",required:!1}}]}}]}],raw:"Option[]"}],raw:"Promise<Option[]>"}}},description:`Callback triggered to dynamically fetch options for a property of type 'option'.
This is invoked when no static options array is provided in the input config.
The function should return a Promise that resolves with an array of options in the required format.`,type:{name:"func"}},actions:{required:!1,tsType:{name:"Array",elements:[{name:"signature",type:"object",raw:"{ id?: string | number; label?: string }",signature:{properties:[{key:"id",value:{name:"union",raw:"string | number",elements:[{name:"string"},{name:"number"}],required:!1}},{key:"label",value:{name:"string",required:!1}}]}}],raw:"Action[]"},description:"optional array of actions",type:{name:"arrayOf",value:{name:"shape",value:{id:{name:"union",value:[{name:"string"},{name:"number"}],required:!0},label:{name:"string",required:!0}}}}},className:{required:!1,tsType:{name:"string"},description:"Provide an optional class to be applied to the containing node.",type:{name:"string"}},popOverSearchThreshold:{required:!0,tsType:{name:"number"},description:"Provide an mandatory numeric value that will be used to enable search option in the popovers with list.",type:{name:"number"}},startConditionLabel:{required:!1,tsType:{name:"string"},description:"Provide a label to the button that starts condition builder",defaultValue:{value:"'Add Condition'",computed:!1},type:{name:"string"}},variant:{required:!1,tsType:{name:"union",raw:"'Non-Hierarchical' | 'Hierarchical'",elements:[{name:"literal",value:"'Non-Hierarchical'"},{name:"literal",value:"'Hierarchical'"}]},description:"Provide the condition builder variant: Non-Hierarchical/ Hierarchical",defaultValue:{value:"'Non-Hierarchical'",computed:!1},type:{name:"enum",value:[{value:"'Non-Hierarchical'",computed:!1},{value:"'Hierarchical'",computed:!1}]}},translateWithId:{required:!1,tsType:{name:"signature",type:"function",raw:"(id: ConditionBuilderTextKeys) => string",signature:{arguments:[{type:{name:"union",raw:`| 'ifText'
| 'unlessText'
| 'excl_if'
| 'and'
| 'or'
| 'is'
| 'ifAll'
| 'ifAny'
| 'unlessAll'
| 'unlessAny'
| 'greater'
| 'greaterEqual'
| 'lower'
| 'lowerEqual'
| 'startsWith'
| 'endsWith'
| 'contains'
| 'oneOf'
| 'before'
| 'after'
| 'between'
| 'addConditionText'
| 'addConditionGroupText'
| 'addSubgroupText'
| 'conditionText'
| 'propertyText'
| 'operatorText'
| 'valueText'
| 'connectorText'
| 'conditionRowText'
| 'conditionRowGroupText'
| 'removeConditionText'
| 'addConditionRowText'
| 'startText'
| 'endText'
| 'clearSearchText'
| 'actionsText'
| 'then'
| 'removeActionText'
| 'addActionText'
| 'invalidText'
| 'invalidNumberWarnText'
| 'conditionBuilderText'
| 'actionSectionText'
| 'conditionHeadingText'
| 'addPropertyText'
| 'addOperatorText'
| 'addValueText'
| 'conditionBuilderHierarchicalText'`,elements:[{name:"literal",value:"'ifText'"},{name:"literal",value:"'unlessText'"},{name:"literal",value:"'excl_if'"},{name:"literal",value:"'and'"},{name:"literal",value:"'or'"},{name:"literal",value:"'is'"},{name:"literal",value:"'ifAll'"},{name:"literal",value:"'ifAny'"},{name:"literal",value:"'unlessAll'"},{name:"literal",value:"'unlessAny'"},{name:"literal",value:"'greater'"},{name:"literal",value:"'greaterEqual'"},{name:"literal",value:"'lower'"},{name:"literal",value:"'lowerEqual'"},{name:"literal",value:"'startsWith'"},{name:"literal",value:"'endsWith'"},{name:"literal",value:"'contains'"},{name:"literal",value:"'oneOf'"},{name:"literal",value:"'before'"},{name:"literal",value:"'after'"},{name:"literal",value:"'between'"},{name:"literal",value:"'addConditionText'"},{name:"literal",value:"'addConditionGroupText'"},{name:"literal",value:"'addSubgroupText'"},{name:"literal",value:"'conditionText'"},{name:"literal",value:"'propertyText'"},{name:"literal",value:"'operatorText'"},{name:"literal",value:"'valueText'"},{name:"literal",value:"'connectorText'"},{name:"literal",value:"'conditionRowText'"},{name:"literal",value:"'conditionRowGroupText'"},{name:"literal",value:"'removeConditionText'"},{name:"literal",value:"'addConditionRowText'"},{name:"literal",value:"'startText'"},{name:"literal",value:"'endText'"},{name:"literal",value:"'clearSearchText'"},{name:"literal",value:"'actionsText'"},{name:"literal",value:"'then'"},{name:"literal",value:"'removeActionText'"},{name:"literal",value:"'addActionText'"},{name:"literal",value:"'invalidText'"},{name:"literal",value:"'invalidNumberWarnText'"},{name:"literal",value:"'conditionBuilderText'"},{name:"literal",value:"'actionSectionText'"},{name:"literal",value:"'conditionHeadingText'"},{name:"literal",value:"'addPropertyText'"},{name:"literal",value:"'addOperatorText'"},{name:"literal",value:"'addValueText'"},{name:"literal",value:"'conditionBuilderHierarchicalText'"}]},name:"id"}],return:{name:"string"}}},description:`Optional prop, if you need to pass translations to the texts on the component instead of the defined defaults.
This callback function will receive the message id and you need to return the corresponding text for that id.`,type:{name:"func"}},statementConfigCustom:{required:!1,tsType:{name:"Array",elements:[{name:"intersection",raw:`Item & {
  connector: 'and' | 'or';
  secondaryLabel?: string;
}`,elements:[{name:"signature",type:"object",raw:"{ id: string; label: string }",signature:{properties:[{key:"id",value:{name:"string",required:!0}},{key:"label",value:{name:"string",required:!0}}]}},{name:"signature",type:"object",raw:`{
  connector: 'and' | 'or';
  secondaryLabel?: string;
}`,signature:{properties:[{key:"connector",value:{name:"union",raw:"'and' | 'or'",elements:[{name:"literal",value:"'and'"},{name:"literal",value:"'or'"}],required:!0}},{key:"secondaryLabel",value:{name:"string",required:!1}}]}}]}],raw:"statementConfig[]"},description:"Optional prop for passing custom configuration for statement option from default op",type:{name:"arrayOf",value:{name:"shape",value:{id:{name:"string",required:!0},connector:{name:"enum",value:[{value:"'and'",computed:!1},{value:"'or'",computed:!1}],required:!0},label:{name:"string",required:!0},secondaryLabel:{name:"string",required:!1}}}}},onAddItem:{required:!1,tsType:{name:"signature",type:"function",raw:"(config: AddItemConfig) => { preventAdd: boolean }",signature:{arguments:[{type:{name:"signature",type:"object",raw:`{
  type: AddItemType;
  state: ConditionBuilderState;
  group?: ConditionGroup;
}`,signature:{properties:[{key:"type",value:{name:"union",raw:"'condition' | 'subgroup' | 'group'",elements:[{name:"literal",value:"'condition'"},{name:"literal",value:"'subgroup'"},{name:"literal",value:"'group'"}],required:!0}},{key:"state",value:{name:"signature",type:"object",raw:`{
  groups?: ConditionGroup[];
  operator?: LogicalOperator;
}`,signature:{properties:[{key:"groups",value:{name:"Array",elements:[{name:"signature",type:"object",raw:`{
  conditions?: (ConditionGroup | Condition)[];
  groupOperator?: LogicalOperator;
  statement?: StatementOperator;
  id: string;
}`,signature:{properties:[{key:"conditions",value:{name:"Array",elements:[{name:"unknown"}],raw:"(ConditionGroup | Condition)[]",required:!1}},{key:"groupOperator",value:{name:"union",raw:"'and' | 'or'",elements:[{name:"literal",value:"'and'"},{name:"literal",value:"'or'"}],required:!1}},{key:"statement",value:{name:"union",raw:"'ifAll' | 'ifAny' | 'unlessAll' | 'unlessAny'",elements:[{name:"literal",value:"'ifAll'"},{name:"literal",value:"'ifAny'"},{name:"literal",value:"'unlessAll'"},{name:"literal",value:"'unlessAny'"}],required:!1}},{key:"id",value:{name:"string",required:!0}}]},required:!1}],raw:"ConditionGroup[]",required:!1}},{key:"operator",value:{name:"union",raw:"'and' | 'or'",elements:[{name:"literal",value:"'and'"},{name:"literal",value:"'or'"}],required:!1}}]},required:!0}},{key:"group",value:{name:"signature",type:"object",raw:`{
  conditions?: (ConditionGroup | Condition)[];
  groupOperator?: LogicalOperator;
  statement?: StatementOperator;
  id: string;
}`,signature:{properties:[{key:"conditions",value:{name:"Array",elements:[{name:"unknown"}],raw:"(ConditionGroup | Condition)[]",required:!1}},{key:"groupOperator",value:{name:"union",raw:"'and' | 'or'",elements:[{name:"literal",value:"'and'"},{name:"literal",value:"'or'"}],required:!1}},{key:"statement",value:{name:"union",raw:"'ifAll' | 'ifAny' | 'unlessAll' | 'unlessAny'",elements:[{name:"literal",value:"'ifAll'"},{name:"literal",value:"'ifAny'"},{name:"literal",value:"'unlessAll'"},{name:"literal",value:"'unlessAny'"}],required:!1}},{key:"id",value:{name:"string",required:!0}}]},required:!1}}]}},name:"config"}],return:{name:"signature",type:"object",raw:"{ preventAdd: boolean }",signature:{properties:[{key:"preventAdd",value:{name:"boolean",required:!0}}]}}}},description:`this is an optional callback triggered before adding any condition , subgroup or group.
User can optionally perform any validation and can stop add action if they return back {preventAdd:true}`,type:{name:"func"}}}};export{le as C,W as H,Ce as N};
