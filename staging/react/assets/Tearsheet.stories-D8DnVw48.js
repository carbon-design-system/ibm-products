import{e,S as ae,B as g,r as n,p as R,T as se,a as re,b as le}from"./iframe-Cbdf71kV.js";import{S as K}from"./StringFormatter-B0UGzax2.js";import{B as z}from"./ButtonSet-BMY4CLjn.js";import{D as ie}from"./Dropdown-CaUv9lOM.js";import{F as G}from"./Form-COXaOQib.js";import{F as V}from"./FormGroup-Cn0kfrVG.js";import{T as ce,a as pe,b as P,c as ue,d as M}from"./Tabs-D21e_ydb.js";import{T as y}from"./TextInput-idITBobI.js";import{S as U,H as Y}from"./index-C7uzh38o.js";import{A as de,a as me}from"./index-DgPdVJKo.js";import{T as b,d as fe}from"./Tearsheet-Dn_jgr-W.js";import{a as he,b as ge,c as ye,s as be}from"./_storybook-styles-B9EX_MeK.js";import{g as Te}from"./props-helper-DqfsKzpa.js";import{T as Ce}from"./TearsheetNarrow-DXCPSXxE.js";import{I as ve}from"./bucket-9-DiKgF3S5.js";import"./devtools-BsT0_Owc.js";import"./DefinitionTooltip-CJlV5yRZ.js";import"./useIsomorphicEffect-BHn7yZvq.js";import"./index-BhC_9JVN.js";import"./inheritsLoose-DHKJTbHM.js";import"./FormContext-ChOR-8Xx.js";import"./mergeRefs-91-mP8KM.js";import"./utils-Rl5Zs1h-.js";import"./bucket-19-CLDj7gXe.js";import"./Grid-BDypx26l.js";import"./index-BEhuL1MR.js";import"./useControllableState-DbGBZOCF.js";import"./useNoInteractiveChildren-CvoYtJwO.js";import"./useMatchMedia-u-c5Smb4.js";import"./Text-ByKyVd5E.js";import"./useNormalizedInputProps-BAp2UTAQ.js";import"./bucket-18-DV2Au_NX.js";import"./TearsheetShell-DI3dHXhx.js";import"./useResizeObserver-CHiKmAS_.js";import"./getNodeTextContent-C8IeKkUQ.js";import"./ComposedModal-Bq5ZjMWK.js";import"./index-QS6KczTe.js";import"./LayerContext-CszjMr56.js";import"./clamp--00YEiB8.js";import"./InlineLoading-DLaaz_4f.js";import"./bucket-6-BiOweKob.js";import"./requiredIfGivenPropIsTruthy-VsRXdxiC.js";import"./wrapFocus-bi0LZfCr.js";import"./Wrap-DqktJTTy.js";import"./usePortalTarget-D9BcsXEH.js";import"./index-B1vwz3bX.js";import"./useFocus-DEs0yeUq.js";import"./usePreviousValue-DaZSyAQn.js";import"./ActionSet-DUU_jnHS.js";const j=()=>e.createElement(ae,{blocks:[{story:v},{story:k},{story:E},{story:I},{story:O},{story:x},{story:B},{story:w},{story:A},{title:"With AI Label",description:"An AI Label is intended for any scenario where something is being generated by AI to reinforce AI transparency, accountability, and explainability at the UI level. A Carbon AI Label can be provided to the Tearsheet component by including an `decorator` property on it and providing the carbon AILabel component as its own custom component.<br/> The `decorator` is versatile and can also be used to render other components.",source:{language:"html",code:`
<Tearsheet
  {...args}
  decorator={
    // carbon AILabel component
    <AILabel
      className="ai-label-container"
      autoAlign={false}
      align="bottom-right"
    >
      <AILabelContent>... ...</AILabelContent>
    </AILabel>
  }
>
  ...
</Tearsheet>
          `}}]});j.__docgenInfo={description:"",methods:[],displayName:"DocsPage"};const{action:T}=__STORYBOOK_MODULE_ACTIONS__,Ct={title:"Components/Tearsheet",component:b,tags:["autodocs"],parameters:{styles:be,layout:"fullscreen",docs:{page:j}},argTypes:{...Te(fe),actions:{control:{type:"select",labels:ye},options:ge,mapping:he({primary:"Replace",danger:"Delete",secondary:"Back",secondary2:"Keep Both",dangerGhost:"Abort",ghost:"Cancel"},T)},description:{control:{type:"select",labels:{0:"With plain String",1:"With StringFormatter and 1 line",2:"With StringFormatter and 2 lines"},default:0},description:"A description of the flow, displayed in the header area of the tearsheet.\n Note: `StringFormatter` can be passed as a React node to apply custom text formatting, including ellipsis truncation and a definition tooltip when the content is too long.",options:[0,1,2],mapping:{0:"This is a description for the tearsheet, providing an opportunity to describe the flow over a couple of lines in the header of the tearsheet.",1:e.createElement(K,{lines:1,autoAlign:!0,truncate:!0,value:"This is a description for the tearsheet, providing an opportunity to describe the flow over a couple of lines in the header of the tearsheet.",tooltipDirection:"bottom"}),2:e.createElement(K,{lines:2,autoAlign:!0,truncate:!0,value:"This is a description for the tearsheet, providing an opportunity to describe the flow over a couple of lines in the header of the tearsheet.",tooltipDirection:"bottom"})}},headerActions:{control:{type:"select",labels:{0:"none",1:"drop-down",2:"buttons"}},options:[0,1,2],mapping:{0:null,1:e.createElement(ie,{id:"tss-had",label:"Choose an option",titleText:"Choose an option",items:["option 1","option 2","option 3","option 4"]}),2:e.createElement(z,null,e.createElement(g,{kind:"secondary",size:"sm",style:{width:"initial"}},"Secondary"),e.createElement(g,{kind:"primary",size:"sm",style:{width:"initial"}},"Primary"))}},label:{control:{type:"text"}},title:{control:{type:"text"}},influencer:{control:{disable:!0}},onClose:{control:{disable:!0}},navigation:{control:{disable:!0}},open:{control:{disable:!0}},portalTarget:{control:{disable:!0}},decorator:{control:{type:"select",labels:{0:"No AI Label",1:"with AI Label",2:"With non AI Label component"},default:0},description:"Optional prop that allows you to pass any component.",options:[0,1,2]},slug:{control:{type:"select",labels:{0:"No AI Slug",1:"with AI Slug"},default:0},description:'Deprecated: Property replaced by "decorator"',options:[0,1]}}},C="Close the tearsheet",L=e.createElement(U,{className:"tearsheet-stories__dummy-content-block"},e.createElement(Y,null,"Influencer heading"),e.createElement("p",null,"Influencer content")),$="The label of the tearsheet",q=e.createElement(U,{className:"tearsheet-stories__dummy-content-block"},e.createElement(Y,null,"Main content heading"),e.createElement(G,null,e.createElement("p",null,"Main content"),e.createElement(V,{legendId:"tearsheet-form-group",legendText:"FormGroup Legend"},e.createElement(y,{id:"tss-ft1",labelText:"Enter an important value here",style:{marginBottom:"1em"}}),e.createElement(y,{id:"tss-ft2",labelText:"Here is an entry field:",style:{marginBottom:"1em"}})))),S="Title of the tearsheet",p=s=>{switch(s){case 1:return e.createElement(de,{className:"decorator-container",size:"xs"},e.createElement(me,null,e.createElement("div",null,e.createElement("p",{className:"secondary"},"AI Explained"),e.createElement("h1",null,"84%"),e.createElement("p",{className:"secondary bold"},"Confidence score"),e.createElement("p",{className:"secondary"},"This is not really Lorem Ipsum but the spell checker did not like the previous text with it's non-words which is why this unwieldy sentence, should one choose to call it that, here."),e.createElement("hr",null),e.createElement("p",{className:"secondary"},"Model type"),e.createElement("p",{className:"bold"},"Foundation model"))));case 2:return e.createElement(se,null,e.createElement(re,{label:"Additional information"},e.createElement(ve,null)),e.createElement(le,null,e.createElement("p",null,"Custom content here")));default:return}},J=({actions:s,decorator:l,slug:a,...i},m)=>{const[f,t]=n.useState(!1);n.useEffect(()=>{setTimeout(()=>t(m.viewMode!=="docs"),0)},[]);const u=s&&Array.prototype.map.call(s,o=>{if(o.label==="Cancel"){const c=o.onClick;return{...o,onClick:r=>{t(!1),c(r)}}}return o}),h=n.useRef(void 0);return e.createElement(e.Fragment,null,e.createElement("style",null,`.${R.prefix}--tearsheet { opacity: 0 }`,";"),e.createElement("main",null,e.createElement(g,{onClick:()=>t(!0)},"Open Tearsheet")),e.createElement("div",{ref:h},e.createElement(b,{...i,actions:u,open:f,onClose:()=>t(!1),decorator:l&&p(l),slug:a&&p(a)},q)))},Q=e.createElement("div",{className:"tearsheet-stories__tabs"},e.createElement(ue,{"aria-label":"Tab list"},e.createElement(M,null,"Tab 1"),e.createElement(M,null,"Tab 2"),e.createElement(M,null,"Tab 3"),e.createElement(M,null,"Tab 4"))),X=({actions:s,decorator:l,slug:a,...i},m)=>{const[f,t]=n.useState(!1);n.useEffect(()=>{setTimeout(()=>t(m.viewMode!=="docs"),0)},[]);const u=s&&Array.prototype.map.call(s,o=>{if(o.label==="Cancel"){const c=o.onClick;return{...o,onClick:r=>{t(!1),c(r)}}}return o}),h=n.useRef(void 0);return e.createElement(e.Fragment,null,e.createElement("style",null,`.${R.prefix}--tearsheet { opacity: 0 }`,";"),e.createElement("main",null,e.createElement(g,{onClick:()=>t(!0)},"Open Tearsheet")),e.createElement("div",{ref:h},e.createElement(ce,{onChange:T("Tab selection changed")},e.createElement(b,{...i,actions:u,open:f,onClose:()=>t(!1),decorator:l&&p(l),slug:a&&p(a)},e.createElement(pe,null,e.createElement(P,null,"Tab 1"),e.createElement(P,null,"Tab 2"),e.createElement(P,null,"Tab 3"),e.createElement(P,null,"Tab 4"))))))},ke=({actions:s,decorator:l,slug:a,...i},m)=>{const[f,t]=n.useState(!1),u=n.useRef(void 0),h=s&&Array.prototype.map.call(s,c=>{if(c.label==="Cancel"){const r=c.onClick;return{...c,onClick:F=>{t(!1),r(F)}}}return c}),o=n.useRef(void 0);return n.useEffect(()=>{setTimeout(()=>t(m.viewMode!=="docs"),0)},[]),e.createElement(e.Fragment,null,e.createElement("style",null,`.${R.prefix}--tearsheet { opacity: 0 }`,";"),e.createElement("main",null,e.createElement(g,{ref:u,onClick:()=>t(!0)},"Open Tearsheet")),e.createElement("div",{ref:o},e.createElement(b,{...i,actions:h,open:f,onClose:()=>t(!1),decorator:l&&p(l),slug:a&&p(a),launcherButtonRef:u},q)))},Ee=({actions:s,decorator:l,slug:a,...i},m)=>{const[f,t]=n.useState(!1),[u,h]=n.useState(""),o=s&&Array.prototype.map.call(s,r=>{if(r.label==="Cancel"){const F=r.onClick;return{...r,onClick:N=>{t(!1),F(N)}}}return r}),c=n.useRef(void 0);return n.useEffect(()=>{setTimeout(()=>t(m.viewMode!=="docs"),0)},[]),e.createElement(e.Fragment,null,e.createElement("style",null,`.${R.prefix}--tearsheet { opacity: 0 }`,";"),e.createElement("main",null,e.createElement(g,{onClick:()=>t(!0)},"Open Tearsheet")),e.createElement("div",{ref:c},e.createElement(b,{...i,actions:o,open:f,onClose:()=>t(!1),decorator:l&&p(l),slug:a&&p(a)},e.createElement("div",{className:"tearsheet-stories__dummy-content-block"},e.createElement(G,null,e.createElement("p",null,"Main content"),e.createElement(V,{legendId:"tearsheet-form-group",legendText:"FormGroup Legend"},e.createElement(y,{id:"tss-ft1",labelText:"Enter an important value here",style:{marginBottom:"1em"},disabled:!u?.length>0}),e.createElement(y,{id:"tss-ft2",labelText:"Here is an entry field:",style:{marginBottom:"1em"},onChange:r=>h(r?.target?.value)})))))))},Oe=({actions:s,decorator:l,slug:a,...i},m)=>{const[f,t]=n.useState(!1),u=s&&Array.prototype.map.call(s,o=>{if(o.label==="Cancel"){const c=o.onClick;return{...o,onClick:r=>{t(!1),c(r)}}}return o}),h=n.useRef(void 0);return n.useEffect(()=>{setTimeout(()=>t(m.viewMode!=="docs"),0)},[]),e.createElement(e.Fragment,null,e.createElement("style",null,`.${R.prefix}--tearsheet { opacity: 0 }`,";"),e.createElement("main",null,e.createElement(g,{onClick:()=>t(!0)},"Open Tearsheet")),e.createElement("div",{ref:h},e.createElement(b,{...i,actions:u,open:f,onClose:()=>t(!1),decorator:l&&p(l),slug:a&&p(a)},e.createElement("div",{className:"tearsheet-stories__dummy-content-block"},e.createElement(G,null,e.createElement("p",null,"Main content"),e.createElement(V,{legendId:"tearsheet-form-group",legendText:"FormGroup Legend"},e.createElement(y,{id:"tss-ft1",labelText:"This field's value is 'read only':",readOnly:!0,style:{marginBottom:"1em"},value:"Value"}),e.createElement(y,{id:"tss-ft2",labelText:"Here is an entry field:",style:{marginBottom:"1em"}})))))))},Z=({mixedSizes:s,actions:l,decorator:a,slug:i,...m},f)=>{const[t,u]=n.useState(!1),[h,o]=n.useState(!1),[c,r]=n.useState(!1),F=n.useRef(void 0),N=n.useRef(void 0),W=n.useRef(void 0),H=n.useRef(void 0),ee=Array.prototype.map.call(l,d=>{if(d.label==="Cancel"){const D=d.onClick;return{...d,onClick:_=>{u(!1),D(_)}}}return d}),te=Array.prototype.map.call(l,d=>{if(d.label==="Cancel"){const D=d.onClick;return{...d,onClick:_=>{o(!1),D(_)}}}return d}),ne=Array.prototype.map.call(l,d=>{if(d.label==="Cancel"){const D=d.onClick;return{...d,onClick:_=>{r(!1),D(_)}}}return d}),oe=s?Ce:b;return n.useEffect(()=>{setTimeout(()=>{u(f.viewMode!=="docs"),o(f.viewMode!=="docs"),r(f.viewMode!=="docs")},0)},[]),e.createElement(e.Fragment,null,e.createElement("style",null,`.${R.prefix}--tearsheet { opacity: 0 }`,";"),e.createElement("div",{style:{height:"3rem"},"data-reserve-space":"for toggle buttons"}),e.createElement("main",null,e.createElement(z,{style:{display:"flex",position:"fixed",top:0,left:0,zIndex:1e4}},e.createElement(g,{onClick:()=>u(!t),ref:N},"Toggle tearsheet 1"),e.createElement(g,{onClick:()=>o(!h)},"Toggle tearsheet 2"),!s&&e.createElement(g,{onClick:()=>r(!c)},"Toggle tearsheet 3"))),e.createElement("div",{ref:F},e.createElement(b,{...m,actions:ee,headerActions:e.createElement(z,null,e.createElement(g,{kind:"primary",size:"sm",style:{width:"initial"},onClick:()=>o(!0),disabled:h,ref:W},"Open tearsheet 2")),title:"Tearsheet 1",open:t,onClose:()=>u(!1),selectorPrimaryFocus:"#stacked-input-1",decorator:a&&p(a),slug:i&&p(i),launcherButtonRef:N},e.createElement("div",{className:"tearsheet-stories__dummy-content-block"},"Main content 1",e.createElement(y,{id:"stacked-input-1",labelText:"Enter an important value here"}))),e.createElement(oe,{...m,actions:te,headerActions:e.createElement(z,null,e.createElement(g,{kind:"primary",size:"sm",style:{width:"initial"},onClick:()=>r(!0),disabled:c,ref:H},"Open tearsheet 3")),title:"Tearsheet 2",open:h,onClose:()=>o(!1),selectorPrimaryFocus:"#stacked-input-2",decorator:a&&p(a),slug:i&&p(i),launcherButtonRef:W},e.createElement("div",{className:"tearsheet-stories__dummy-content-block"},"Main content 2",e.createElement(y,{id:"stacked-input-2",labelText:"Enter an important value here"}))),!s&&e.createElement(b,{...m,actions:ne,title:"Tearsheet 3",open:c,onClose:()=>r(!1),selectorPrimaryFocus:"#stacked-input-3",decorator:a&&p(a),slug:i&&p(i),launcherButtonRef:H},e.createElement("div",{className:"tearsheet-stories__dummy-content-block"},"Main content 3",e.createElement(y,{id:"stacked-input-3",labelText:"Enter an important value here"})))))},v=J.bind({});v.storyName="Tearsheet";v.args={closeIconDescription:C,description:2,onClose:T("onClose called"),title:S,actions:7,selectorPrimaryFocus:"#tss-ft1"};const k=X.bind({});k.storyName="Tearsheet with navigation";k.args={closeIconDescription:C,description:2,label:$,navigation:Q,onClose:T("onClose called"),title:S,actions:7};const E=J.bind({});E.storyName="Tearsheet with influencer";E.args={closeIconDescription:C,description:2,influencer:L,influencerPosition:"left",influencerWidth:"narrow",onClose:T("onClose called"),title:S,actions:7};const I=ke.bind({});I.args={closeIconDescription:C,description:2,onClose:T("onClose called"),title:S,actions:7};const O=Ee.bind({});O.storyName="First Element Disabled";O.args={closeIconDescription:C,hasCloseIcon:!0,description:2,onClose:T("onClose called"),title:S,actions:7,selectorPrimaryFocus:"#tss-ft1"};const x=Oe.bind({});x.storyName="First Element ReadOnly";x.args={closeIconDescription:C,hasCloseIcon:!0,description:2,onClose:T("onClose called"),title:S,actions:7,selectorPrimaryFocus:"#tss-ft1"};const B=X.bind({});B.storyName="Tearsheet with all header items and influencer";B.args={closeIconDescription:C,description:2,hasCloseIcon:!0,headerActions:2,influencer:L,influencerPosition:"left",influencerWidth:"narrow",label:$,navigation:Q,onClose:T("onClose called"),title:S,actions:0,decorator:1,slug:0};const w=Z.bind({});w.storyName="Stacking tearsheets";w.args={closeIconDescription:C,description:2,height:"lower",influencer:L,label:$,actions:7};const A=Z.bind({});A.storyName="Stacking tearsheets, different sizes";A.args={mixedSizes:!0,closeIconDescription:C,description:2,height:"lower",influencer:L,label:$,actions:7};v.parameters={...v.parameters,docs:{...v.parameters?.docs,source:{originalSource:`({
  actions,
  decorator,
  slug,
  ...args
}, context) => {
  const [open, setOpen] = useState(false);
  useEffect(() => {
    setTimeout(() => setOpen(context.viewMode !== 'docs'), 0);
  }, []);
  const wiredActions = actions && Array.prototype.map.call(actions, action => {
    if (action.label === 'Cancel') {
      const previousClick = action.onClick;
      return {
        ...action,
        onClick: evt => {
          setOpen(false);
          previousClick(evt);
        }
      };
    }
    return action;
  });
  const ref = useRef(undefined);
  return <>
      <style>{\`.\${pkg.prefix}--tearsheet { opacity: 0 }\`};</style>
      <main>
        <Button onClick={() => setOpen(true)}>Open Tearsheet</Button>
      </main>
      <div ref={ref}>
        <Tearsheet {...args} actions={wiredActions} open={open} onClose={() => setOpen(false)} decorator={decorator && sampleDecorator(decorator)} slug={slug && sampleDecorator(slug)}>
          {mainContent}
        </Tearsheet>
      </div>
    </>;
}`,...v.parameters?.docs?.source}}};k.parameters={...k.parameters,docs:{...k.parameters?.docs,source:{originalSource:`({
  actions,
  decorator,
  slug,
  ...args
}, context) => {
  const [open, setOpen] = useState(false);
  useEffect(() => {
    setTimeout(() => setOpen(context.viewMode !== 'docs'), 0);
  }, []);
  const wiredActions = actions && Array.prototype.map.call(actions, action => {
    if (action.label === 'Cancel') {
      const previousClick = action.onClick;
      return {
        ...action,
        onClick: evt => {
          setOpen(false);
          previousClick(evt);
        }
      };
    }
    return action;
  });
  const ref = useRef(undefined);
  return <>
      <style>{\`.\${pkg.prefix}--tearsheet { opacity: 0 }\`};</style>
      <main>
        <Button onClick={() => setOpen(true)}>Open Tearsheet</Button>
      </main>
      <div ref={ref}>
        <Tabs onChange={action('Tab selection changed')}>
          <Tearsheet {...args} actions={wiredActions} open={open} onClose={() => setOpen(false)} decorator={decorator && sampleDecorator(decorator)} slug={slug && sampleDecorator(slug)}>
            <TabPanels>
              <TabPanel>Tab 1</TabPanel>
              <TabPanel>Tab 2</TabPanel>
              <TabPanel>Tab 3</TabPanel>
              <TabPanel>Tab 4</TabPanel>
            </TabPanels>
          </Tearsheet>
        </Tabs>
      </div>
    </>;
}`,...k.parameters?.docs?.source}}};E.parameters={...E.parameters,docs:{...E.parameters?.docs,source:{originalSource:`({
  actions,
  decorator,
  slug,
  ...args
}, context) => {
  const [open, setOpen] = useState(false);
  useEffect(() => {
    setTimeout(() => setOpen(context.viewMode !== 'docs'), 0);
  }, []);
  const wiredActions = actions && Array.prototype.map.call(actions, action => {
    if (action.label === 'Cancel') {
      const previousClick = action.onClick;
      return {
        ...action,
        onClick: evt => {
          setOpen(false);
          previousClick(evt);
        }
      };
    }
    return action;
  });
  const ref = useRef(undefined);
  return <>
      <style>{\`.\${pkg.prefix}--tearsheet { opacity: 0 }\`};</style>
      <main>
        <Button onClick={() => setOpen(true)}>Open Tearsheet</Button>
      </main>
      <div ref={ref}>
        <Tearsheet {...args} actions={wiredActions} open={open} onClose={() => setOpen(false)} decorator={decorator && sampleDecorator(decorator)} slug={slug && sampleDecorator(slug)}>
          {mainContent}
        </Tearsheet>
      </div>
    </>;
}`,...E.parameters?.docs?.source}}};I.parameters={...I.parameters,docs:{...I.parameters?.docs,source:{originalSource:`({
  actions,
  decorator,
  slug,
  ...args
}, context) => {
  const [open, setOpen] = useState(false);
  const buttonRef = useRef(undefined);
  const wiredActions = actions && Array.prototype.map.call(actions, action => {
    if (action.label === 'Cancel') {
      const previousClick = action.onClick;
      return {
        ...action,
        onClick: evt => {
          setOpen(false);
          previousClick(evt);
        }
      };
    }
    return action;
  });
  const ref = useRef(undefined);
  useEffect(() => {
    setTimeout(() => setOpen(context.viewMode !== 'docs'), 0);
  }, []);
  return <>
      <style>{\`.\${pkg.prefix}--tearsheet { opacity: 0 }\`};</style>
      <main>
        <Button ref={buttonRef} onClick={() => setOpen(true)}>
          Open Tearsheet
        </Button>
      </main>
      <div ref={ref}>
        <Tearsheet {...args} actions={wiredActions} open={open} onClose={() => setOpen(false)} decorator={decorator && sampleDecorator(decorator)} slug={slug && sampleDecorator(slug)} launcherButtonRef={buttonRef}>
          {mainContent}
        </Tearsheet>
      </div>
    </>;
}`,...I.parameters?.docs?.source}}};O.parameters={...O.parameters,docs:{...O.parameters?.docs,source:{originalSource:`({
  actions,
  decorator,
  slug,
  ...args
}, context) => {
  const [open, setOpen] = useState(false);
  const [text, setText] = useState('');
  const wiredActions = actions && Array.prototype.map.call(actions, action => {
    if (action.label === 'Cancel') {
      const previousClick = action.onClick;
      return {
        ...action,
        onClick: evt => {
          setOpen(false);
          previousClick(evt);
        }
      };
    }
    return action;
  });
  const ref = useRef(undefined);
  useEffect(() => {
    setTimeout(() => setOpen(context.viewMode !== 'docs'), 0);
  }, []);
  return <>
      <style>{\`.\${pkg.prefix}--tearsheet { opacity: 0 }\`};</style>
      <main>
        <Button onClick={() => setOpen(true)}>Open Tearsheet</Button>
      </main>
      <div ref={ref}>
        <Tearsheet {...args} actions={wiredActions} open={open} onClose={() => setOpen(false)} decorator={decorator && sampleDecorator(decorator)} slug={slug && sampleDecorator(slug)}>
          <div className="tearsheet-stories__dummy-content-block">
            <Form>
              <p>Main content</p>
              <FormGroup legendId="tearsheet-form-group" legendText="FormGroup Legend">
                <TextInput id="tss-ft1" labelText="Enter an important value here" style={
              // stylelint-disable-next-line carbon/layout-use
              {
                marginBottom: '1em'
              }} disabled={!text?.length > 0} />
                <TextInput id="tss-ft2" labelText="Here is an entry field:" style={
              // stylelint-disable-next-line carbon/layout-use
              {
                marginBottom: '1em'
              }} onChange={ev => setText(ev?.target?.value)} />
              </FormGroup>
            </Form>
          </div>
        </Tearsheet>
      </div>
    </>;
}`,...O.parameters?.docs?.source}}};x.parameters={...x.parameters,docs:{...x.parameters?.docs,source:{originalSource:`({
  actions,
  decorator,
  slug,
  ...args
}, context) => {
  const [open, setOpen] = useState(false);
  const wiredActions = actions && Array.prototype.map.call(actions, action => {
    if (action.label === 'Cancel') {
      const previousClick = action.onClick;
      return {
        ...action,
        onClick: evt => {
          setOpen(false);
          previousClick(evt);
        }
      };
    }
    return action;
  });
  const ref = useRef(undefined);
  useEffect(() => {
    setTimeout(() => setOpen(context.viewMode !== 'docs'), 0);
  }, []);
  return <>
      <style>{\`.\${pkg.prefix}--tearsheet { opacity: 0 }\`};</style>
      <main>
        <Button onClick={() => setOpen(true)}>Open Tearsheet</Button>
      </main>
      <div ref={ref}>
        <Tearsheet {...args} actions={wiredActions} open={open} onClose={() => setOpen(false)} decorator={decorator && sampleDecorator(decorator)} slug={slug && sampleDecorator(slug)}>
          <div className="tearsheet-stories__dummy-content-block">
            <Form>
              <p>Main content</p>
              <FormGroup legendId="tearsheet-form-group" legendText="FormGroup Legend">
                <TextInput id="tss-ft1" labelText="This field's value is 'read only':" readOnly={true} style={
              // stylelint-disable-next-line carbon/layout-use
              {
                marginBottom: '1em'
              }} value="Value" />
                <TextInput id="tss-ft2" labelText="Here is an entry field:" style={
              // stylelint-disable-next-line carbon/layout-use
              {
                marginBottom: '1em'
              }} />
              </FormGroup>
            </Form>
          </div>
        </Tearsheet>
      </div>
    </>;
}`,...x.parameters?.docs?.source}}};B.parameters={...B.parameters,docs:{...B.parameters?.docs,source:{originalSource:`({
  actions,
  decorator,
  slug,
  ...args
}, context) => {
  const [open, setOpen] = useState(false);
  useEffect(() => {
    setTimeout(() => setOpen(context.viewMode !== 'docs'), 0);
  }, []);
  const wiredActions = actions && Array.prototype.map.call(actions, action => {
    if (action.label === 'Cancel') {
      const previousClick = action.onClick;
      return {
        ...action,
        onClick: evt => {
          setOpen(false);
          previousClick(evt);
        }
      };
    }
    return action;
  });
  const ref = useRef(undefined);
  return <>
      <style>{\`.\${pkg.prefix}--tearsheet { opacity: 0 }\`};</style>
      <main>
        <Button onClick={() => setOpen(true)}>Open Tearsheet</Button>
      </main>
      <div ref={ref}>
        <Tabs onChange={action('Tab selection changed')}>
          <Tearsheet {...args} actions={wiredActions} open={open} onClose={() => setOpen(false)} decorator={decorator && sampleDecorator(decorator)} slug={slug && sampleDecorator(slug)}>
            <TabPanels>
              <TabPanel>Tab 1</TabPanel>
              <TabPanel>Tab 2</TabPanel>
              <TabPanel>Tab 3</TabPanel>
              <TabPanel>Tab 4</TabPanel>
            </TabPanels>
          </Tearsheet>
        </Tabs>
      </div>
    </>;
}`,...B.parameters?.docs?.source}}};w.parameters={...w.parameters,docs:{...w.parameters?.docs,source:{originalSource:`({
  mixedSizes,
  actions,
  decorator,
  slug,
  ...args
}, context) => {
  const [open1, setOpen1] = useState(false);
  const [open2, setOpen2] = useState(false);
  const [open3, setOpen3] = useState(false);
  const ref = useRef(undefined);
  const openButton1 = useRef(undefined);
  const openButton2 = useRef(undefined);
  const openButton3 = useRef(undefined);
  const wiredActions1 = Array.prototype.map.call(actions, action => {
    if (action.label === 'Cancel') {
      const previousClick = action.onClick;
      return {
        ...action,
        onClick: evt => {
          setOpen1(false);
          previousClick(evt);
        }
      };
    }
    return action;
  });
  const wiredActions2 = Array.prototype.map.call(actions, action => {
    if (action.label === 'Cancel') {
      const previousClick = action.onClick;
      return {
        ...action,
        onClick: evt => {
          setOpen2(false);
          previousClick(evt);
        }
      };
    }
    return action;
  });
  const wiredActions3 = Array.prototype.map.call(actions, action => {
    if (action.label === 'Cancel') {
      const previousClick = action.onClick;
      return {
        ...action,
        onClick: evt => {
          setOpen3(false);
          previousClick(evt);
        }
      };
    }
    return action;
  });
  const VariableSizeTearsheet = mixedSizes ? TearsheetNarrow : Tearsheet;
  useEffect(() => {
    setTimeout(() => {
      setOpen1(context.viewMode !== 'docs');
      setOpen2(context.viewMode !== 'docs');
      setOpen3(context.viewMode !== 'docs');
    }, 0);
  }, []);
  return <>
      <style>{\`.\${pkg.prefix}--tearsheet { opacity: 0 }\`};</style>
      <div style={{
      height: '3rem'
    }} data-reserve-space="for toggle buttons" />
      <main>
        <ButtonSet style={{
        display: 'flex',
        position: 'fixed',
        top: 0,
        left: 0,
        zIndex: 10000
      }}>
          <Button onClick={() => setOpen1(!open1)} ref={openButton1}>
            Toggle&nbsp;tearsheet&nbsp;1
          </Button>
          <Button onClick={() => setOpen2(!open2)}>
            Toggle&nbsp;tearsheet&nbsp;2
          </Button>
          {!mixedSizes && <Button onClick={() => setOpen3(!open3)}>
              Toggle&nbsp;tearsheet&nbsp;3
            </Button>}
        </ButtonSet>
      </main>
      <div ref={ref}>
        <Tearsheet {...args} actions={wiredActions1} headerActions={<ButtonSet>
              <Button kind="primary" size="sm" style={{
          width: 'initial'
        }} onClick={() => setOpen2(true)} disabled={open2} ref={openButton2}>
                Open tearsheet 2
              </Button>
            </ButtonSet>} title="Tearsheet 1" open={open1} onClose={() => setOpen1(false)} selectorPrimaryFocus="#stacked-input-1" decorator={decorator && sampleDecorator(decorator)} slug={slug && sampleDecorator(slug)} launcherButtonRef={openButton1}>
          <div className="tearsheet-stories__dummy-content-block">
            Main content 1
            <TextInput id="stacked-input-1" labelText="Enter an important value here" />
          </div>
        </Tearsheet>
        <VariableSizeTearsheet {...args} actions={wiredActions2} headerActions={<ButtonSet>
              <Button kind="primary" size="sm" style={{
          width: 'initial'
        }} onClick={() => setOpen3(true)} disabled={open3} ref={openButton3}>
                Open tearsheet 3
              </Button>
            </ButtonSet>} title="Tearsheet 2" open={open2} onClose={() => setOpen2(false)} selectorPrimaryFocus="#stacked-input-2" decorator={decorator && sampleDecorator(decorator)} slug={slug && sampleDecorator(slug)} launcherButtonRef={openButton2}>
          <div className="tearsheet-stories__dummy-content-block">
            Main content 2
            <TextInput id="stacked-input-2" labelText="Enter an important value here" />
          </div>
        </VariableSizeTearsheet>
        {!mixedSizes && <Tearsheet {...args} actions={wiredActions3} title="Tearsheet 3" open={open3} onClose={() => setOpen3(false)} selectorPrimaryFocus="#stacked-input-3" decorator={decorator && sampleDecorator(decorator)} slug={slug && sampleDecorator(slug)} launcherButtonRef={openButton3}>
            <div className="tearsheet-stories__dummy-content-block">
              Main content 3
              <TextInput id="stacked-input-3" labelText="Enter an important value here" />
            </div>
          </Tearsheet>}
      </div>
    </>;
}`,...w.parameters?.docs?.source}}};A.parameters={...A.parameters,docs:{...A.parameters?.docs,source:{originalSource:`({
  mixedSizes,
  actions,
  decorator,
  slug,
  ...args
}, context) => {
  const [open1, setOpen1] = useState(false);
  const [open2, setOpen2] = useState(false);
  const [open3, setOpen3] = useState(false);
  const ref = useRef(undefined);
  const openButton1 = useRef(undefined);
  const openButton2 = useRef(undefined);
  const openButton3 = useRef(undefined);
  const wiredActions1 = Array.prototype.map.call(actions, action => {
    if (action.label === 'Cancel') {
      const previousClick = action.onClick;
      return {
        ...action,
        onClick: evt => {
          setOpen1(false);
          previousClick(evt);
        }
      };
    }
    return action;
  });
  const wiredActions2 = Array.prototype.map.call(actions, action => {
    if (action.label === 'Cancel') {
      const previousClick = action.onClick;
      return {
        ...action,
        onClick: evt => {
          setOpen2(false);
          previousClick(evt);
        }
      };
    }
    return action;
  });
  const wiredActions3 = Array.prototype.map.call(actions, action => {
    if (action.label === 'Cancel') {
      const previousClick = action.onClick;
      return {
        ...action,
        onClick: evt => {
          setOpen3(false);
          previousClick(evt);
        }
      };
    }
    return action;
  });
  const VariableSizeTearsheet = mixedSizes ? TearsheetNarrow : Tearsheet;
  useEffect(() => {
    setTimeout(() => {
      setOpen1(context.viewMode !== 'docs');
      setOpen2(context.viewMode !== 'docs');
      setOpen3(context.viewMode !== 'docs');
    }, 0);
  }, []);
  return <>
      <style>{\`.\${pkg.prefix}--tearsheet { opacity: 0 }\`};</style>
      <div style={{
      height: '3rem'
    }} data-reserve-space="for toggle buttons" />
      <main>
        <ButtonSet style={{
        display: 'flex',
        position: 'fixed',
        top: 0,
        left: 0,
        zIndex: 10000
      }}>
          <Button onClick={() => setOpen1(!open1)} ref={openButton1}>
            Toggle&nbsp;tearsheet&nbsp;1
          </Button>
          <Button onClick={() => setOpen2(!open2)}>
            Toggle&nbsp;tearsheet&nbsp;2
          </Button>
          {!mixedSizes && <Button onClick={() => setOpen3(!open3)}>
              Toggle&nbsp;tearsheet&nbsp;3
            </Button>}
        </ButtonSet>
      </main>
      <div ref={ref}>
        <Tearsheet {...args} actions={wiredActions1} headerActions={<ButtonSet>
              <Button kind="primary" size="sm" style={{
          width: 'initial'
        }} onClick={() => setOpen2(true)} disabled={open2} ref={openButton2}>
                Open tearsheet 2
              </Button>
            </ButtonSet>} title="Tearsheet 1" open={open1} onClose={() => setOpen1(false)} selectorPrimaryFocus="#stacked-input-1" decorator={decorator && sampleDecorator(decorator)} slug={slug && sampleDecorator(slug)} launcherButtonRef={openButton1}>
          <div className="tearsheet-stories__dummy-content-block">
            Main content 1
            <TextInput id="stacked-input-1" labelText="Enter an important value here" />
          </div>
        </Tearsheet>
        <VariableSizeTearsheet {...args} actions={wiredActions2} headerActions={<ButtonSet>
              <Button kind="primary" size="sm" style={{
          width: 'initial'
        }} onClick={() => setOpen3(true)} disabled={open3} ref={openButton3}>
                Open tearsheet 3
              </Button>
            </ButtonSet>} title="Tearsheet 2" open={open2} onClose={() => setOpen2(false)} selectorPrimaryFocus="#stacked-input-2" decorator={decorator && sampleDecorator(decorator)} slug={slug && sampleDecorator(slug)} launcherButtonRef={openButton2}>
          <div className="tearsheet-stories__dummy-content-block">
            Main content 2
            <TextInput id="stacked-input-2" labelText="Enter an important value here" />
          </div>
        </VariableSizeTearsheet>
        {!mixedSizes && <Tearsheet {...args} actions={wiredActions3} title="Tearsheet 3" open={open3} onClose={() => setOpen3(false)} selectorPrimaryFocus="#stacked-input-3" decorator={decorator && sampleDecorator(decorator)} slug={slug && sampleDecorator(slug)} launcherButtonRef={openButton3}>
            <div className="tearsheet-stories__dummy-content-block">
              Main content 3
              <TextInput id="stacked-input-3" labelText="Enter an important value here" />
            </div>
          </Tearsheet>}
      </div>
    </>;
}`,...A.parameters?.docs?.source}}};const vt=["tearsheet","withNavigation","withInfluencer","ReturnFocusToOpenButton","firstElementDisabled","firstElementReadOnly","fullyLoaded","stacked","stackedMixedSizes"];export{I as ReturnFocusToOpenButton,vt as __namedExportsOrder,Ct as default,O as firstElementDisabled,x as firstElementReadOnly,B as fullyLoaded,w as stacked,A as stackedMixedSizes,v as tearsheet,E as withInfluencer,k as withNavigation};
