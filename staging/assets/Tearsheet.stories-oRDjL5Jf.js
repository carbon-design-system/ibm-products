import{e,r as l}from"./index-CPiZ6Cnx.js";import{S as ke}from"./StoryDocsPage-sPxu-ImI.js";import{a as y}from"./chunk-D5ZWXAHU-CGElDDNX.js";import{B as f,p as P}from"./settings-iwZeeh4T.js";import"./index-CXyjPnaX.js";import{B as _}from"./ButtonSet-DCPCKVSR.js";import{D as ve}from"./Dropdown-CqwYW1NX.js";import{F as ce}from"./Form--JAB0_ak.js";import{F as pe}from"./FormGroup-9BStNhuZ.js";import{T as Ae,a as N,b as Ee,c as Le,d as F}from"./Tabs-f3msY8sL.js";import{A as Oe,a as xe}from"./index-C-0O7yd6.js";import{T as x}from"./TextInput-D6QswYlg.js";import{T as h,d as Ie}from"./Tearsheet-B5ldstLv.js";import{s as we,a as Se,b as Be,c as Pe}from"./_storybook-styles-PO4T6scg.js";import{g as Ne}from"./props-helper-Dlg0HCIz.js";import{T as Fe}from"./TearsheetNarrow-Ba9cDOZ0.js";import"./_commonjsHelpers-BosuxZz1.js";import"./index-t1iuulR4.js";import"./iframe-rw3uFrCz.js";import"../sb-preview/runtime.js";import"./jsx-runtime-Dc-z7RWI.js";import"./index-BSHYryQu.js";import"./index-Bsyy8W_U.js";import"./index-Df9so8jS.js";import"./index-DMCuvgYY.js";import"./index-DrFu-skq.js";import"./story-helper-U7E6Psyp.js";import"./tslib.es6-rrx6G-_s.js";import"./v4-CQkTLCs1.js";import"./events-OVwOsPzJ.js";import"./index-DJK44odq.js";import"./index-DoQB7l6P.js";import"./FormContext-CgeSXHS1.js";import"./mergeRefs-CTUecegF.js";import"./bucket-18-By6NmkK1.js";import"./bucket-2-L5Cs0C3i.js";import"./ComposedModal-BZzRRIGC.js";import"./index-Dcfl0vi2.js";import"./LayerContext-BGhaVt7n.js";import"./InlineLoading-DZri6jHG.js";import"./bucket-6-BQYdmIZX.js";import"./requiredIfGivenPropIsTruthy-CU7JwK8h.js";import"./wrapFocus-i_P_nIQh.js";import"./useControllableState-uQXf5Mu5.js";import"./useNoInteractiveChildren-DSuYsaq5.js";import"./useMatchMedia-FpSN34ox.js";import"./Text-vNWzJqus.js";import"./bucket-17-Ddrrb1BH.js";import"./useNormalizedInputProps-Dv8FHz9Q.js";import"./useAnnouncer-Dwt0jqXi.js";import"./TearsheetShell-U9euF4wX.js";import"./useResizeObserver-CZKdqPxj.js";import"./getNodeTextContent-C8IeKkUQ.js";import"./usePortalTarget-2TvXB9Ir.js";import"./feature-flags-B_abUzZ5.js";import"./index-BLF2Ep9P.js";import"./useFocus-jmjiioUJ.js";import"./wait-CTNFjQS8.js";import"./usePreviousValue-CSEZflXC.js";import"./ActionSet-B09sMic5.js";import"./devtools-CjVY-wQW.js";const ue=()=>e.createElement(ke,{blocks:[{story:C},{story:k},{story:v},{story:I},{story:A},{story:E},{story:L},{story:O},{title:"With AI Label",description:"An AI Label is intended for any scenario where something is being generated by AI to reinforce AI transparency, accountability, and explainability at the UI level. A Carbon AI Label can be provided to the Tearsheet component by including an `aiLabel` property on it and providing the carbon AILabel component as its own custom component.",source:{language:"html",code:`
<Tearsheet
  {...args}
  aiLabel={
    // carbon AILabel component
    <AILabel
      className="ai-label-container"
      autoAlign={false}
      align="bottom-right"
    >
      <AILabelContent>... ...</AILabelContent>
    </AILabel>
  }
>
  ...
</Tearsheet>
          `}}]});ue.__docgenInfo={description:"",methods:[],displayName:"DocsPage"};const Ht={title:"IBM Products/Components/Tearsheet",component:h,tags:["autodocs"],parameters:{styles:we,layout:"fullscreen",docs:{page:ue}},argTypes:{...Ne(Ie),actions:{control:{type:"select",labels:Se},options:Be,mapping:Pe({primary:"Replace",danger:"Delete",secondary:"Back",secondary2:"Keep Both",dangerGhost:"Abort",ghost:"Cancel"},y)},description:{control:{type:"text"}},headerActions:{control:{type:"select",labels:{0:"none",1:"drop-down",2:"buttons"}},options:[0,1,2],mapping:{0:null,1:e.createElement(ve,{id:"tss-had",label:"Choose an option",titleText:"Choose an option",items:["option 1","option 2","option 3","option 4"]}),2:e.createElement(_,null,e.createElement(f,{kind:"secondary",size:"sm",style:{width:"initial"}},"Secondary"),e.createElement(f,{kind:"primary",size:"sm",style:{width:"initial"}},"Primary"))}},label:{control:{type:"text"}},title:{control:{type:"text"}},influencer:{control:{disable:!0}},onClose:{control:{disable:!0}},navigation:{control:{disable:!0}},open:{control:{disable:!0}},portalTarget:{control:{disable:!0}},aiLabel:{control:{type:"select",labels:{0:"No AI Label",1:"with AI Label"},default:0},description:"Optional prop that is intended for any scenario where something is being generated by AI to reinforce AI transparency, accountability, and explainability at the UI level.",options:[0,1]},slug:{control:{type:"select",labels:{0:"No AI Slug",1:"with AI Slug"},default:0},description:'Deprecated: Property replaced by "aiLabel"',options:[0,1]}}},g="Close the tearsheet",T="This is a description for the tearsheet, providing an opportunity to   describe the flow over a couple of lines in the header of the tearsheet.",z=e.createElement("div",{className:"tearsheet-stories__dummy-content-block"},"Influencer"),R="The label of the tearsheet",me=e.createElement("div",{className:"tearsheet-stories__dummy-content-block"},e.createElement(ce,null,e.createElement("p",null,"Main content"),e.createElement(pe,{legendId:"tearsheet-form-group",legendText:"FormGroup Legend"},e.createElement(x,{id:"tss-ft1",labelText:"Enter an important value here",style:{marginBottom:"1em"}}),e.createElement(x,{id:"tss-ft2",labelText:"Here is an entry field:",style:{marginBottom:"1em"}})))),w="Title of the tearsheet",r=e.createElement(Oe,{align:"bottom-start",className:"ai-label-container",size:"xs"},e.createElement(xe,null,e.createElement("div",null,e.createElement("p",{className:"secondary"},"AI Explained"),e.createElement("h1",null,"84%"),e.createElement("p",{className:"secondary bold"},"Confidence score"),e.createElement("p",{className:"secondary"},"This is not really Lorem Ipsum but the spell checker did not like the previous text with it's non-words which is why this unwieldy sentence, should one choose to call it that, here."),e.createElement("hr",null),e.createElement("p",{className:"secondary"},"Model type"),e.createElement("p",{className:"bold"},"Foundation model")))),de=({actions:a,aiLabel:p,slug:u,...m})=>{const[d,n]=l.useState(!1),i=a&&Array.prototype.map.call(a,t=>{if(t.label==="Cancel"){const s=t.onClick;return{...t,onClick:c=>{n(!1),s(c)}}}return t}),b=l.useRef(void 0);return e.createElement(e.Fragment,null,e.createElement("style",null,`.${P.prefix}--tearsheet { opacity: 0 }`,";"),e.createElement(f,{onClick:()=>n(!0)},"Open Tearsheet"),e.createElement("div",{ref:b},e.createElement(h,{...m,actions:i,open:d,onClose:()=>n(!1),aiLabel:p&&r,slug:u&&r},me)))},be=e.createElement("div",{className:"tearsheet-stories__tabs"},e.createElement(Ae,{"aria-label":"Tab list"},e.createElement(N,null,"Tab 1"),e.createElement(N,null,"Tab 2"),e.createElement(N,null,"Tab 3"),e.createElement(N,null,"Tab 4"))),fe=({actions:a,aiLabel:p,slug:u,...m})=>{const[d,n]=l.useState(!1),i=a&&Array.prototype.map.call(a,t=>{if(t.label==="Cancel"){const s=t.onClick;return{...t,onClick:c=>{n(!1),s(c)}}}return t}),b=l.useRef(void 0);return e.createElement(e.Fragment,null,e.createElement("style",null,`.${P.prefix}--tearsheet { opacity: 0 }`,";"),e.createElement(f,{onClick:()=>n(!0)},"Open Tearsheet"),e.createElement("div",{ref:b},e.createElement(Ee,{onChange:y("Tab selection changed")},e.createElement(h,{...m,actions:i,open:d,onClose:()=>n(!1),aiLabel:p&&r,slug:u&&r},e.createElement(Le,null,e.createElement(F,null,"Tab 1"),e.createElement(F,null,"Tab 2"),e.createElement(F,null,"Tab 3"),e.createElement(F,null,"Tab 4"))))))},_e=({actions:a,aiLabel:p,slug:u,...m})=>{const[d,n]=l.useState(!1),i=l.useRef(void 0),b=a&&Array.prototype.map.call(a,s=>{if(s.label==="Cancel"){const c=s.onClick;return{...s,onClick:M=>{n(!1),c(M)}}}return s}),t=l.useRef(void 0);return e.createElement(e.Fragment,null,e.createElement("style",null,`.${P.prefix}--tearsheet { opacity: 0 }`,";"),e.createElement(f,{ref:i,onClick:()=>n(!0)},"Open Tearsheet"),e.createElement("div",{ref:t},e.createElement(h,{...m,actions:b,open:d,onClose:()=>n(!1),aiLabel:p&&r,slug:u&&r,launcherButtonRef:i},me)))},ze=({actions:a,aiLabel:p,slug:u,...m})=>{const[d,n]=l.useState(!1),i=a&&Array.prototype.map.call(a,t=>{if(t.label==="Cancel"){const s=t.onClick;return{...t,onClick:c=>{n(!1),s(c)}}}return t}),b=l.useRef(void 0);return e.createElement(e.Fragment,null,e.createElement("style",null,`.${P.prefix}--tearsheet { opacity: 0 }`,";"),e.createElement(f,{onClick:()=>n(!0)},"Open Tearsheet"),e.createElement("div",{ref:b},e.createElement(h,{...m,actions:i,open:d,onClose:()=>n(!1),aiLabel:p&&r,slug:u&&r},e.createElement("div",{className:"tearsheet-stories__dummy-content-block"},e.createElement(ce,null,e.createElement("p",null,"Main content"),e.createElement(pe,{legendId:"tearsheet-form-group",legendText:"FormGroup Legend"},e.createElement(x,{id:"tss-ft1",labelText:"Enter an important value here",style:{marginBottom:"1em"},disabled:!0}),e.createElement(x,{id:"tss-ft2",labelText:"Here is an entry field:",style:{marginBottom:"1em"}})))))))},he=({mixedSizes:a,actions:p,aiLabel:u,slug:m,...d})=>{const[n,i]=l.useState(!1),[b,t]=l.useState(!1),[s,c]=l.useState(!1),M=l.useRef(void 0),ye=Array.prototype.map.call(p,o=>{if(o.label==="Cancel"){const S=o.onClick;return{...o,onClick:B=>{i(!1),S(B)}}}return o}),ge=Array.prototype.map.call(p,o=>{if(o.label==="Cancel"){const S=o.onClick;return{...o,onClick:B=>{t(!1),S(B)}}}return o}),Te=Array.prototype.map.call(p,o=>{if(o.label==="Cancel"){const S=o.onClick;return{...o,onClick:B=>{c(!1),S(B)}}}return o}),Ce=a?Fe:h;return e.createElement(e.Fragment,null,e.createElement("style",null,`.${P.prefix}--tearsheet { opacity: 0 }`,";"),e.createElement("div",{style:{height:"3rem"},"data-reserve-space":"for toggle buttons"}),e.createElement(_,{style:{display:"flex",position:"fixed",top:0,left:0,zIndex:1e4}},e.createElement(f,{onClick:()=>i(!n)},"Toggle tearsheet 1"),e.createElement(f,{onClick:()=>t(!b)},"Toggle tearsheet 2"),!a&&e.createElement(f,{onClick:()=>c(!s)},"Toggle tearsheet 3")),e.createElement("div",{ref:M},e.createElement(h,{...d,actions:ye,headerActions:e.createElement(_,null,e.createElement(f,{kind:"primary",size:"sm",style:{width:"initial"},onClick:()=>t(!0),disabled:b},"Open tearsheet 2")),title:"Tearsheet 1",open:n,onClose:()=>i(!1),selectorPrimaryFocus:"#stacked-input-1",aiLabel:u&&r,slug:m&&r},e.createElement("div",{className:"tearsheet-stories__dummy-content-block"},"Main content 1",e.createElement(x,{id:"stacked-input-1",labelText:"Enter an important value here"}))),e.createElement(Ce,{...d,actions:ge,headerActions:e.createElement(_,null,e.createElement(f,{kind:"primary",size:"sm",style:{width:"initial"},onClick:()=>c(!0),disabled:s},"Open tearsheet 3")),title:"Tearsheet 2",open:b,onClose:()=>t(!1),selectorPrimaryFocus:"#stacked-input-2",aiLabel:u&&r,slug:m&&r},e.createElement("div",{className:"tearsheet-stories__dummy-content-block"},"Main content 2",e.createElement(x,{id:"stacked-input-2",labelText:"Enter an important value here"}))),!a&&e.createElement(h,{...d,actions:Te,title:"Tearsheet 3",open:s,onClose:()=>c(!1),selectorPrimaryFocus:"#stacked-input-3",aiLabel:u&&r,slug:m&&r},e.createElement("div",{className:"tearsheet-stories__dummy-content-block"},"Main content 3",e.createElement(x,{id:"stacked-input-3",labelText:"Enter an important value here"})))))},C=de.bind({});C.storyName="Tearsheet";C.args={closeIconDescription:g,description:T,onClose:y("onClose called"),title:w,actions:7,selectorPrimaryFocus:"#tss-ft1"};const k=fe.bind({});k.storyName="Tearsheet with navigation";k.args={closeIconDescription:g,description:T,label:R,navigation:be,onClose:y("onClose called"),title:w,actions:7};const v=de.bind({});v.storyName="Tearsheet with influencer";v.args={closeIconDescription:g,description:T,influencer:z,influencerPosition:"left",influencerWidth:"narrow",onClose:y("onClose called"),title:w,actions:7};const I=_e.bind({});I.args={closeIconDescription:g,description:T,onClose:y("onClose called"),title:w,actions:7};const A=ze.bind({});A.storyName="First Element Disabled";A.args={closeIconDescription:g,hasCloseIcon:!0,description:T,onClose:y("onClose called"),title:w,actions:7,selectorPrimaryFocus:"#tss-ft1"};const E=fe.bind({});E.storyName="Tearsheet with all header items and influencer";E.args={closeIconDescription:g,description:T,hasCloseIcon:!0,headerActions:2,influencer:z,influencerPosition:"left",influencerWidth:"narrow",label:R,navigation:be,onClose:y("onClose called"),title:w,actions:0,aiLabel:1,slug:0};const L=he.bind({});L.storyName="Stacking tearsheets";L.args={closeIconDescription:g,description:T,height:"lower",influencer:z,label:R,actions:7};const O=he.bind({});O.storyName="Stacking tearsheets, different sizes";O.args={mixedSizes:!0,closeIconDescription:g,description:T,height:"lower",influencer:z,label:R,actions:7};var D,$,G;C.parameters={...C.parameters,docs:{...(D=C.parameters)==null?void 0:D.docs,source:{originalSource:`({
  actions,
  aiLabel,
  slug,
  ...args
}) => {
  const [open, setOpen] = useState(false);
  const wiredActions = actions && Array.prototype.map.call(actions, action => {
    if (action.label === 'Cancel') {
      const previousClick = action.onClick;
      return {
        ...action,
        onClick: evt => {
          setOpen(false);
          previousClick(evt);
        }
      };
    }
    return action;
  });
  const ref = useRef(undefined);
  return <>
      <style>{\`.\${pkg.prefix}--tearsheet { opacity: 0 }\`};</style>
      <Button onClick={() => setOpen(true)}>Open Tearsheet</Button>
      <div ref={ref}>
        <Tearsheet {...args} actions={wiredActions} open={open} onClose={() => setOpen(false)} aiLabel={aiLabel && sampleAILabel} slug={slug && sampleAILabel}>
          {mainContent}
        </Tearsheet>
      </div>
    </>;
}`,...(G=($=C.parameters)==null?void 0:$.docs)==null?void 0:G.source}}};var V,W,H;k.parameters={...k.parameters,docs:{...(V=k.parameters)==null?void 0:V.docs,source:{originalSource:`({
  actions,
  aiLabel,
  slug,
  ...args
}) => {
  const [open, setOpen] = useState(false);
  const wiredActions = actions && Array.prototype.map.call(actions, action => {
    if (action.label === 'Cancel') {
      const previousClick = action.onClick;
      return {
        ...action,
        onClick: evt => {
          setOpen(false);
          previousClick(evt);
        }
      };
    }
    return action;
  });
  const ref = useRef(undefined);
  return <>
      <style>{\`.\${pkg.prefix}--tearsheet { opacity: 0 }\`};</style>
      <Button onClick={() => setOpen(true)}>Open Tearsheet</Button>
      <div ref={ref}>
        <Tabs onChange={action('Tab selection changed')}>
          <Tearsheet {...args} actions={wiredActions} open={open} onClose={() => setOpen(false)} aiLabel={aiLabel && sampleAILabel} slug={slug && sampleAILabel}>
            <TabPanels>
              <TabPanel>Tab 1</TabPanel>
              <TabPanel>Tab 2</TabPanel>
              <TabPanel>Tab 3</TabPanel>
              <TabPanel>Tab 4</TabPanel>
            </TabPanels>
          </Tearsheet>
        </Tabs>
      </div>
    </>;
}`,...(H=(W=k.parameters)==null?void 0:W.docs)==null?void 0:H.source}}};var U,K,j;v.parameters={...v.parameters,docs:{...(U=v.parameters)==null?void 0:U.docs,source:{originalSource:`({
  actions,
  aiLabel,
  slug,
  ...args
}) => {
  const [open, setOpen] = useState(false);
  const wiredActions = actions && Array.prototype.map.call(actions, action => {
    if (action.label === 'Cancel') {
      const previousClick = action.onClick;
      return {
        ...action,
        onClick: evt => {
          setOpen(false);
          previousClick(evt);
        }
      };
    }
    return action;
  });
  const ref = useRef(undefined);
  return <>
      <style>{\`.\${pkg.prefix}--tearsheet { opacity: 0 }\`};</style>
      <Button onClick={() => setOpen(true)}>Open Tearsheet</Button>
      <div ref={ref}>
        <Tearsheet {...args} actions={wiredActions} open={open} onClose={() => setOpen(false)} aiLabel={aiLabel && sampleAILabel} slug={slug && sampleAILabel}>
          {mainContent}
        </Tearsheet>
      </div>
    </>;
}`,...(j=(K=v.parameters)==null?void 0:K.docs)==null?void 0:j.source}}};var q,J,Q;I.parameters={...I.parameters,docs:{...(q=I.parameters)==null?void 0:q.docs,source:{originalSource:`({
  actions,
  aiLabel,
  slug,
  ...args
}) => {
  const [open, setOpen] = useState(false);
  const buttonRef = useRef(undefined);
  const wiredActions = actions && Array.prototype.map.call(actions, action => {
    if (action.label === 'Cancel') {
      const previousClick = action.onClick;
      return {
        ...action,
        onClick: evt => {
          setOpen(false);
          previousClick(evt);
        }
      };
    }
    return action;
  });
  const ref = useRef(undefined);
  return <>
      <style>{\`.\${pkg.prefix}--tearsheet { opacity: 0 }\`};</style>
      <Button ref={buttonRef} onClick={() => setOpen(true)}>
        Open Tearsheet
      </Button>
      <div ref={ref}>
        <Tearsheet {...args} actions={wiredActions} open={open} onClose={() => setOpen(false)} aiLabel={aiLabel && sampleAILabel} slug={slug && sampleAILabel} launcherButtonRef={buttonRef}>
          {mainContent}
        </Tearsheet>
      </div>
    </>;
}`,...(Q=(J=I.parameters)==null?void 0:J.docs)==null?void 0:Q.source}}};var X,Y,Z;A.parameters={...A.parameters,docs:{...(X=A.parameters)==null?void 0:X.docs,source:{originalSource:`({
  actions,
  aiLabel,
  slug,
  ...args
}) => {
  const [open, setOpen] = useState(false);
  const wiredActions = actions && Array.prototype.map.call(actions, action => {
    if (action.label === 'Cancel') {
      const previousClick = action.onClick;
      return {
        ...action,
        onClick: evt => {
          setOpen(false);
          previousClick(evt);
        }
      };
    }
    return action;
  });
  const ref = useRef(undefined);
  return <>
      <style>{\`.\${pkg.prefix}--tearsheet { opacity: 0 }\`};</style>
      <Button onClick={() => setOpen(true)}>Open Tearsheet</Button>
      <div ref={ref}>
        <Tearsheet {...args} actions={wiredActions} open={open} onClose={() => setOpen(false)} aiLabel={aiLabel && sampleAILabel} slug={slug && sampleAILabel}>
          <div className="tearsheet-stories__dummy-content-block">
            <Form>
              <p>Main content</p>
              <FormGroup legendId="tearsheet-form-group" legendText="FormGroup Legend">
                <TextInput id="tss-ft1" labelText="Enter an important value here" style={
              // stylelint-disable-next-line carbon/layout-use
              {
                marginBottom: '1em'
              }} disabled />
                <TextInput id="tss-ft2" labelText="Here is an entry field:" style={
              // stylelint-disable-next-line carbon/layout-use
              {
                marginBottom: '1em'
              }} />
              </FormGroup>
            </Form>
          </div>
        </Tearsheet>
      </div>
    </>;
}`,...(Z=(Y=A.parameters)==null?void 0:Y.docs)==null?void 0:Z.source}}};var ee,te,ne;E.parameters={...E.parameters,docs:{...(ee=E.parameters)==null?void 0:ee.docs,source:{originalSource:`({
  actions,
  aiLabel,
  slug,
  ...args
}) => {
  const [open, setOpen] = useState(false);
  const wiredActions = actions && Array.prototype.map.call(actions, action => {
    if (action.label === 'Cancel') {
      const previousClick = action.onClick;
      return {
        ...action,
        onClick: evt => {
          setOpen(false);
          previousClick(evt);
        }
      };
    }
    return action;
  });
  const ref = useRef(undefined);
  return <>
      <style>{\`.\${pkg.prefix}--tearsheet { opacity: 0 }\`};</style>
      <Button onClick={() => setOpen(true)}>Open Tearsheet</Button>
      <div ref={ref}>
        <Tabs onChange={action('Tab selection changed')}>
          <Tearsheet {...args} actions={wiredActions} open={open} onClose={() => setOpen(false)} aiLabel={aiLabel && sampleAILabel} slug={slug && sampleAILabel}>
            <TabPanels>
              <TabPanel>Tab 1</TabPanel>
              <TabPanel>Tab 2</TabPanel>
              <TabPanel>Tab 3</TabPanel>
              <TabPanel>Tab 4</TabPanel>
            </TabPanels>
          </Tearsheet>
        </Tabs>
      </div>
    </>;
}`,...(ne=(te=E.parameters)==null?void 0:te.docs)==null?void 0:ne.source}}};var ae,se,oe;L.parameters={...L.parameters,docs:{...(ae=L.parameters)==null?void 0:ae.docs,source:{originalSource:`({
  mixedSizes,
  actions,
  aiLabel,
  slug,
  ...args
}) => {
  const [open1, setOpen1] = useState(false);
  const [open2, setOpen2] = useState(false);
  const [open3, setOpen3] = useState(false);
  const ref = useRef(undefined);
  const wiredActions1 = Array.prototype.map.call(actions, action => {
    if (action.label === 'Cancel') {
      const previousClick = action.onClick;
      return {
        ...action,
        onClick: evt => {
          setOpen1(false);
          previousClick(evt);
        }
      };
    }
    return action;
  });
  const wiredActions2 = Array.prototype.map.call(actions, action => {
    if (action.label === 'Cancel') {
      const previousClick = action.onClick;
      return {
        ...action,
        onClick: evt => {
          setOpen2(false);
          previousClick(evt);
        }
      };
    }
    return action;
  });
  const wiredActions3 = Array.prototype.map.call(actions, action => {
    if (action.label === 'Cancel') {
      const previousClick = action.onClick;
      return {
        ...action,
        onClick: evt => {
          setOpen3(false);
          previousClick(evt);
        }
      };
    }
    return action;
  });
  const VariableSizeTearsheet = mixedSizes ? TearsheetNarrow : Tearsheet;
  return <>
      <style>{\`.\${pkg.prefix}--tearsheet { opacity: 0 }\`};</style>
      <div style={{
      height: '3rem'
    }} data-reserve-space="for toggle buttons" />
      <ButtonSet style={{
      display: 'flex',
      position: 'fixed',
      top: 0,
      left: 0,
      zIndex: 10000
    }}>
        <Button onClick={() => setOpen1(!open1)}>
          Toggle&nbsp;tearsheet&nbsp;1
        </Button>
        <Button onClick={() => setOpen2(!open2)}>
          Toggle&nbsp;tearsheet&nbsp;2
        </Button>
        {!mixedSizes && <Button onClick={() => setOpen3(!open3)}>
            Toggle&nbsp;tearsheet&nbsp;3
          </Button>}
      </ButtonSet>
      <div ref={ref}>
        <Tearsheet {...args} actions={wiredActions1} headerActions={<ButtonSet>
              <Button kind="primary" size="sm" style={{
          width: 'initial'
        }} onClick={() => setOpen2(true)} disabled={open2}>
                Open tearsheet 2
              </Button>
            </ButtonSet>} title="Tearsheet 1" open={open1} onClose={() => setOpen1(false)} selectorPrimaryFocus="#stacked-input-1" aiLabel={aiLabel && sampleAILabel} slug={slug && sampleAILabel}>
          <div className="tearsheet-stories__dummy-content-block">
            Main content 1
            <TextInput id="stacked-input-1" labelText="Enter an important value here" />
          </div>
        </Tearsheet>
        <VariableSizeTearsheet {...args} actions={wiredActions2} headerActions={<ButtonSet>
              <Button kind="primary" size="sm" style={{
          width: 'initial'
        }} onClick={() => setOpen3(true)} disabled={open3}>
                Open tearsheet 3
              </Button>
            </ButtonSet>} title="Tearsheet 2" open={open2} onClose={() => setOpen2(false)} selectorPrimaryFocus="#stacked-input-2" aiLabel={aiLabel && sampleAILabel} slug={slug && sampleAILabel}>
          <div className="tearsheet-stories__dummy-content-block">
            Main content 2
            <TextInput id="stacked-input-2" labelText="Enter an important value here" />
          </div>
        </VariableSizeTearsheet>
        {!mixedSizes && <Tearsheet {...args} actions={wiredActions3} title="Tearsheet 3" open={open3} onClose={() => setOpen3(false)} selectorPrimaryFocus="#stacked-input-3" aiLabel={aiLabel && sampleAILabel} slug={slug && sampleAILabel}>
            <div className="tearsheet-stories__dummy-content-block">
              Main content 3
              <TextInput id="stacked-input-3" labelText="Enter an important value here" />
            </div>
          </Tearsheet>}
      </div>
    </>;
}`,...(oe=(se=L.parameters)==null?void 0:se.docs)==null?void 0:oe.source}}};var re,le,ie;O.parameters={...O.parameters,docs:{...(re=O.parameters)==null?void 0:re.docs,source:{originalSource:`({
  mixedSizes,
  actions,
  aiLabel,
  slug,
  ...args
}) => {
  const [open1, setOpen1] = useState(false);
  const [open2, setOpen2] = useState(false);
  const [open3, setOpen3] = useState(false);
  const ref = useRef(undefined);
  const wiredActions1 = Array.prototype.map.call(actions, action => {
    if (action.label === 'Cancel') {
      const previousClick = action.onClick;
      return {
        ...action,
        onClick: evt => {
          setOpen1(false);
          previousClick(evt);
        }
      };
    }
    return action;
  });
  const wiredActions2 = Array.prototype.map.call(actions, action => {
    if (action.label === 'Cancel') {
      const previousClick = action.onClick;
      return {
        ...action,
        onClick: evt => {
          setOpen2(false);
          previousClick(evt);
        }
      };
    }
    return action;
  });
  const wiredActions3 = Array.prototype.map.call(actions, action => {
    if (action.label === 'Cancel') {
      const previousClick = action.onClick;
      return {
        ...action,
        onClick: evt => {
          setOpen3(false);
          previousClick(evt);
        }
      };
    }
    return action;
  });
  const VariableSizeTearsheet = mixedSizes ? TearsheetNarrow : Tearsheet;
  return <>
      <style>{\`.\${pkg.prefix}--tearsheet { opacity: 0 }\`};</style>
      <div style={{
      height: '3rem'
    }} data-reserve-space="for toggle buttons" />
      <ButtonSet style={{
      display: 'flex',
      position: 'fixed',
      top: 0,
      left: 0,
      zIndex: 10000
    }}>
        <Button onClick={() => setOpen1(!open1)}>
          Toggle&nbsp;tearsheet&nbsp;1
        </Button>
        <Button onClick={() => setOpen2(!open2)}>
          Toggle&nbsp;tearsheet&nbsp;2
        </Button>
        {!mixedSizes && <Button onClick={() => setOpen3(!open3)}>
            Toggle&nbsp;tearsheet&nbsp;3
          </Button>}
      </ButtonSet>
      <div ref={ref}>
        <Tearsheet {...args} actions={wiredActions1} headerActions={<ButtonSet>
              <Button kind="primary" size="sm" style={{
          width: 'initial'
        }} onClick={() => setOpen2(true)} disabled={open2}>
                Open tearsheet 2
              </Button>
            </ButtonSet>} title="Tearsheet 1" open={open1} onClose={() => setOpen1(false)} selectorPrimaryFocus="#stacked-input-1" aiLabel={aiLabel && sampleAILabel} slug={slug && sampleAILabel}>
          <div className="tearsheet-stories__dummy-content-block">
            Main content 1
            <TextInput id="stacked-input-1" labelText="Enter an important value here" />
          </div>
        </Tearsheet>
        <VariableSizeTearsheet {...args} actions={wiredActions2} headerActions={<ButtonSet>
              <Button kind="primary" size="sm" style={{
          width: 'initial'
        }} onClick={() => setOpen3(true)} disabled={open3}>
                Open tearsheet 3
              </Button>
            </ButtonSet>} title="Tearsheet 2" open={open2} onClose={() => setOpen2(false)} selectorPrimaryFocus="#stacked-input-2" aiLabel={aiLabel && sampleAILabel} slug={slug && sampleAILabel}>
          <div className="tearsheet-stories__dummy-content-block">
            Main content 2
            <TextInput id="stacked-input-2" labelText="Enter an important value here" />
          </div>
        </VariableSizeTearsheet>
        {!mixedSizes && <Tearsheet {...args} actions={wiredActions3} title="Tearsheet 3" open={open3} onClose={() => setOpen3(false)} selectorPrimaryFocus="#stacked-input-3" aiLabel={aiLabel && sampleAILabel} slug={slug && sampleAILabel}>
            <div className="tearsheet-stories__dummy-content-block">
              Main content 3
              <TextInput id="stacked-input-3" labelText="Enter an important value here" />
            </div>
          </Tearsheet>}
      </div>
    </>;
}`,...(ie=(le=O.parameters)==null?void 0:le.docs)==null?void 0:ie.source}}};const Ut=["tearsheet","withNavigation","withInfluencer","ReturnFocusToOpenButton","firstElementDisabled","fullyLoaded","stacked","stackedMixedSizes"];export{I as ReturnFocusToOpenButton,Ut as __namedExportsOrder,Ht as default,A as firstElementDisabled,E as fullyLoaded,L as stacked,O as stackedMixedSizes,C as tearsheet,v as withInfluencer,k as withNavigation};
