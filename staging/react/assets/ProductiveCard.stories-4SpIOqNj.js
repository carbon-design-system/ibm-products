import{e,S as E,u as x,T as k,a as D,b as G}from"./iframe-YKw9nL_F.js";import{G as A}from"./Grid-CAsrC2cP.js";import{C as I}from"./Column-CyCZvuP9.js";import{A as M,a as B}from"./index-CXIj4-f9.js";import{P as C}from"./ProductiveCard-fZPjLk4C.js";import{I as T}from"./bucket-9-B4IHLx-c.js";import{E as _}from"./bucket-6-BAcs6e6G.js";import{T as v}from"./bucket-17-C_gzCj3y.js";import{b as N}from"./bucket-0-glzR4AjS.js";import"./bucket-18-DZTAQj9X.js";import"./devtools-DSZ92uOv.js";import"./props-helper-CihWmQAT.js";import"./Card-HioQ1P8I.js";import"./MenuItem-DOVlXix4.js";import"./useControllableState-KAFbqoVc.js";import"./useAttachedMenu-Di7wXaNY.js";import"./Text-CjneqIZ1.js";import"./bucket-2-CwIRUxho.js";import"./index-BF8Zf0QK.js";import"./mergeRefs-91-mP8KM.js";import"./bucket-12-DXgkfsZm.js";import"./wrapFocus-DNecG-Dg.js";import"./useOutsideClick-BuwC9cvu.js";import"./index-ed0vUSqW.js";import"./index-CPo7HSbm.js";import"./LayerContext-BQcY-NI5.js";import"./clamp--00YEiB8.js";const W="#root{inline-size:100%}.productive-card-stories__graph{border:10px solid var(--cds-border-subtle-01, #c6c6c6);margin:0 auto 1.5rem;block-size:100px;border-block-end:0;border-inline-end-color:var(--cds-support-success, #24a148);border-inline-start-color:var(--cds-support-error, #da1e28);border-start-end-radius:110px;border-start-start-radius:110px;inline-size:100%}.productive-card-stories__visually-hidden{position:absolute;overflow:hidden;padding:0;border:0;block-size:1px;clip:rect(0,0,0,0);inline-size:1px;visibility:inherit;white-space:nowrap}",y=()=>e.createElement(E,{altGuidelinesHref:"https://pages.github.ibm.com/carbon/ibm-products/components/card/productive-card/usage/",blocks:[{story:u},{story:m},{story:a},{story:s},{story:d},{story:g},{story:p},{story:c},{story:i},{story:l,description:"To include an overflow menu within the productive card, you should provide an array of objects. These will map to the overflow items. All supported props from `OverflowItem` will be passed through to the overflow menu items created via the `overflowActions` prop."},{title:"With AI label",description:"An AI Label is intended for any scenario where something is being generated by AI to reinforce AI transparency, accountability, and explainability at the UI level.",source:{language:"html",code:`
          <ProductiveCard
  onClick={() => {}}
  onKeyDown={() => {}}
  primaryButtonText="Ghost button"
  decorator={<AILabel>...</AILabel> || true}
  title="Title"
>
  <React.Fragment key=".0">
    <div className="graph" />
    <p>
      Productive content text
    </p>
    <p>
      Productive content text
    </p>
  </React.Fragment>
</ProductiveCard>
          `}},{description:"Clickable tiles only accept a boolean value of true for the decorator property.",source:{language:"html",code:`
          <ProductiveCard
  onClick={() => {}}
  onKeyDown={() => {}}
  primaryButtonText="Ghost button"
  decorator={true}
  title="Title"
>
  <React.Fragment key=".0">
    <div className="graph" />
    <p>
      Productive content text
    </p>
    <p>
      Productive content text
    </p>
  </React.Fragment>
</ProductiveCard>
          `}}]});y.__docgenInfo={description:"",methods:[],displayName:"DocsPage"};const{action:t}=__STORYBOOK_MODULE_ACTIONS__,b="productive-card-stories",O=o=>{switch(o){case 1:return e.createElement(M,{className:"decorator-container",size:"xs"},e.createElement(B,null,e.createElement("div",null,e.createElement("p",{className:"secondary"},"AI Explained"),e.createElement("h1",null,"84%"),e.createElement("p",{className:"secondary bold"},"Confidence score"),e.createElement("p",{className:"secondary"},"This is not really Lorem Ipsum but the spell checker did not like the previous text with it's non-words which is why this unwieldy sentence, should one choose to call it that, here."),e.createElement("hr",null),e.createElement("p",{className:"secondary"},"Model type"),e.createElement("p",{className:"bold"},"Foundation model"))));case 2:return e.createElement(k,null,e.createElement(D,{label:"Additional information"},e.createElement(T,null)),e.createElement(G,null,e.createElement("p",null,"Custom content here")));default:return}},pe={title:"Components/Cards/ProductiveCard",component:C,tags:["autodocs"],parameters:{styles:W,docs:{page:y}},argTypes:{columnSizeSm:{control:{type:"select"},options:[1,2,3,4]},columnSizeMd:{control:{type:"select"},options:[2,4,6,8]},columnSizeLg:{control:{type:"select"},options:[4,8,12,16]},slug:{control:{type:"select",labels:{0:"No AI slug",1:"with AI Slug"},default:0},options:[!1,!0]},decorator:{control:{type:"select",labels:{0:"No AI label",1:"with AI label",2:"With non AI Label component",3:"with hollow AI label (boolean)"},default:0},options:[0,1,2,3]}},decorators:[o=>{const h=x();return e.createElement("div",{className:`${h}--grid card-story`},o())}]},r={title:"Title",columnSizeSm:4,columnSizeMd:8,columnSizeLg:8,children:e.createElement(e.Fragment,null,e.createElement("div",{className:`${b}__graph`},e.createElement("span",{className:`${b}__visually-hidden`},"graph showing progress")),e.createElement("p",null,"Productive content text"),e.createElement("p",null,"Productive content text")),actionIcons:[{id:"1","data-testid":"test-id-1",icon:o=>e.createElement(_,{size:16,...o}),onClick:t("on click"),iconDescription:"Edit"},{id:"2","data-testid":"test-id-2",icon:o=>e.createElement(v,{size:16,...o}),onClick:t("on click"),iconDescription:"Delete"}]},n=o=>{const{children:h,columnSizeSm:f,columnSizeMd:P,columnSizeLg:L,decorator:z,...w}=o;return e.createElement("main",null,e.createElement(A,null,e.createElement(I,{sm:f,md:P,lg:L},e.createElement(C,{...w,decorator:z&&(z===3||O(z))},h))))},a=n.bind({});a.args={...r};const c=n.bind({});c.args={...r,description:"caption"};const i=n.bind({});i.args={...r,label:"Label"};const s=n.bind({});s.args={...r,title:"",label:"Label",actionsPlacement:"bottom",primaryButtonText:"Read more"};const l=n.bind({});l.args={...r,iconDescription:"Option",overflowAriaLabel:"Overflow menu",overflowActions:[{id:"1",itemText:"Edit",onClick:()=>{t("click")},onKeyDown:()=>{t("keydown")}},{id:"2",itemText:"Delete",onClick:()=>{t("click")},onKeyDown:()=>{t("keydown")}}]};const d=n.bind({});d.args={...r,primaryButtonText:"Read more"};const m=n.bind({});m.args={...r,primaryButtonText:"Read more",actionsPlacement:"bottom",title:"",label:"Label"};const u=n.bind({});u.args={...r,onClick:t("on click"),onKeyDown:t("on keydown"),primaryButtonText:"Read more",clickZone:"two",actionIcons:[]};const p=n.bind({});p.args={...r,primaryButtonText:"Read more",primaryButtonHref:"#"};const g=n.bind({});g.args={...r,primaryButtonPlacement:"top",primaryButtonText:"Read more",primaryButtonIcon:o=>e.createElement(v,{size:16,...o}),primaryButtonDisabled:!0};const S=n.bind({});S.args={...r,actionIcons:[{id:"1",icon:o=>e.createElement(N,{size:18,...o}),iconDescription:"Visit carbon official site",link:{href:"https://carbondesignsystem.com/",target:"_blank",rel:"noreferrer noopener"}}]};a.parameters={...a.parameters,docs:{...a.parameters?.docs,source:{originalSource:`opts => {
  const {
    children,
    columnSizeSm,
    columnSizeMd,
    columnSizeLg,
    decorator,
    ...args
  } = opts;
  return <main>
      <Grid>
        <Column sm={columnSizeSm} md={columnSizeMd} lg={columnSizeLg}>
          <ProductiveCard {...args} decorator={decorator && (decorator === 3 || sampleDecorator(decorator))}>
            {children}
          </ProductiveCard>
        </Column>
      </Grid>
    </main>;
}`,...a.parameters?.docs?.source}}};c.parameters={...c.parameters,docs:{...c.parameters?.docs,source:{originalSource:`opts => {
  const {
    children,
    columnSizeSm,
    columnSizeMd,
    columnSizeLg,
    decorator,
    ...args
  } = opts;
  return <main>
      <Grid>
        <Column sm={columnSizeSm} md={columnSizeMd} lg={columnSizeLg}>
          <ProductiveCard {...args} decorator={decorator && (decorator === 3 || sampleDecorator(decorator))}>
            {children}
          </ProductiveCard>
        </Column>
      </Grid>
    </main>;
}`,...c.parameters?.docs?.source}}};i.parameters={...i.parameters,docs:{...i.parameters?.docs,source:{originalSource:`opts => {
  const {
    children,
    columnSizeSm,
    columnSizeMd,
    columnSizeLg,
    decorator,
    ...args
  } = opts;
  return <main>
      <Grid>
        <Column sm={columnSizeSm} md={columnSizeMd} lg={columnSizeLg}>
          <ProductiveCard {...args} decorator={decorator && (decorator === 3 || sampleDecorator(decorator))}>
            {children}
          </ProductiveCard>
        </Column>
      </Grid>
    </main>;
}`,...i.parameters?.docs?.source}}};s.parameters={...s.parameters,docs:{...s.parameters?.docs,source:{originalSource:`opts => {
  const {
    children,
    columnSizeSm,
    columnSizeMd,
    columnSizeLg,
    decorator,
    ...args
  } = opts;
  return <main>
      <Grid>
        <Column sm={columnSizeSm} md={columnSizeMd} lg={columnSizeLg}>
          <ProductiveCard {...args} decorator={decorator && (decorator === 3 || sampleDecorator(decorator))}>
            {children}
          </ProductiveCard>
        </Column>
      </Grid>
    </main>;
}`,...s.parameters?.docs?.source}}};l.parameters={...l.parameters,docs:{...l.parameters?.docs,source:{originalSource:`opts => {
  const {
    children,
    columnSizeSm,
    columnSizeMd,
    columnSizeLg,
    decorator,
    ...args
  } = opts;
  return <main>
      <Grid>
        <Column sm={columnSizeSm} md={columnSizeMd} lg={columnSizeLg}>
          <ProductiveCard {...args} decorator={decorator && (decorator === 3 || sampleDecorator(decorator))}>
            {children}
          </ProductiveCard>
        </Column>
      </Grid>
    </main>;
}`,...l.parameters?.docs?.source}}};d.parameters={...d.parameters,docs:{...d.parameters?.docs,source:{originalSource:`opts => {
  const {
    children,
    columnSizeSm,
    columnSizeMd,
    columnSizeLg,
    decorator,
    ...args
  } = opts;
  return <main>
      <Grid>
        <Column sm={columnSizeSm} md={columnSizeMd} lg={columnSizeLg}>
          <ProductiveCard {...args} decorator={decorator && (decorator === 3 || sampleDecorator(decorator))}>
            {children}
          </ProductiveCard>
        </Column>
      </Grid>
    </main>;
}`,...d.parameters?.docs?.source}}};m.parameters={...m.parameters,docs:{...m.parameters?.docs,source:{originalSource:`opts => {
  const {
    children,
    columnSizeSm,
    columnSizeMd,
    columnSizeLg,
    decorator,
    ...args
  } = opts;
  return <main>
      <Grid>
        <Column sm={columnSizeSm} md={columnSizeMd} lg={columnSizeLg}>
          <ProductiveCard {...args} decorator={decorator && (decorator === 3 || sampleDecorator(decorator))}>
            {children}
          </ProductiveCard>
        </Column>
      </Grid>
    </main>;
}`,...m.parameters?.docs?.source}}};u.parameters={...u.parameters,docs:{...u.parameters?.docs,source:{originalSource:`opts => {
  const {
    children,
    columnSizeSm,
    columnSizeMd,
    columnSizeLg,
    decorator,
    ...args
  } = opts;
  return <main>
      <Grid>
        <Column sm={columnSizeSm} md={columnSizeMd} lg={columnSizeLg}>
          <ProductiveCard {...args} decorator={decorator && (decorator === 3 || sampleDecorator(decorator))}>
            {children}
          </ProductiveCard>
        </Column>
      </Grid>
    </main>;
}`,...u.parameters?.docs?.source}}};p.parameters={...p.parameters,docs:{...p.parameters?.docs,source:{originalSource:`opts => {
  const {
    children,
    columnSizeSm,
    columnSizeMd,
    columnSizeLg,
    decorator,
    ...args
  } = opts;
  return <main>
      <Grid>
        <Column sm={columnSizeSm} md={columnSizeMd} lg={columnSizeLg}>
          <ProductiveCard {...args} decorator={decorator && (decorator === 3 || sampleDecorator(decorator))}>
            {children}
          </ProductiveCard>
        </Column>
      </Grid>
    </main>;
}`,...p.parameters?.docs?.source}}};g.parameters={...g.parameters,docs:{...g.parameters?.docs,source:{originalSource:`opts => {
  const {
    children,
    columnSizeSm,
    columnSizeMd,
    columnSizeLg,
    decorator,
    ...args
  } = opts;
  return <main>
      <Grid>
        <Column sm={columnSizeSm} md={columnSizeMd} lg={columnSizeLg}>
          <ProductiveCard {...args} decorator={decorator && (decorator === 3 || sampleDecorator(decorator))}>
            {children}
          </ProductiveCard>
        </Column>
      </Grid>
    </main>;
}`,...g.parameters?.docs?.source}}};S.parameters={...S.parameters,docs:{...S.parameters?.docs,source:{originalSource:`opts => {
  const {
    children,
    columnSizeSm,
    columnSizeMd,
    columnSizeLg,
    decorator,
    ...args
  } = opts;
  return <main>
      <Grid>
        <Column sm={columnSizeSm} md={columnSizeMd} lg={columnSizeLg}>
          <ProductiveCard {...args} decorator={decorator && (decorator === 3 || sampleDecorator(decorator))}>
            {children}
          </ProductiveCard>
        </Column>
      </Grid>
    </main>;
}`,...S.parameters?.docs?.source}}};const ge=["Default","WithCaption","WithLabel","LabelOnly","WithOverflow","SupplementalBottomBar","ComplexBottomBar","Clickable","WithButtonHref","WithActionGhostButton","WithActionIconLink"];export{u as Clickable,m as ComplexBottomBar,a as Default,s as LabelOnly,d as SupplementalBottomBar,g as WithActionGhostButton,S as WithActionIconLink,p as WithButtonHref,c as WithCaption,i as WithLabel,l as WithOverflow,ge as __namedExportsOrder,pe as default};
