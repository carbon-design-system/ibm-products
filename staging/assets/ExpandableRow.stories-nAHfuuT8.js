import{e as i,r as w}from"./index-BOZkNhcz.js";import{a as p}from"./chunk-D5ZWXAHU-DlerbUHg.js";import{g as f}from"./getBatchActions-DOmPvvNU.js";import{a as E,D as m,m as h,u as D}from"./_storybook-styles-gYCrqgPX.js";import{D as S}from"./DatagridActions-C9yLdlJ4.js";import{D as T}from"./DatagridPagination-BVtVI2oS.js";import{A as r}from"./getArgTypes-Ci8wh0IQ.js";import{S as C}from"./StoryDocsPage-BhgqlSUq.js";import{u as b}from"./useExpandedRow-CozUhLKL.js";import{u as H}from"./useSelectRows-DSlCxAqi.js";import{u as R}from"./useStickyColumn-CKTUYa8v.js";import{b as B}from"./settings-DqneCnpo.js";import{a as y}from"./bucket-6-Bh7P8rIU.js";import{T as k}from"./bucket-17-CXe10FQN.js";import"./_commonjsHelpers-BosuxZz1.js";import"./v4-CtRu48qb.js";import"./bucket-0-BxsXdw_5.js";import"./index-Cd8snwnz.js";import"./index-hBZdtWkn.js";import"./index-2uioG_CI.js";import"./devtools-Bjt2CwRv.js";import"./feature-flags-D5BeACme.js";import"./TableRow-CU2-ZFr3.js";import"./index-CN8ymWyE.js";import"./wrapComponent-BmELSzk6.js";import"./TableToolbar-EFhxjZFU.js";import"./Text-Rb3iZwUo.js";import"./ErrorEmptyState-DmVH-tBu.js";import"./Link-BqtwLYC0.js";import"./EmptyState-DBARPyVY.js";import"./props-helper-DIx2Ramn.js";import"./index-pvIsy2-t.js";import"./EmptyStateV2-ZUIsdWvP.js";import"./iframe-BLi-C7G1.js";import"./ErrorIllustration-DDV2YgoZ.js";import"./useId-Cb6M4-BZ.js";import"./uuidv4-BQrI85uz.js";import"./events-OVwOsPzJ.js";import"./NoDataEmptyState-BQTPr5nG.js";import"./NoDataIllustration-CxP-HZKR.js";import"./NotFoundEmptyState-DWxOYvcu.js";import"./NotFoundIllustration-CUhP8rkd.js";import"./index.esm-BDMpHATI.js";import"./usePreviousValue-BEwlonP-.js";import"./useResizeObserver-DcNhBpO-.js";import"./useIsomorphicEffect-C0ObacuX.js";import"./MenuItem-BUajeAL9.js";import"./useControllableState-BHFQnaNh.js";import"./useAttachedMenu-S-3pNb8o.js";import"./bucket-2-BRYD7UVO.js";import"./useWindowResize-CIi3x59S.js";import"./mergeRefs-CTUecegF.js";import"./getFocusableElements-BW7cf991.js";import"./index-CtW6Lsnp.js";import"./index-BwgvqBjT.js";import"./useClickOutside-DHVF5Qo6.js";import"./AccordionItem-B9o-Ah8b.js";import"./Search-ByDDtaAB.js";import"./FormContext-qEw5DNxz.js";import"./bucket-14-B-58TyUV.js";import"./index-26QMFoPE.js";import"./LayerContext-DxTbsTfh.js";import"./index-BfLKLwdO.js";import"./Checkbox-DURplLdT.js";import"./bucket-18-D95sPjw6.js";import"./DatePicker-C50cTdwC.js";import"./bucket-1-D7l_4S5E.js";import"./Dropdown-D4dJ8elh.js";import"./index-CNhKwCqX.js";import"./FormGroup-CwhL9o_y.js";import"./NumberInput-CtjGEpw1.js";import"./useNormalizedInputProps-CMiK_Vbq.js";import"./bucket-16-B-hxUebt.js";import"./RadioButton-57mE-Hhs.js";import"./RadioButtonGroup-DraaP4WA.js";import"./MultiSelect-tJEJ51mj.js";import"./toNumber-cOipFfRl.js";import"./ActionSet-BJEln6zp.js";import"./ButtonSet-DkA8no1v.js";import"./InlineLoading-82KDAKCf.js";import"./TagSet-KyB4Tq5X.js";import"./Tag-Ld9LHRlu.js";import"./DefinitionTooltip-J5OgfIIa.js";import"./DismissibleTag-CgAkKprD.js";import"./ComposedModal-CpktCI_l.js";import"./requiredIfGivenPropIsTruthy-CU7JwK8h.js";import"./wrapFocus-CTxWTAfl.js";import"./usePortalTarget-D4ub4VO0.js";import"./OperationalTag-CxiLneNY.js";import"./SkeletonText-C_VQyL87.js";import"./getNodeTextContent-C8IeKkUQ.js";import"./index-CD9LV9at.js";import"./bucket-7-Djjnd2yB.js";import"./index-DUK5nPFV.js";import"./bucket-12-CsE6RCLW.js";import"./OverflowMenuItem-BblcxAUS.js";import"./TableToolbarSearch-CVRewwJu.js";import"./bucket-5-DaBRhwMZ.js";import"./Select-C_l68ebb.js";import"./SelectItem-L_lAK4_1.js";import"./index-CKePA1sA.js";import"./index-CO8sV34W.js";import"./index-ogSvIofg.js";import"./story-helper-HIAsLHzl.js";import"./useFocusRowExpander-UbaPBXPx.js";import"./TableSelectRow-DmUXdobQ.js";const P=()=>B.prefix,c=()=>i.createElement(C,{omitCodedExample:!0,blocks:[{description:"The `Datagrid` supports expandable rows with the use of the `useExpandedRow` hook.",source:{language:"jsx",code:`
import { Datagrid, useDatagrid, useExpandedRow } from '@carbon/ibm-products';

const App = () => {
  const columns = React.useMemo(() => defaultHeader, []); // These are the columns that will be used by the datagrid
  const [data] = useState(makeData(10)); // This is the data that will be rendered by the datagrid

  const expansionRenderer = ({ row }) => {
    return <div>Content for row index: {row.id}</div>;
  };

  const datagridState = useDatagrid(
    {
      columns,
      data,
      ExpandedRowContentComponent: expansionRenderer,
      expanderButtonTitleExpanded: 'Collapse row',
      expanderButtonTitleCollapsed: 'Expand row',
    },
    useExpandedRow
  );

  return <Datagrid datagridState={datagridState} />;
};
          `}}]});c.__docgenInfo={description:"",methods:[],displayName:"DocsPage"};const Gt={title:"Deprecated/Datagrid/Datagrid/ExpandableRow",component:m,tags:["autodocs"],parameters:{styles:E,docs:{page:c},layout:"fullscreen",argTypes:{featureFlags:{table:{disable:!0}}}}},A=[{Header:"Row Index",accessor:(t,o)=>o,sticky:"left",id:"rowIndex"},{Header:"First Name",accessor:"firstName"},{Header:"Last Name",accessor:"lastName"},{Header:"Age",accessor:"age",width:50},{Header:"Visits",accessor:"visits",width:60},{Header:"Someone 1",accessor:"someone1"},{Header:"Someone 2",accessor:"someone2"},{Header:"Someone 3",accessor:"someone3"},{Header:"Someone 4",accessor:"someone4"},{Header:"Someone 5",accessor:"someone5"},{Header:"Someone 6",accessor:"someone6"},{Header:"Someone 7",accessor:"someone7"},{Header:"Someone 8",accessor:"someone8"},{Header:"Someone 9",accessor:"someone9"},{Header:"Someone 10",accessor:"someone10"}],a={gridTitle:"Data table title",gridDescription:"Additional information if needed",rowActions:[{id:"edit",itemText:"Edit",icon:y,onClick:p("Clicked row action: edit")},{id:"delete",itemText:"Delete",icon:k,isDelete:!0,onClick:p("Clicked row action: delete")}],expandedContentHeight:96,expanderButtonTitleExpanded:"Collapse row",expanderButtonTitleCollapsed:"Expand row"},N=({row:t})=>{const o=P();return i.createElement("div",{className:`${o}__test-class-with-prefix-hook`},"Content for row index: ",t.id)},_=({...t})=>{const o=i.useMemo(()=>[...A],[]),[l]=w.useState(h(10)),u=D({columns:o,data:l,initialState:{pageSize:10,pageSizes:[5,10,25,50]},DatagridActions:S,DatagridPagination:T,ExpandedRowContentComponent:N,tags:["autodocs"],batchActions:!0,toolbarBatchActions:f(),onRowExpand:(x,g)=>console.log(x,g),...t.defaultGridProps},R,H,b);return i.createElement(m,{datagridState:u})},v=({...t})=>i.createElement(_,{defaultGridProps:{...t}}),G={gridTitle:a.gridTitle,gridDescription:a.gridDescription,expandedContentHeight:a.expandedContentHeight,expanderButtonTitleExpanded:a.expanderButtonTitleExpanded,expanderButtonTitleCollapsed:a.expanderButtonTitleCollapsed},I="With expandable row",e=v.bind({});e.storyName=I;e.argTypes={gridTitle:r.gridTitle,gridDescription:r.gridDescription,expandedContentHeight:r.expandedContentHeight,expanderButtonTitleExpanded:r.expanderButtonTitleExpanded,expanderButtonTitleCollapsed:r.expanderButtonTitleCollapsed};e.args={...G};var s,n,d;e.parameters={...e.parameters,docs:{...(s=e.parameters)==null?void 0:s.docs,source:{originalSource:`({
  ...args
}) => {
  return <ExpandedRows defaultGridProps={{
    ...args
  }} />;
}`,...(d=(n=e.parameters)==null?void 0:n.docs)==null?void 0:d.source}}};const It=["ExpandableRowStory"];export{e as ExpandableRowStory,It as __namedExportsOrder,Gt as default};
