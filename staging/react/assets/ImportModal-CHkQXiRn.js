import{r as T,u as ce,p as $,e as i,c as me,B as q,P as e}from"./iframe-BixY_nzU.js";import{C as ue,M as ye,a as fe,b as ge}from"./ComposedModal-C-yJmSnV.js";import{F as he,a as be}from"./codePreviewer-Dlgs-ps8.js";import{T as Te}from"./TextInput-Cj-cD7zZ.js";import{g as qe}from"./devtools-BgBiig7t.js";import{u as Fe}from"./usePortalTarget-DYGy-m0K.js";import{u as z}from"./uuidv4-BN2rGLQG.js";import{A as Ee}from"./bucket-0-tkbzYG9T.js";const F="ImportModal";let c=T.forwardRef(({accept:y=[],className:w,defaultErrorBody:f,defaultErrorHeader:g,description:E,fetchErrorBody:C,fetchErrorHeader:H,fileDropHeader:v,fileDropLabel:O,fileUploadLabel:R,inputButtonIcon:k,inputButtonText:P,inputId:M,inputLabel:h,inputPlaceholder:U,invalidFileTypeErrorBody:A,invalidFileTypeErrorHeader:L,invalidIconDescription:j,maxFileSize:x,maxFileSizeErrorBody:V,maxFileSizeErrorHeader:G,onClose:S,onRequestSubmit:J,open:K,portalTarget:Q,primaryButtonText:W,secondaryButtonText:X,title:B,...Y},Z)=>{const ee=ce(),[l,m]=T.useState([]),[d,_]=T.useState(""),te=Fe(Q),re=t=>{const s=new Set(y),o=t.name,n=t.type,r=`.${o.split(".").pop()}`;return!(s.has(n)||s.has(r)||y.length===0)},b=t=>{const o=[...t.map(n=>{const r={uuid:n.uuid||z(),status:"edit",iconDescription:j,name:n.name,fileSize:n.size,invalidFileType:n.invalidFileType,fileData:n,fetchError:n.fetchError};return r.fetchError?(r.errorBody=C||f,r.errorSubject=H||g,r.invalid=!0):r.invalidFileType?(r.errorBody=A||f,r.errorSubject=L||g,r.invalid=!0):x&&(r?.fileSize??0)>x&&(r.errorBody=V||f,r.errorSubject=G||g,r.invalid=!0),r})];m(o)},ie=async t=>{t.preventDefault();const s=d.substring(d.lastIndexOf("/")+1).split("?")[0],o={name:s,status:"uploading",uuid:z()};m([o]);try{const n=await fetch(d);if(!n.ok||n.status!==200)throw new Error(`${n.status}`);const r=await n.blob(),u=new File([r],s,{type:r.type});u.invalidFileType=re(u),u.uuid=o.uuid,b([u])}catch{const r={...o,fetchError:!0};b([r])}},ne=(t,{addedFiles:s})=>{t.stopPropagation(),b(s)},ae=t=>{const s=l.filter(o=>o.uuid!==t);m(s)},se=()=>{J(l)},oe=t=>{_(t.target.value)},D=()=>{m([]),_(""),S&&S()},I=l.length,N=l.filter(t=>!t.invalid).length,p=I>0,le=!p||!(N>0),de=!d||p,pe=`${N} / ${I} ${R}`,a=`${$.prefix}--import-modal`;return te(i.createElement(ue,{...Y,open:K,ref:Z,...qe(F),"aria-label":B,className:me(a,w),size:"sm",preventCloseOnClickOutside:!0,onClose:D},i.createElement(ye,{className:`${a}__header`,title:B}),i.createElement(fe,{className:`${a}__body-container`},E&&i.createElement("p",{className:`${a}__body`},E),v&&i.createElement("p",{className:`${a}__file-drop-header`},v),i.createElement(he,{accept:y,labelText:O,onAddFiles:ne,disabled:p,"data-modal-primary-focus":!0}),h&&i.createElement("p",{className:`${a}__label`},h),i.createElement("div",{className:`${a}__input-group`},i.createElement(Te,{labelText:"",id:M||"",onChange:oe,placeholder:U,value:d,disabled:p,"aria-label":h}),i.createElement(q,{onClick:ie,className:`${a}__import-button`,size:"md",disabled:de,renderIcon:k?t=>i.createElement(Ee,{size:20,...t}):void 0},P)),i.createElement("div",{className:`${ee}--file-container ${a}__file-container`},p&&i.createElement("p",{className:`${a}__helper-text`},pe),l.map(t=>i.createElement(be,{key:t.uuid,onDelete:()=>ae(t.uuid),name:t.name,status:t.status,size:"lg",uuid:t.uuid,iconDescription:t.iconDescription,invalid:t.invalid,errorBody:t.errorBody,errorSubject:t.errorSubject,filesize:t.fileSize})))),i.createElement(ge,{className:`${a}__footer`},i.createElement(q,{type:"button",kind:"secondary",onClick:D},X),i.createElement(q,{type:"submit",kind:"primary",onClick:se,disabled:le},W))))});c=$.checkComponentEnabled(c,F);c.propTypes={accept:e.array,className:e.string,defaultErrorBody:e.string.isRequired,defaultErrorHeader:e.string.isRequired,description:e.string,fetchErrorBody:e.string,fetchErrorHeader:e.string,fileDropHeader:e.string,fileDropLabel:e.string,fileUploadLabel:e.string,inputButtonIcon:e.bool,inputButtonText:e.string.isRequired,inputId:e.string,inputLabel:e.string,inputPlaceholder:e.string,invalidFileTypeErrorBody:e.string,invalidFileTypeErrorHeader:e.string,invalidIconDescription:e.string,maxFileSize:e.number,maxFileSizeErrorBody:e.string,maxFileSizeErrorHeader:e.string,onClose:e.func,onRequestSubmit:e.func.isRequired,open:e.bool.isRequired,portalTarget:e.node,primaryButtonText:e.string.isRequired,secondaryButtonText:e.string.isRequired,title:e.string.isRequired};c.displayName=F;c.__docgenInfo={description:"",methods:[],displayName:"ImportModal",props:{accept:{required:!1,tsType:{name:"Array",elements:[{name:"string"}],raw:"string[]"},description:"Specifies the file types that are valid for importing",defaultValue:{value:"[]",computed:!1},type:{name:"array"}},className:{required:!1,tsType:{name:"string"},description:"Optional class name",type:{name:"string"}},defaultErrorBody:{required:!0,tsType:{name:"string"},description:"The default message shown for an import error",type:{name:"string"}},defaultErrorHeader:{required:!0,tsType:{name:"string"},description:"The default header that is displayed to show an error message",type:{name:"string"}},description:{required:!1,tsType:{name:"string"},description:"Content that is displayed inside the modal",type:{name:"string"}},fetchErrorBody:{required:!1,tsType:{name:"string"},description:"Optional error body to display specifically for a fetch error",type:{name:"string"}},fetchErrorHeader:{required:!1,tsType:{name:"string"},description:"Optional error header to display specifically for a fetch error",type:{name:"string"}},fileDropHeader:{required:!1,tsType:{name:"string"},description:"Header for the drag and drop box",type:{name:"string"}},fileDropLabel:{required:!1,tsType:{name:"string"},description:"Label for the drag and drop box",type:{name:"string"}},fileUploadLabel:{required:!1,tsType:{name:"string"},description:"Label that appears when a file is uploaded to show number of files (1 / 1)",type:{name:"string"}},inputButtonIcon:{required:!1,tsType:{name:"boolean"},description:"Button icon for import by url button",type:{name:"bool"}},inputButtonText:{required:!0,tsType:{name:"string"},description:"Button text for import by url button",type:{name:"string"}},inputId:{required:!1,tsType:{name:"string"},description:"ID for text input",type:{name:"string"}},inputLabel:{required:!1,tsType:{name:"string"},description:"Header to display above import by url",type:{name:"string"}},inputPlaceholder:{required:!1,tsType:{name:"string"},description:"Placeholder for text input",type:{name:"string"}},invalidFileTypeErrorBody:{required:!1,tsType:{name:"string"},description:"Optional error message to display specifically for a invalid file type error",type:{name:"string"}},invalidFileTypeErrorHeader:{required:!1,tsType:{name:"string"},description:"Optional error header to display specifically for a invalid file type error",type:{name:"string"}},invalidIconDescription:{required:!1,tsType:{name:"string"},description:"Description for delete file icon",type:{name:"string"}},maxFileSize:{required:!1,tsType:{name:"number"},description:"File size limit in bytes",type:{name:"number"}},maxFileSizeErrorBody:{required:!1,tsType:{name:"string"},description:"Optional error message to display specifically for a max file size error",type:{name:"string"}},maxFileSizeErrorHeader:{required:!1,tsType:{name:"string"},description:"Optional error header to display specifically for a max file size error",type:{name:"string"}},open:{required:!0,tsType:{name:"boolean"},description:"Specify whether the Modal is currently open",type:{name:"bool"}},portalTarget:{required:!1,tsType:{name:"ReactNode"},description:"The DOM node the tearsheet should be rendered within. Defaults to document.body.",type:{name:"node"}},primaryButtonText:{required:!0,tsType:{name:"string"},description:"Specify the text for the primary button",type:{name:"string"}},secondaryButtonText:{required:!0,tsType:{name:"string"},description:"Specify the text for the secondary button",type:{name:"string"}},title:{required:!0,tsType:{name:"string"},description:"The text displayed at the top of the modal",type:{name:"string"}},onClose:{description:"Specify a handler for closing modal",type:{name:"func"},required:!1},onRequestSubmit:{description:'Specify a handler for "submitting" modal. Access the imported file via `file => {}`',type:{name:"func"},required:!0}}};export{c as I};
