import{e}from"./index-DtHxqM--.js";import{a as m}from"./index-B-lxVbXh.js";import{S as d}from"./StoryDocsPage-wPPqGWyY.js";import{D as b}from"./DisplayBox-BbNwFvJS.js";import{A as p}from"./ActionBar-CKbIKlFv.js";import{a as g}from"./bucket-10-CJixWMOF.js";import{B as f}from"./bucket-1-C6RjXMcc.js";import"./_commonjsHelpers-Cpj98o6Y.js";import"./v4-CtRu48qb.js";import"./index-4poXP75K.js";import"./index-DgLvjnYm.js";import"./index-CiYgQLeJ.js";import"./index-BwG5U4EM.js";import"./iframe-Chm5YKQf.js";import"./index-Dytf1aFS.js";import"./index-DrFu-skq.js";import"./story-helper-C5uq5kSZ.js";import"./settings-Bzj6EGPa.js";import"./events-CdfZZS3f.js";import"./uuidv4-BN2rGLQG.js";import"./props-helper-57MyEezq.js";import"./index-BqgEKY31.js";import"./useAttachedMenu-DN6VGMKt.js";import"./mergeRefs-91-mP8KM.js";import"./bucket-12-BL1rFmTg.js";import"./wrapFocus-jEwItT4M.js";import"./useOutsideClick-BtJZ_vFp.js";import"./OverflowMenuItem-B6tFdKKp.js";import"./Text-Cjos7Soh.js";import"./useOverflowItems-Bix69h02.js";import"./useResizeObserver-CiQvgsPb.js";const h=".ccs-sb--display-box{position:relative;display:inline-block;color:var(--cds-text-helper, #6f6f6f);margin-block-start:3rem;padding-block-start:1rem}.ccs-sb--display-box__indicator{position:absolute;border-block-end:1px solid var(--cds-text-helper, #6f6f6f);inline-size:100%;inset-block-start:0;white-space:nowrap;font-size:var(--cds-helper-text-01-font-size, .75rem);line-height:var(--cds-helper-text-01-line-height, 1.33333);letter-spacing:var(--cds-helper-text-01-letter-spacing, .32px)}.ccs-sb--display-box__message{position:absolute;inset-block-end:.25rem}.sb-main-centered .ccs-sb--display-box__message{inline-size:inherit;text-align:center}.ccs-sb--display-box__indicator--left,.ccs-sb--display-box__indicator--right{position:absolute;block-size:0;border-block-start:.75rem solid var(--cds-text-helper, #6f6f6f);border-inline-end:.25rem solid transparent;border-inline-start:.25rem solid transparent;inline-size:0;inset-block-end:-.75rem}.ccs-sb--display-box__indicator--left{inset-inline-start:-.25rem}.ccs-sb--display-box__indicator--right{inset-inline-end:-.25rem}",n=i=>Array.from({length:i},(s,t)=>({key:`a-key-${t}`,renderIcon:t%2?o=>e.createElement(g,{size:16,...o}):o=>e.createElement(f,{size:16,...o}),iconDescription:`Action ${t}`,label:`Action ${t}`,onClick:m(`Action ${t}`)})),R={title:"Utilities/ActionBar",component:p,tags:["autodocs"],argTypes:{actions:{control:{type:"select",labels:["None","A few","A lot"]},options:[0,1,2],mapping:[[],n(10),n(20)]},containerWidth:{control:{type:"range",min:20,max:800,step:10}}},parameters:{styles:h,docs:{page:()=>e.createElement(d,{altGuidelinesHref:""})}},decorators:[i=>e.createElement(b,null,i())]},x=i=>{const{containerWidth:s,...t}={...i};return e.createElement("div",{style:{width:s}},e.createElement(p,{...t}))},r=x.bind({});r.args={actions:1,containerWidth:500,overflowAriaLabel:"Open and close additional action bar items list."};var a,c,l;r.parameters={...r.parameters,docs:{...(a=r.parameters)==null?void 0:a.docs,source:{originalSource:`argsIn => {
  const {
    containerWidth,
    ...args
  } = {
    ...argsIn
  };
  return <div style={{
    width: containerWidth
  }}>
      <ActionBar {...args} />
    </div>;
}`,...(l=(c=r.parameters)==null?void 0:c.docs)==null?void 0:l.source}}};const V=["Default"];export{r as Default,V as __namedExportsOrder,R as default};
