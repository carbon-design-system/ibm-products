import{e as i,c,p as u,P as e}from"./iframe-Cff_uvRq.js";import{g as f}from"./devtools-CBto78fy.js";const r=`${u.prefix}--delimited-list`,n="DelimitedList",t={delimiter:", ",items:[],truncate:!0},a=i.forwardRef(({className:o,delimiter:l=t.delimiter,items:s=t.items,truncate:m=t.truncate,...p},d)=>i.createElement("div",{...p,className:c(r,o,[m&&`${r}-truncate`]),ref:d,...f(n)},s.length>0?s.join(l):"â€“"));a.displayName=n;a.propTypes={className:e.string,delimiter:e.string,items:e.arrayOf(e.any),truncate:e.bool};a.__docgenInfo={description:"`DelimitedList` converts an array of items into a single line of\ncomma-separated values.",methods:[],displayName:"DelimitedList",props:{className:{required:!1,tsType:{name:"string"},description:"Provide an optional class to be applied to the containing node.",type:{name:"string"}},delimiter:{required:!1,tsType:{name:"string"},description:"The character(s) used to separate the items.",defaultValue:{value:"', '",computed:!1},type:{name:"string"}},items:{required:!1,tsType:{name:"Array",elements:[{name:"any"}],raw:"any[]"},description:"Array of items to be listed.",defaultValue:{value:"[]",computed:!1},type:{name:"arrayOf",value:{name:"any"}}},truncate:{required:!1,tsType:{name:"boolean"},description:"Toggle the component's ability to truncate or not.",defaultValue:{value:"true",computed:!1},type:{name:"bool"}}},composes:["PropsWithChildren"]};export{a as D};
