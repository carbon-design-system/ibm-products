import{R as n,r as se}from"./index-BwDkhjyp.js";import{b as ne,c as le,_ as ce,$ as me}from"./index-C8rbkH0g.js";import{P as e}from"./index-Dk74W0Oi.js";import{G as te}from"./Grid-8YiV6Fu4.js";import{C as oe}from"./Column-BcwsXbO0.js";import{A as de,a as ue}from"./index-D9SQ_G7F.js";import{S as pe}from"./StoryDocsPage-D0IWKjO6.js";import{a as E}from"./chunk-MZXVCX43-CM0pFb8Z.js";import{g as ge}from"./devtools-BXUoVCj7.js";import{p as ye}from"./settings-DI4GKhuL.js";import{p as fe}from"./props-helper-DbXaHz23.js";import{C as he}from"./Card-BQHP0sIm.js";import{b as be,A as Se}from"./bucket-0-DwwVbvd9.js";import"./_commonjsHelpers-BosuxZz1.js";import"./index-BONylQH5.js";import"./index-7nuGG3yx.js";import"./bucket-17-7Xhb4oz5.js";import"./index-BpGm7QiY.js";import"./iframe-B6oKv5UQ.js";import"../sb-preview/runtime.js";import"./extends-CCbyfPlC.js";import"./index-C2eUe6cH.js";import"./index-C0xX6qoh.js";import"./index-DrFu-skq.js";import"./story-helper-6_fmjwZ-.js";import"./tslib.es6-B4_xh3D5.js";import"./v4-CQkTLCs1.js";import"./index-CJvxHwuA.js";import"./events-OVwOsPzJ.js";import"./index-7ofX8jt7.js";import"./Text-DZylbEPL.js";import"./useAttachedMenu-DeIo1fst.js";import"./mergeRefs-CTUecegF.js";import"./bucket-12-BdJxyMSm.js";import"./wrapFocus-BBe48k1H.js";import"./index-DE-lHwKS.js";import"./LayerContext-DbU-6VX4.js";import"./bucket-6-D8gTeSgt.js";import"./bucket-9-DfCy8Gkj.js";import"./bucket-2-BgPkDhJt.js";const re=t=>{let{as:r="div",className:s,children:v,ratio:C="1x1",...l}=t;const c=ne(),x=le(s,`${c}--aspect-ratio`,`${c}--aspect-ratio--${C}`);return n.createElement(r,ce({className:x},l),v)};re.propTypes={as:e.elementType,children:e.node,className:e.string,ratio:e.oneOf(["16x9","9x16","2x1","1x2","4x3","3x4","3x2","2x3","1x1"])};const z="ExpressiveCard";let i=se.forwardRef((t,r)=>{const s=fe(t,["actionIconsPosition","overflowActions","productive","titleSize"]);return n.createElement(he,{ref:r,...s,...ge(z)})});i=ye.checkComponentEnabled(i,z);i.propTypes={actionIcons:e.arrayOf(e.shape({id:e.string,icon:e.oneOfType([e.func,e.object]),onKeyDown:e.func,onClick:e.func,iconDescription:e.string,href:e.string})),aiLabel:e.oneOfType([e.node,e.bool]),children:e.node,className:e.string,description:e.oneOfType([e.string,e.object,e.node]),label:e.oneOfType([e.string,e.object,e.node]),media:e.node,mediaPosition:e.oneOf(["top","left"]),onClick:e.func,onPrimaryButtonClick:e.func,onSecondaryButtonClick:e.func,pictogram:e.oneOfType([e.func,e.object]),primaryButtonHref:e.string,primaryButtonIcon:e.oneOfType([e.func,e.object]),primaryButtonKind:e.oneOf(["primary","ghost"]),primaryButtonText:e.string,secondaryButtonHref:e.string,secondaryButtonIcon:e.oneOfType([e.func,e.object]),secondaryButtonKind:e.oneOf(["secondary","ghost"]),secondaryButtonText:e.string,slug:e.oneOfType([e.node,e.bool]),title:e.oneOfType([e.string,e.object,e.node])};i.displayName=z;i.__docgenInfo={description:"",methods:[],displayName:"ExpressiveCard",props:{actionIcons:{required:!1,tsType:{name:"Array",elements:[{name:"signature",type:"object",raw:`{
  id?: string;
  icon?: () => void | object;
  onKeydown?: () => void;
  onClick?: () => void;
  iconDescription?: string;
  href?: string;
}`,signature:{properties:[{key:"id",value:{name:"string",required:!1}},{key:"icon",value:{name:"signature",type:"function",raw:"() => void | object",signature:{arguments:[],return:{name:"union",raw:"void | object",elements:[{name:"void"},{name:"object"}]}},required:!1}},{key:"onKeydown",value:{name:"signature",type:"function",raw:"() => void",signature:{arguments:[],return:{name:"void"}},required:!1}},{key:"onClick",value:{name:"signature",type:"function",raw:"() => void",signature:{arguments:[],return:{name:"void"}},required:!1}},{key:"iconDescription",value:{name:"string",required:!1}},{key:"href",value:{name:"string",required:!1}}]}}],raw:"ActionIcon[]"},description:"Icons that are displayed on card. Refer to design documentation for implementation guidelines. Note- href will supersede onClick",type:{name:"arrayOf",value:{name:"shape",value:{id:{name:"string",required:!1},icon:{name:"union",value:[{name:"func"},{name:"object"}],required:!1},onKeyDown:{name:"func",required:!1},onClick:{name:"func",required:!1},iconDescription:{name:"string",required:!1},href:{name:"string",required:!1}}}}},aiLabel:{required:!1,tsType:{name:"union",raw:"ReactNode | boolean",elements:[{name:"ReactNode"},{name:"boolean"}]},description:"Optional prop that is intended for any scenario where something is being generated by AI to reinforce AI transparency, accountability, and explainability at the UI level.",type:{name:"union",value:[{name:"node"},{name:"bool"}]}},className:{required:!1,tsType:{name:"string"},description:"Optional user provided class",type:{name:"string"}},description:{required:!1,tsType:{name:"union",raw:"string | object | ReactNode",elements:[{name:"string"},{name:"object"},{name:"ReactNode"}]},description:"Optional header description",type:{name:"union",value:[{name:"string"},{name:"object"},{name:"node"}]}},label:{required:!1,tsType:{name:"union",raw:"string | object | ReactNode",elements:[{name:"string"},{name:"object"},{name:"ReactNode"}]},description:"Optional label for the top of the card",type:{name:"union",value:[{name:"string"},{name:"object"},{name:"node"}]}},media:{required:!1,tsType:{name:"ReactNode"},description:"Optional media content like an image to be placed in the card",type:{name:"node"}},mediaPosition:{required:!1,tsType:{name:"union",raw:"'top' | 'left'",elements:[{name:"literal",value:"'top'"},{name:"literal",value:"'left'"}]},description:"Establishes the position of the media in the card",type:{name:"enum",value:[{value:"'top'",computed:!1},{value:"'left'",computed:!1}]}},onClick:{required:!1,tsType:{name:"signature",type:"function",raw:"() => void",signature:{arguments:[],return:{name:"void"}}},description:"Provides the callback for a clickable card",type:{name:"func"}},onPrimaryButtonClick:{required:!1,tsType:{name:"signature",type:"function",raw:"() => void",signature:{arguments:[],return:{name:"void"}}},description:"Function that's called from the primary button or action icon",type:{name:"func"}},onSecondaryButtonClick:{required:!1,tsType:{name:"signature",type:"function",raw:"() => void",signature:{arguments:[],return:{name:"void"}}},description:"Function that's called from the secondary button",type:{name:"func"}},pictogram:{required:!1,tsType:{name:"CarbonIconType"},description:"Provides the icon that's displayed at the top of the card",type:{name:"union",value:[{name:"func"},{name:"object"}]}},primaryButtonHref:{required:!1,tsType:{name:"string"},description:"Optionally specify an href for your Button to become an <a> element",type:{name:"string"}},primaryButtonIcon:{required:!1,tsType:{name:"signature",type:"function",raw:"() => void | object",signature:{arguments:[],return:{name:"union",raw:"void | object",elements:[{name:"void"},{name:"object"}]}}},description:"Optional prop to allow overriding the icon rendering. Can be a React component class",type:{name:"union",value:[{name:"func"},{name:"object"}]}},primaryButtonKind:{required:!1,tsType:{name:"union",raw:"'primary' | 'ghost'",elements:[{name:"literal",value:"'primary'"},{name:"literal",value:"'ghost'"}]},description:"Establishes the kind of button displayed for the primary button",type:{name:"enum",value:[{value:"'primary'",computed:!1},{value:"'ghost'",computed:!1}]}},primaryButtonText:{required:!1,tsType:{name:"string"},description:"The text that's displayed in the primary button",type:{name:"string"}},secondaryButtonHref:{required:!1,tsType:{name:"string"},description:"Optionally specify an href for your Button to become an <a> element",type:{name:"string"}},secondaryButtonIcon:{required:!1,tsType:{name:"signature",type:"function",raw:"() => void | object",signature:{arguments:[],return:{name:"union",raw:"void | object",elements:[{name:"void"},{name:"object"}]}}},description:"Optional prop to allow overriding the icon rendering. Can be a React component class",type:{name:"union",value:[{name:"func"},{name:"object"}]}},secondaryButtonKind:{required:!1,tsType:{name:"union",raw:"'secondary' | 'ghost'",elements:[{name:"literal",value:"'secondary'"},{name:"literal",value:"'ghost'"}]},description:"Establishes the kind of button displayed for the secondary button",type:{name:"enum",value:[{value:"'secondary'",computed:!1},{value:"'ghost'",computed:!1}]}},secondaryButtonText:{required:!1,tsType:{name:"string"},description:"The text that's displayed in the secondary button",type:{name:"string"}},slug:{required:!1,tsType:{name:"union",raw:"ReactNode | boolean",elements:[{name:"ReactNode"},{name:"boolean"}]},description:"**Experimental:** For all cases a `Slug` component can be provided.\nClickable tiles only accept a boolean value of true and display a hollow slug.\n@deprecated please use the `aiLabel` prop",type:{name:"union",value:[{name:"node"},{name:"bool"}]}},title:{required:!1,tsType:{name:"union",raw:"string | object | ReactNode",elements:[{name:"string"},{name:"object"},{name:"ReactNode"}]},description:"Title that's displayed at the top of the card",type:{name:"union",value:[{name:"string"},{name:"object"},{name:"node"}]}},children:{description:"Content that shows in the body of the card",type:{name:"node"},required:!1}},composes:["PropsWithChildren"]};const ve="#root{width:100%}.card-story .cds--aspect-ratio{display:flex;align-items:center;justify-content:center;background:var(--cds-layer-accent-01, #e0e0e0)}.c4p--card__media-left .c4p--card__media{width:100%;max-width:300px}",ae=()=>n.createElement(pe,{blocks:[{story:m},{story:h},{story:d},{story:g},{story:b},{story:S},{story:u},{story:p},{story:y},{story:f},{title:"With AI Label",description:"An AI Label is intended for any scenario where something is being generated by AI to reinforce AI transparency, accountability, and explainability at the UI level.",source:{language:"html",code:`
      <ExpressiveCard
  label="Label"
  primaryButtonText="Primary"
  aiLabel={<AILabel><AILabelContent>{renderedContent}</AILabelContent></AILabel>}
  title="Title">
  <p>
    expressive card body content block. description inviting the user to take action on the card.
  </p>
</ExpressiveCard>
          `}},{description:"Clickable tiles only accept a boolean value of true for the aiLabel property.",source:{language:"html",code:`
      <ExpressiveCard
  label="Label"
  primaryButtonText="Primary"
  onClick={() => {}}
  onKeyDown={() => {}}
  aiLabel={true}
  title="Title">
  <p>
    expressive card body content block. description inviting the user to take action on the card.
  </p>
</ExpressiveCard>
          `}}]});ae.__docgenInfo={description:"",methods:[],displayName:"DocsPage"};const ie=n.createElement(de,{className:"slug-container",size:"xs"},n.createElement(ue,null,n.createElement("div",null,n.createElement("p",{className:"secondary"},"AI Explained"),n.createElement("h1",null,"84%"),n.createElement("p",{className:"secondary bold"},"Confidence score"),n.createElement("p",{className:"secondary"},"This is not really Lorem Ipsum but the spell checker did not like the previous text with it's non-words which is why this unwieldy sentence, should one choose to call it that, here."),n.createElement("hr",null),n.createElement("p",{className:"secondary"},"Model type"),n.createElement("p",{className:"bold"},"Foundation model")))),cn={title:"IBM Products/Components/Cards/ExpressiveCard",component:i,tags:["autodocs"],parameters:{styles:ve,docs:{page:ae}},argTypes:{columnSizeSm:{control:{type:"select"},options:[4,8,12,16]},columnSizeMd:{control:{type:"select"},options:[4,8,12,16]},columnSizeLg:{control:{type:"select"},options:[4,8,12,16]},mediaRatio:{control:{type:"select"},options:["16x9","9x16","2x1","1x2","4x3","3x4","1x1"]},slug:{control:{type:"select",labels:{0:"No AI slug",1:"with AI Slug",2:"with hollow slug (boolean)"},default:0},options:[0,1,2]},aiLabel:{control:{type:"select",labels:{0:"No AI label",1:"with AI label"},default:0},options:[!1,!0]}},decorators:[t=>{const r=ne();return n.createElement("div",{className:`${r}--grid card-story`},t())}]},o={label:"Label",title:"Title",columnSizeSm:4,columnSizeMd:8,columnSizeLg:4,children:n.createElement("p",null,"expressive card body content block. description inviting the user to take action on the card."),primaryButtonText:"Read more"},a=t=>{const{children:r,columnSizeSm:s,columnSizeMd:v,columnSizeLg:C,slug:l,...c}=t;return n.createElement(te,null,n.createElement(oe,{sm:s,md:v,lg:C},n.createElement(i,{...c,slug:l&&(l===2||ie)},r)))},Ce=t=>{const{children:r,columnSizeSm:s,columnSizeMd:v,columnSizeLg:C,mediaRatio:l="1x1",slug:c,...x}=t;return n.createElement(te,null,n.createElement(oe,{sm:s,md:v,lg:C},n.createElement(i,{media:n.createElement(re,{ratio:l},l),slug:c&&(c===2||ie),...x},r)))},m=a.bind({});m.args={...o,mediaRatio:null};const d=a.bind({});d.args={...o,title:"",mediaRatio:null};const u=a.bind({});u.args={...o,caption:"Description or long caption",label:"",mediaRatio:null};const p=Ce.bind({});p.args={...o};const g=a.bind({});g.args={...o,actionIcons:[{id:"1",icon:t=>n.createElement(be,{size:24,...t}),href:"#",iconDescription:"Next"}],primaryButtonText:"",mediaRatio:null};const y=a.bind({});y.args={...o,pictogram:t=>n.createElement(me,{size:32,...t}),mediaRatio:null};const f=a.bind({});f.args={...o,secondaryButtonText:"Remove",secondaryButtonKind:"ghost",mediaRatio:null};const h=a.bind({});h.args={...o,onClick:E("on click"),onKeyDown:E("on keydown"),primaryButtonText:"",mediaRatio:null};const b=a.bind({});b.args={...o,primaryButtonHref:"#",secondaryButtonHref:"#",secondaryButtonText:"Remove",secondaryButtonKind:"ghost"};const S=a.bind({});S.args={...o,primaryButtonIcon:t=>n.createElement(Se,{size:16,...t})};var T,w,L;m.parameters={...m.parameters,docs:{...(T=m.parameters)==null?void 0:T.docs,source:{originalSource:`opts => {
  const {
    children,
    columnSizeSm,
    columnSizeMd,
    columnSizeLg,
    slug,
    ...args
  } = opts;
  return <Grid>
      <Column sm={columnSizeSm} md={columnSizeMd} lg={columnSizeLg}>
        <ExpressiveCard {...args} slug={slug && (slug === 2 || sampleSlug)}>
          {children}
        </ExpressiveCard>
      </Column>
    </Grid>;
}`,...(L=(w=m.parameters)==null?void 0:w.docs)==null?void 0:L.source}}};var k,B,I;d.parameters={...d.parameters,docs:{...(k=d.parameters)==null?void 0:k.docs,source:{originalSource:`opts => {
  const {
    children,
    columnSizeSm,
    columnSizeMd,
    columnSizeLg,
    slug,
    ...args
  } = opts;
  return <Grid>
      <Column sm={columnSizeSm} md={columnSizeMd} lg={columnSizeLg}>
        <ExpressiveCard {...args} slug={slug && (slug === 2 || sampleSlug)}>
          {children}
        </ExpressiveCard>
      </Column>
    </Grid>;
}`,...(I=(B=d.parameters)==null?void 0:B.docs)==null?void 0:I.source}}};var R,q,A;u.parameters={...u.parameters,docs:{...(R=u.parameters)==null?void 0:R.docs,source:{originalSource:`opts => {
  const {
    children,
    columnSizeSm,
    columnSizeMd,
    columnSizeLg,
    slug,
    ...args
  } = opts;
  return <Grid>
      <Column sm={columnSizeSm} md={columnSizeMd} lg={columnSizeLg}>
        <ExpressiveCard {...args} slug={slug && (slug === 2 || sampleSlug)}>
          {children}
        </ExpressiveCard>
      </Column>
    </Grid>;
}`,...(A=(q=u.parameters)==null?void 0:q.docs)==null?void 0:A.source}}};var j,N,M;p.parameters={...p.parameters,docs:{...(j=p.parameters)==null?void 0:j.docs,source:{originalSource:`opts => {
  const {
    children,
    columnSizeSm,
    columnSizeMd,
    columnSizeLg,
    mediaRatio = '1x1',
    slug,
    ...args
  } = opts;
  return <Grid>
      <Column sm={columnSizeSm} md={columnSizeMd} lg={columnSizeLg}>
        <ExpressiveCard media={<AspectRatio ratio={mediaRatio}>{mediaRatio}</AspectRatio>} slug={slug && (slug === 2 || sampleSlug)} {...args}>
          {children}
        </ExpressiveCard>
      </Column>
    </Grid>;
}`,...(M=(N=p.parameters)==null?void 0:N.docs)==null?void 0:M.source}}};var O,P,G;g.parameters={...g.parameters,docs:{...(O=g.parameters)==null?void 0:O.docs,source:{originalSource:`opts => {
  const {
    children,
    columnSizeSm,
    columnSizeMd,
    columnSizeLg,
    slug,
    ...args
  } = opts;
  return <Grid>
      <Column sm={columnSizeSm} md={columnSizeMd} lg={columnSizeLg}>
        <ExpressiveCard {...args} slug={slug && (slug === 2 || sampleSlug)}>
          {children}
        </ExpressiveCard>
      </Column>
    </Grid>;
}`,...(G=(P=g.parameters)==null?void 0:P.docs)==null?void 0:G.source}}};var D,W,_;y.parameters={...y.parameters,docs:{...(D=y.parameters)==null?void 0:D.docs,source:{originalSource:`opts => {
  const {
    children,
    columnSizeSm,
    columnSizeMd,
    columnSizeLg,
    slug,
    ...args
  } = opts;
  return <Grid>
      <Column sm={columnSizeSm} md={columnSizeMd} lg={columnSizeLg}>
        <ExpressiveCard {...args} slug={slug && (slug === 2 || sampleSlug)}>
          {children}
        </ExpressiveCard>
      </Column>
    </Grid>;
}`,...(_=(W=y.parameters)==null?void 0:W.docs)==null?void 0:_.source}}};var K,H,$;f.parameters={...f.parameters,docs:{...(K=f.parameters)==null?void 0:K.docs,source:{originalSource:`opts => {
  const {
    children,
    columnSizeSm,
    columnSizeMd,
    columnSizeLg,
    slug,
    ...args
  } = opts;
  return <Grid>
      <Column sm={columnSizeSm} md={columnSizeMd} lg={columnSizeLg}>
        <ExpressiveCard {...args} slug={slug && (slug === 2 || sampleSlug)}>
          {children}
        </ExpressiveCard>
      </Column>
    </Grid>;
}`,...($=(H=f.parameters)==null?void 0:H.docs)==null?void 0:$.source}}};var F,U,J;h.parameters={...h.parameters,docs:{...(F=h.parameters)==null?void 0:F.docs,source:{originalSource:`opts => {
  const {
    children,
    columnSizeSm,
    columnSizeMd,
    columnSizeLg,
    slug,
    ...args
  } = opts;
  return <Grid>
      <Column sm={columnSizeSm} md={columnSizeMd} lg={columnSizeLg}>
        <ExpressiveCard {...args} slug={slug && (slug === 2 || sampleSlug)}>
          {children}
        </ExpressiveCard>
      </Column>
    </Grid>;
}`,...(J=(U=h.parameters)==null?void 0:U.docs)==null?void 0:J.source}}};var Q,V,X;b.parameters={...b.parameters,docs:{...(Q=b.parameters)==null?void 0:Q.docs,source:{originalSource:`opts => {
  const {
    children,
    columnSizeSm,
    columnSizeMd,
    columnSizeLg,
    slug,
    ...args
  } = opts;
  return <Grid>
      <Column sm={columnSizeSm} md={columnSizeMd} lg={columnSizeLg}>
        <ExpressiveCard {...args} slug={slug && (slug === 2 || sampleSlug)}>
          {children}
        </ExpressiveCard>
      </Column>
    </Grid>;
}`,...(X=(V=b.parameters)==null?void 0:V.docs)==null?void 0:X.source}}};var Y,Z,ee;S.parameters={...S.parameters,docs:{...(Y=S.parameters)==null?void 0:Y.docs,source:{originalSource:`opts => {
  const {
    children,
    columnSizeSm,
    columnSizeMd,
    columnSizeLg,
    slug,
    ...args
  } = opts;
  return <Grid>
      <Column sm={columnSizeSm} md={columnSizeMd} lg={columnSizeLg}>
        <ExpressiveCard {...args} slug={slug && (slug === 2 || sampleSlug)}>
          {children}
        </ExpressiveCard>
      </Column>
    </Grid>;
}`,...(ee=(Z=S.parameters)==null?void 0:Z.docs)==null?void 0:ee.source}}};const mn=["Default","LabelOnly","WithCaption","WithMedia","WithActionIconHref","WithPictogram","WithSecondaryAction","Clickable","WithButtonHref","WithButtonIcon"];export{h as Clickable,m as Default,d as LabelOnly,g as WithActionIconHref,b as WithButtonHref,S as WithButtonIcon,u as WithCaption,p as WithMedia,y as WithPictogram,f as WithSecondaryAction,mn as __namedExportsOrder,cn as default};
