import{e as b,r as ue}from"./index-DtHxqM--.js";import{a as pe}from"./index-B-lxVbXh.js";import{j as i}from"./index-DgLvjnYm.js";import{useMDXComponents as ee}from"./index-CseD6FCQ.js";import"./index-DrNcODRw.js";import{P as B,bc as ie}from"./index-C360Eztx.js";import{T as me}from"./TextInput-DJpFdpZP.js";import{y as ne,aZ as ae}from"./bucket-6-BjeV6rPm.js";import{ax as A}from"./bucket-7-D71hy6JI.js";import{$ as re,Z as te}from"./settings-CFkY3W_8.js";import{m as oe}from"./bucket-5-DVTXjpjK.js";import{b0 as se}from"./bucket-17-BFxlQ1ma.js";import{b0 as C}from"./bucket-1-PuAqHexT.js";import{u as a}from"./uuidv4-BN2rGLQG.js";import{C as le,N as f,H as v}from"./ConditionBuilder-CHGMM2NV.js";import{ae as y}from"./bucket-19-D7HYZr93.js";import{a as ge,j as he,C as be}from"./index-DXOm4vU7.js";import"./_commonjsHelpers-Cpj98o6Y.js";import"./v4-CtRu48qb.js";import"./index-CiYgQLeJ.js";import"./preview-BL6vYXCG.js";import"./iframe-DQx73iB6.js";import"./DocsRenderer-CFRXHY34-B-U9PCOx.js";import"./client-CZTHzaKS.js";import"./useNormalizedInputProps-cPzcHHVT.js";import"./Text-DKfZ87L_.js";import"./FormContext-C4Nuixum.js";import"./events-CdfZZS3f.js";import"./index-BopFi8TB.js";import"./TimePickerSelect-C5OsqR4E.js";import"./index-CrSLweFd.js";import"./devtools-XPxnGn1y.js";import"./index-D_6HqJlS.js";import"./index-B0hq8c5O.js";import"./LayerContext-B9CO-6mR.js";import"./clamp--00YEiB8.js";import"./bucket-0-CylTshg8.js";import"./Search-BSYMp4wP.js";import"./bucket-15-DqPvCVP_.js";import"./NumberInput-H4rExYPH.js";import"./useControllableState-P5wT7SAH.js";import"./bucket-16-DWe95sPE.js";import"./TextArea-3lEP8XFb.js";import"./DatePicker-DTrbSZxi.js";import"./SelectItem-BAu4CfiB.js";import"./index-Dytf1aFS.js";import"./index-DrFu-skq.js";function T(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...ee(),...n.components};return i.jsxs(i.Fragment,{children:[i.jsx(e.h1,{id:"conditionbuilder",children:"ConditionBuilder"}),`
`,i.jsx(e.p,{children:i.jsx(e.a,{href:"https://pages.github.ibm.com/carbon/ibm-products/components/condition-builder/usage/",rel:"nofollow",children:"ConditionBuilder usage guidelines"})}),`
`,i.jsx(e.h2,{id:"table-of-contents",children:"Table of Contents"}),`
`,i.jsxs(e.ul,{children:[`
`,i.jsx(e.li,{children:i.jsx(e.a,{href:"#overview",children:"Overview"})}),`
`,i.jsx(e.li,{children:i.jsx(e.a,{href:"#example-usage",children:"Example usage"})}),`
`,i.jsx(e.li,{children:i.jsx(e.a,{href:"#component-api",children:"Component API"})}),`
`]}),`
`,i.jsx(e.h2,{id:"overview",children:"Overview"}),`
`,i.jsxs(e.p,{children:[`The Condition Builder component empowers non-technical users to create conditional statements with minimal or no coding knowledge. It is available in two variants:
`,i.jsx(e.strong,{children:"Non-Hierarchical"}),`: Ideal for simple, linear conditions presented in a sentence-like format.
`,i.jsx(e.strong,{children:"Hierarchical"}),`: Designed for more complex use cases, allowing nested conditions and multiple top-level groups.
Users can build conditions using a list of properties defined in the inputConfig. Each property supports six built-in input types—option, text,
textarea, number, time, and date—as well as a custom type that allows users to render their own custom components.`]}),`
`,i.jsx(e.h3,{id:"inputconfig",children:"inputConfig"}),`
`,i.jsxs(e.p,{children:[i.jsx(e.strong,{children:"Input types"})," ",i.jsx("br",{}),`
`,i.jsx(e.strong,{children:"option :"}),` Support single select as well as multi select. Multi-select will be activated for one-of operator or user preferred multi select custom operator.
User can pass the list of options inside config object (`,i.jsx(e.code,{children:"properties[i].config.options"}),") or can be dynamically populated using an asynchronous callback prop ",i.jsx(e.code,{children:"getOptions"}),"."]}),`
`,i.jsxs(e.p,{children:[i.jsx(e.strong,{children:"text"}),", ",i.jsx(e.strong,{children:"textarea"}),", ",i.jsx(e.strong,{children:"number"}),", ",i.jsx(e.strong,{children:"date"}),", & ",i.jsx(e.strong,{children:"time :"})," Here the component uses the corresponding Carbon components and supports standard Carbon props."]}),`
`,i.jsxs(e.p,{children:["The date range picker can be enabled when using the '",i.jsx(e.code,{children:"between"}),`' operator or user preferred multiselect custom operator.
Eg: you can customize the date format and locale by setting `,i.jsx(e.code,{children:"properties[i].config.dateFormat"})," and ",i.jsx(e.code,{children:"properties[i].config.locale"}),", respectively."]}),`
`,i.jsxs(e.p,{children:[i.jsx(e.strong,{children:"custom :"})," Users can render a custom component by providing a ",i.jsx(e.code,{children:"properties[i].config.component"}),`, which should be a function that returns JSX.
This function receives `,i.jsx(e.code,{children:"onChange"})," and ",i.jsx(e.code,{children:"conditionState"})," as arguments. To update the condition builder’s state, users must call ",i.jsx(e.code,{children:"onChange('value')"})," with the new value."]}),`
`,i.jsxs(e.p,{children:["Additionally, a ",i.jsx(e.code,{children:"valueFormatter"})," can be specified via ",i.jsx(e.code,{children:"properties[i].config.valueFormatter"})," to format how the value is displayed in the UI."]}),`
`,i.jsx(e.pre,{children:i.jsx(e.code,{children:`valueFormatter: (value) => {
 // add any customization to the value to be populated
 return value.toLocaleUpperCase();
}

`})}),`
`,i.jsx(e.h3,{id:"custom-operators",children:"Custom operators"}),`
`,i.jsx(e.p,{children:"Default operators are built-in for all input types, but users can override them by passing a list of custom operators via properties[i].config.operators, including for the custom input type."}),`
`,i.jsxs(e.p,{children:["Additionally, to enable multiselect or range picker functionality for option and date input types, users can set ",i.jsx(e.code,{children:"isMultiSelect"})," to ",i.jsx(e.code,{children:"true"}),"."]}),`
`,i.jsx(e.pre,{children:i.jsx(e.code,{children:`const customOperators = [
  { label: 'has value', id: 'hasValue' },
  { label: 'has no value', id: 'hasNoValue' },
  { label: 'has values', id: 'hasValues', isMultiSelect: true },
];
`})}),`
`,i.jsx(e.h3,{id:"custom-statements",children:"Custom statements"}),`
`,i.jsxs(e.p,{children:["Currently, the default statements available are: if all, if any, unless all, and unless any. But user can pass ",i.jsx(e.code,{children:"statementConfigCustom"}),`,
which allows users to provide their own custom statements, overriding the default ones.`]}),`
`,i.jsx(e.pre,{children:i.jsx(e.code,{children:`const statementConfigCustom = [
  {
    id: 'if',
    connector: 'and',
    label: 'if',
  },
  {
    id: 'exclIf',
    connector: 'or',
    label: 'excl. if',
  },
];
`})}),`
`,i.jsx(e.h3,{id:"dynamic-options",children:"Dynamic options"}),`
`,i.jsx(e.p,{children:`If the input type is set to option and you want to load options dynamically during condition building—rather than
supplying them directly in the inputConfig—you can use the getOptions callback prop. This asynchronous function returns
a promise that should be resolved with the options array in the expected format. It receives two arguments: the root condition state and the current condition.`}),`
`,i.jsx(e.pre,{children:i.jsx(e.code,{children:`const getOptions = async (conditionState, condition) => {
  switch (condition.property) {
    case 'continent':
     return new Promise((resolve) => {
        const continents = [
         { label: 'Africa', id: 'Africa' },
          ...
        ];
        resolve(continents);
      });
    default:
      return [];
  }
};
`})}),`
`,i.jsx(e.h2,{id:"example-usage",children:"Example usage"}),`
`,`
`,i.jsx(ge,{children:i.jsx(he,{of:s})}),`
`,i.jsx(e.h2,{id:"component-api",children:"Component API"}),`
`,i.jsx(be,{})]})}function fe(n={}){const{wrapper:e}={...ee(),...n.components};return e?i.jsx(e,{...n,children:i.jsx(T,{...n})}):T(n)}const ye=".c4p--condition-builder{padding:1.5rem}",I=({onChange:n,conditionState:e})=>{const r=ce=>{n(ce.target.value)};return b.createElement("div",{className:"custom-component"},b.createElement(me,{labelText:"labelText",hideLabel:!0,value:e.value??"",id:"customInput",onChange:r}))};I.propTypes={conditionState:B.object,onChange:B.func};I.__docgenInfo={description:"",methods:[],displayName:"CustomInput",props:{conditionState:{description:"current condition state",type:{name:"object"},required:!1},onChange:{description:"This function need to be called that provides a label which should be shown in the condition after a user has made their selection / set their value",type:{name:"func"},required:!1}}};const Ce=[["AF","Afghanistan"],["AX","Åland Islands"],["AL","Albania"],["DZ","Algeria"],["AS","American Samoa"],["AD","Andorra"],["AO","Angola"],["AI","Anguilla"],["AQ","Antarctica"],["AG","Antigua & Barbuda"],["AR","Argentina"],["AM","Armenia"],["AW","Aruba"],["AC","Ascension Island"],["AU","Australia"],["AT","Austria"],["AZ","Azerbaijan"],["BS","Bahamas"],["BH","Bahrain"],["BD","Bangladesh"],["BB","Barbados"],["BY","Belarus"],["BE","Belgium"],["BZ","Belize"],["BJ","Benin"],["BM","Bermuda"],["BT","Bhutan"],["BO","Bolivia"],["BA","Bosnia & Herzegovina"],["BW","Botswana"],["BV","Bouvet Island"],["BR","Brazil"],["IO","British Indian Ocean Territory"],["VG","British Virgin Islands"],["BN","Brunei"],["BG","Bulgaria"],["BF","Burkina Faso"],["BI","Burundi"],["KH","Cambodia"],["CM","Cameroon"],["CA","Canada"],["IC","Canary Islands"],["CV","Cape Verde"],["BQ","Caribbean Netherlands"],["KY","Cayman Islands"],["CF","Central African Republic"],["EA","Ceuta & Melilla"],["TD","Chad"],["CL","Chile"],["CN","China"],["CX","Christmas Island"],["CP","Clipperton Island"],["CC","Cocos (Keeling) Islands"],["CO","Colombia"],["KM","Comoros"],["CG","Congo - Brazzaville"],["CD","Congo - Kinshasa"],["CK","Cook Islands"],["CR","Costa Rica"],["CI","Côte d'Ivoire"],["HR","Croatia"],["CU","Cuba"],["CW","Curaçao"],["CY","Cyprus"],["CZ","Czechia"],["DK","Denmark"],["DG","Diego Garcia"],["DJ","Djibouti"],["DM","Dominica"],["DO","Dominican Republic"],["EC","Ecuador"],["EG","Egypt"],["SV","El Salvador"],["GQ","Equatorial Guinea"],["ER","Eritrea"],["EE","Estonia"],["SZ","Eswatini"],["ET","Ethiopia"],["EU","European Union"],["FK","Falkland Islands"],["FO","Faroe Islands"],["FJ","Fiji"],["FI","Finland"],["FR","France"],["GF","French Guiana"],["PF","French Polynesia"],["TF","French Southern Territories"],["GA","Gabon"],["GM","Gambia"],["GE","Georgia"],["DE","Germany"],["GH","Ghana"],["GI","Gibraltar"],["GR","Greece"],["GL","Greenland"],["GD","Grenada"],["GP","Guadeloupe"],["GU","Guam"],["GT","Guatemala"],["GG","Guernsey"],["GN","Guinea"],["GW","Guinea-Bissau"],["GY","Guyana"],["HT","Haiti"],["HM","Heard & McDonald Islands"],["HN","Honduras"],["HK","Hong Kong SAR China"],["HU","Hungary"],["IS","Iceland"],["IN","India"],["ID","Indonesia"],["IR","Iran"],["IQ","Iraq"],["IE","Ireland"],["IM","Isle of Man"],["IL","Israel"],["IT","Italy"],["JM","Jamaica"],["JP","Japan"],["JE","Jersey"],["JO","Jordan"],["KZ","Kazakhstan"],["KE","Kenya"],["KI","Kiribati"],["XK","Kosovo"],["KW","Kuwait"],["KG","Kyrgyzstan"],["LA","Laos"],["LV","Latvia"],["LB","Lebanon"],["LS","Lesotho"],["LR","Liberia"],["LY","Libya"],["LI","Liechtenstein"],["LT","Lithuania"],["LU","Luxembourg"],["MO","Macao SAR China"],["MG","Madagascar"],["MW","Malawi"],["MY","Malaysia"],["MV","Maldives"],["ML","Mali"],["MT","Malta"],["MH","Marshall Islands"],["MQ","Martinique"],["MR","Mauritania"],["MU","Mauritius"],["YT","Mayotte"],["MX","Mexico"],["FM","Micronesia"],["MD","Moldova"],["MC","Monaco"],["MN","Mongolia"],["ME","Montenegro"],["MS","Montserrat"],["MA","Morocco"],["MZ","Mozambique"],["MM","Myanmar (Burma)"],["NA","Namibia"],["NR","Nauru"],["NP","Nepal"],["NL","Netherlands"],["NC","New Caledonia"],["NZ","New Zealand"],["NI","Nicaragua"],["NE","Niger"],["NG","Nigeria"],["NU","Niue"],["NF","Norfolk Island"],["KP","North Korea"],["MK","North Macedonia"],["MP","Northern Mariana Islands"],["NO","Norway"],["OM","Oman"],["PK","Pakistan"],["PW","Palau"],["PS","Palestinian Territories"],["PA","Panama"],["PG","Papua New Guinea"],["PY","Paraguay"],["PE","Peru"],["PH","Philippines"],["PN","Pitcairn Islands"],["PL","Poland"],["PT","Portugal"],["PR","Puerto Rico"],["QA","Qatar"],["RE","Réunion"],["RO","Romania"],["RU","Russia"],["RW","Rwanda"],["BL","St. Barthélemy"],["SH","St. Helena"],["KN","St. Kitts & Nevis"],["LC","St. Lucia"],["MF","St. Martin"],["PM","St. Pierre & Miquelon"],["VC","St. Vincent & Grenadines"],["WS","Samoa"],["SM","San Marino"],["ST","São Tomé & Príncipe"],["SA","Saudi Arabia"],["SN","Senegal"],["RS","Serbia"],["SC","Seychelles"],["SL","Sierra Leone"],["SG","Singapore"],["SX","Sint Maarten"],["SK","Slovakia"],["SI","Slovenia"],["SB","Solomon Islands"],["SO","Somalia"],["ZA","South Africa"],["GS","South Georgia & South Sandwich Islands"],["KR","South Korea"],["SS","South Sudan"],["ES","Spain"],["LK","Sri Lanka"],["SD","Sudan"],["SR","Suriname"],["SJ","Svalbard & Jan Mayen"],["SE","Sweden"],["CH","Switzerland"],["SY","Syria"],["TW","Taiwan"],["TJ","Tajikistan"],["TZ","Tanzania"],["TH","Thailand"],["TL","Timor-Leste"],["TG","Togo"],["TK","Tokelau"],["TO","Tonga"],["TT","Trinidad & Tobago"],["TA","Tristan da Cunha"],["TN","Tunisia"],["TR","Turkey"],["TM","Turkmenistan"],["TC","Turks & Caicos Islands"],["TV","Tuvalu"],["UG","Uganda"],["UA","Ukraine"],["AE","United Arab Emirates"],["GB","United Kingdom"],["UN","United Nations"],["US","United States"],["UM","U.S. Outlying Islands"],["VI","U.S. Virgin Islands"],["UY","Uruguay"],["UZ","Uzbekistan"],["VU","Vanuatu"],["VA","Vatican City"],["VE","Venezuela"],["VN","Vietnam"],["WF","Wallis & Futuna"],["EH","Western Sahara"],["YE","Yemen"],["ZM","Zambia"],["ZW","Zimbabwe"]],Ae=["black","silver","gray","white","maroon","red","purple","fuchsia","green","lime","olive","yellow","navy","blue","teal","aqua","orange","aliceblue","antiquewhite","aquamarine","azure","beige","bisque","blanchedalmond","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson",`cyan
(synonym of aqua)`,"darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","gainsboro","ghostwhite","gold","goldenrod","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","limegreen","linen","magenta","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","oldlace","olivedrab","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","thistle","tomato","transparent","turquoise","violet","wheat","whitesmoke","yellowgreen","rebeccapurple"],S=[{label:"has value",id:"hasValue"},{label:"has no value",id:"hasNoValue"},{label:"has values",id:"hasValues",isMultiSelect:!0}],o={properties:[{id:"continent",label:"Continent",icon:ne,type:"option",description:"Continent",config:{options:[{label:"Africa",id:"Africa"},{label:"Antarctica",id:"Antarctica"},{label:"Asia",id:"Asia"},{label:"Australia",id:"Australia"},{label:"Europe",id:"Europe"}]}},{id:"region",label:"Region",icon:ae,type:"option",config:{options:Ce.map(([n,e])=>({id:n,label:e,icon:()=>b.createElement("span",null,String.fromCodePoint(...[...n].map(r=>127397+r.charCodeAt(0))))}))}},{id:"color",label:"Color",icon:ie,type:"option",config:{options:Ae.map(n=>({id:n,label:n,icon:()=>b.createElement("svg",{width:"12",height:"12",viewBox:"0 0 12 12"},b.createElement("rect",{x:"0",y:"0",width:"12",height:"12",rx:"1",fill:n}))}))}},{id:"id",label:"ID",icon:A,type:"text",config:{}},{id:"id_long",label:"Id Long",icon:A,type:"textarea",config:{}},{id:"price",label:"Price",icon:re,type:"number",config:{min:0,step:1,unit:"Dollars"}},{id:"date",label:"Date",icon:C,type:"date",config:{locale:"en",dateFormat:"d/m/Y"}},{id:"time",label:"Time",icon:C,type:"time",config:{timeZones:["IST","CET","UTC","LOCAL"]}},{id:"delivery",label:"Delivery",icon:oe,type:"option",config:{options:[{label:"Processing",id:"Processing"},{label:"Preparing for dispatch",id:"Preparing for dispatch"},{label:"Dispatched",id:"Dispatched"},{label:"In delivery",id:"In delivery"},{label:"Delivered",id:"Delivered"}]}},{id:"season",label:"Season",icon:se,type:"option",config:{options:[{label:"Winter",id:"Winter"},{label:"Spring",id:"Spring"},{label:"Summer",id:"Summer"},{label:"Fall",id:"Fall"}]}},{id:"product",label:"Product",icon:te,type:"custom",config:{component:I,operators:S,valueFormatter:n=>n.toLocaleUpperCase()}}]};function Se(n){const e=n.properties.map(r=>r.id==="continent"?{...r,config:{...r.config,operators:S}}:r.id==="id"?{...r,config:{...r.config,operators:S.slice(0,2)}}:r);return{...n,properties:e}}const ve=Se(o),Ie={properties:[{id:"continent",label:"Continent",icon:ne,type:"option",config:{}},{id:"region",label:"Region",icon:ae,type:"option",config:{}},{id:"color",label:"Color",icon:ie,type:"option",config:{}},{id:"id",label:"ID",icon:A,type:"text",config:{}},{id:"price",label:"Price",icon:re,type:"number",config:{min:0,step:1,unit:"Dollars"}},{id:"date",label:"Date",icon:C,type:"date",config:{locale:"en-US",dateFormat:"M j, Y"}},{id:"time",label:"Time",icon:C,type:"time",config:{timeZones:["IST","CET","UTC","LOCAL"]}},{id:"product",label:"Product",icon:te,type:"text",config:{}},{id:"delivery",label:"Delivery",icon:oe,type:"option",config:{options:[{label:"Processing",id:"Processing"},{label:"Preparing for dispatch",id:"Preparing for dispatch"},{label:"Dispatched",id:"Dispatched"},{label:"In delivery",id:"In delivery"},{label:"Delivered",id:"Delivered"}]}},{id:"season",label:"Season",icon:se,type:"option",config:{options:[{label:"Winter",id:"Winter"},{label:"Spring",id:"Spring"},{label:"Summer",id:"Summer"},{label:"Fall",id:"Fall"}]}}]},xe={operator:"or",groups:[{groupOperator:"and",statement:"ifAll",id:a(),conditions:[{property:"continent",operator:"is",value:{label:"Africa",id:"Africa"},id:a()},{property:"region",operator:"oneOf",value:[{label:"Algeria",id:"DZ"},{label:"Andorra",id:"AD"}],id:a()},{statement:"unlessAll",groupOperator:"and",conditions:[{property:"delivery",operator:"is",value:{label:"Delivered",id:"Delivered"},id:a()},{property:"id",operator:"startsWith",value:"#delivered",id:a()}],id:a()},{statement:"ifAny",groupOperator:"or",conditions:[{property:"season",operator:"is",value:{label:"Summer",id:"Summer"},id:a()},{property:"season",operator:"is",value:{label:"Fall",id:"Fall"},id:a()}],id:a()}]},{statement:"ifAll",groupOperator:"and",id:a(),conditions:[{property:"delivery",operator:"oneOf",value:[{label:"Processing",id:"Processing"},{label:"Preparing for dispatch",id:"Preparing for dispatch"}],id:a()},{statement:"ifAll",groupOperator:"and",conditions:[{property:"price",operator:"greater",value:"50 Dollars",id:a()},{property:"id",operator:"is",value:"#proccessing",id:a()}],id:a()}]}]},Be={groups:[{groupOperator:"and",statement:"ifAll",id:a(),conditions:[{property:"continent",operator:"is",value:{label:"Asia",id:"Asia"},id:a()},{property:"region",operator:"oneOf",value:[{label:"Afghanistan",id:"AF"},{label:"India",id:"IN"}],id:a()},{property:"date",operator:"between",value:"10/03/2025 - 13/03/2025",id:a()},{property:"season",operator:"is",value:{label:"Fall",id:"Fall"},id:a()}]}],operator:"or"},Te={operator:"or",groups:[{groupOperator:"and",statement:"ifAll",id:"e1c37cb2-3e11-4eb6-937a-b9add468345b",conditions:[{property:"continent",operator:"hasValues",value:[{label:"Africa",id:"Africa"},{label:"Antarctica",id:"Antarctica"}],id:"b7720ec9-e52a-4a7b-90c1-b4aa3c55daeb"},{property:"id",operator:"hasValue",value:"test",id:"eba8a891-7203-4b22-bf44-c4a9f0c80c4b"}]}]},Ti={title:"Experimental/Components/ConditionBuilder",component:le,tags:["autodocs"],parameters:{layout:"fullscreen",styles:ye,docs:{page:fe}}},we=()=>[{label:"Africa",id:"Africa"},{label:"Antarctica",id:"Antarctica"},{label:"Asia",id:"Asia"},{label:"Australia",id:"Australia"},{label:"Europe",id:"Europe"}],je=()=>[{label:"Afghanistan",id:"AF",icon:y},{label:"Albania",id:"AL",icon:y},{label:"Algeria",id:"AG",icon:y},{label:"Andorra",id:"AN",icon:y}],Me=()=>[{label:"black",id:"black"},{label:"silver",id:"silver"},{label:"gray",id:"gray"},{label:"white",id:"white"},{label:"maroon",id:"maroon"},{label:"red",id:"red"},{label:"purple",id:"purple"},{label:"fuchsia",id:"fuchsia"},{label:"green",id:"green"},{label:"lime",id:"lime"},{label:"olive",id:"olive"},{label:"yellow",id:"yellow"},{label:"navy",id:"navy"},{label:"blue",id:"blue"},{label:"teal",id:"teal"},{label:"aqua",id:"aqua"}],Pe=async(n,{property:e})=>{switch(e){case"continent":return new Promise(r=>{setTimeout(()=>{r(we())},2e3)});case"region":return new Promise(r=>{setTimeout(()=>{r(je())},2e3)});case"color":return new Promise(r=>{setTimeout(()=>{r(Me())},2e3)});default:return[]}},Ne={startConditionLabel:"Add condition",popOverSearchThreshold:4,getConditionState:n=>{console.log(n)}},de=[{id:a(),label:"Add item to cart"},{id:a(),label:"Proceed item to checkout"}],x=n=>({ifText:"if",addConditionText:"Add condition",addConditionGroupText:"Add condition group",addSubgroupText:"Add subgroup"})[n],t=n=>{const e=ue.useRef(void 0);return b.createElement(le,{...n,ref:e,...Ne,onAddItem:r=>pe(`onAddItem is triggered , type: ${r}`)()})},ke=[{id:"if",connector:"and",label:"if"},{id:"exclIf",connector:"or",label:"excl. if"}],s=t.bind({});s.storyName="Condition Builder";s.args={inputConfig:o,variant:f};const l=t.bind({});l.storyName="With dynamic options";l.args={inputConfig:Ie,getOptions:Pe,variant:f};const d=t.bind({});d.storyName="With initial state";d.args={initialState:{state:Be,enabledDefault:!0},inputConfig:o,variant:f,translateWithId:x};const c=t.bind({});c.storyName="With Custom statement configuration";c.args={inputConfig:o,variant:f,translateWithId:x,statementConfigCustom:ke};const u=t.bind({});u.storyName="With Custom operator configuration";u.args={inputConfig:ve,initialState:{state:Te,enabledDefault:!0},variant:f,translateWithId:x};const p=t.bind({});p.storyName="With Actions";p.args={inputConfig:o,variant:f,actions:de,getActionsState:n=>{console.log("action state",n)}};const m=t.bind({});m.storyName="Condition Builder (Hierarchical)";m.args={inputConfig:o,variant:v};const g=t.bind({});g.storyName="With initial state (Hierarchical)";g.args={initialState:{state:xe,enabledDefault:!1},inputConfig:o,variant:v};const h=t.bind({});h.storyName="With Actions (Hierarchical)";h.args={inputConfig:o,variant:v,actions:de,getActionsState:n=>{}};var w,j,M;s.parameters={...s.parameters,docs:{...(w=s.parameters)==null?void 0:w.docs,source:{originalSource:"args => {\n  const ref = useRef(undefined);\n  return <ConditionBuilder {...args} ref={ref} {...requiredProps} onAddItem={type => action(`onAddItem is triggered , type: ${type}`)()} />;\n}",...(M=(j=s.parameters)==null?void 0:j.docs)==null?void 0:M.source}}};var P,N,k;l.parameters={...l.parameters,docs:{...(P=l.parameters)==null?void 0:P.docs,source:{originalSource:"args => {\n  const ref = useRef(undefined);\n  return <ConditionBuilder {...args} ref={ref} {...requiredProps} onAddItem={type => action(`onAddItem is triggered , type: ${type}`)()} />;\n}",...(k=(N=l.parameters)==null?void 0:N.docs)==null?void 0:k.source}}};var D,E,G;d.parameters={...d.parameters,docs:{...(D=d.parameters)==null?void 0:D.docs,source:{originalSource:"args => {\n  const ref = useRef(undefined);\n  return <ConditionBuilder {...args} ref={ref} {...requiredProps} onAddItem={type => action(`onAddItem is triggered , type: ${type}`)()} />;\n}",...(G=(E=d.parameters)==null?void 0:E.docs)==null?void 0:G.source}}};var R,O,L;c.parameters={...c.parameters,docs:{...(R=c.parameters)==null?void 0:R.docs,source:{originalSource:"args => {\n  const ref = useRef(undefined);\n  return <ConditionBuilder {...args} ref={ref} {...requiredProps} onAddItem={type => action(`onAddItem is triggered , type: ${type}`)()} />;\n}",...(L=(O=c.parameters)==null?void 0:O.docs)==null?void 0:L.source}}};var F,H,W;u.parameters={...u.parameters,docs:{...(F=u.parameters)==null?void 0:F.docs,source:{originalSource:"args => {\n  const ref = useRef(undefined);\n  return <ConditionBuilder {...args} ref={ref} {...requiredProps} onAddItem={type => action(`onAddItem is triggered , type: ${type}`)()} />;\n}",...(W=(H=u.parameters)==null?void 0:H.docs)==null?void 0:W.source}}};var U,K,V;p.parameters={...p.parameters,docs:{...(U=p.parameters)==null?void 0:U.docs,source:{originalSource:"args => {\n  const ref = useRef(undefined);\n  return <ConditionBuilder {...args} ref={ref} {...requiredProps} onAddItem={type => action(`onAddItem is triggered , type: ${type}`)()} />;\n}",...(V=(K=p.parameters)==null?void 0:K.docs)==null?void 0:V.source}}};var q,Z,z;m.parameters={...m.parameters,docs:{...(q=m.parameters)==null?void 0:q.docs,source:{originalSource:"args => {\n  const ref = useRef(undefined);\n  return <ConditionBuilder {...args} ref={ref} {...requiredProps} onAddItem={type => action(`onAddItem is triggered , type: ${type}`)()} />;\n}",...(z=(Z=m.parameters)==null?void 0:Z.docs)==null?void 0:z.source}}};var J,Y,_;g.parameters={...g.parameters,docs:{...(J=g.parameters)==null?void 0:J.docs,source:{originalSource:"args => {\n  const ref = useRef(undefined);\n  return <ConditionBuilder {...args} ref={ref} {...requiredProps} onAddItem={type => action(`onAddItem is triggered , type: ${type}`)()} />;\n}",...(_=(Y=g.parameters)==null?void 0:Y.docs)==null?void 0:_.source}}};var $,X,Q;h.parameters={...h.parameters,docs:{...($=h.parameters)==null?void 0:$.docs,source:{originalSource:"args => {\n  const ref = useRef(undefined);\n  return <ConditionBuilder {...args} ref={ref} {...requiredProps} onAddItem={type => action(`onAddItem is triggered , type: ${type}`)()} />;\n}",...(Q=(X=h.parameters)==null?void 0:X.docs)==null?void 0:Q.source}}};const wi=["conditionBuilder","conditionBuilderDynamicOptions","conditionBuilderWithInitialState","conditionBuilderWithCustomStatements","conditionBuilderWithCustomOperators","conditionBuilderWithActions","conditionBuilderHierarchical","conditionBuilderWithInitialStateHierarchical","conditionBuilderWithActionsHierarchical"];export{wi as __namedExportsOrder,s as conditionBuilder,l as conditionBuilderDynamicOptions,m as conditionBuilderHierarchical,p as conditionBuilderWithActions,h as conditionBuilderWithActionsHierarchical,u as conditionBuilderWithCustomOperators,c as conditionBuilderWithCustomStatements,d as conditionBuilderWithInitialState,g as conditionBuilderWithInitialStateHierarchical,Ti as default};
