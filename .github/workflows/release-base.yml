# This is the base release workflow dispatched by the `release-minor` or `release-patch` workflows
name: Release base
run-name: ${{ inputs.type }} - dry-run:${{ inputs.dry-run }}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  workflow_call:
    inputs:
      type:
        required: true
        type: string
        default: first minor rc
      dry-run:
        required: true
        description: 'Run dry run?'
        type: boolean
        default: true

jobs:
  release:
    runs-on: ubuntu-latest
    # Recommended by npm for publishing with provenance https://docs.npmjs.com/generating-provenance-statements
    permissions:
      id-token: write
      contents: write
    timeout-minutes: 60
    env:
      GH_TOKEN: ${{ secrets.MERGE_ACTION }}
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: '0'
          token: ${{ secrets.GH_TOKEN_LERNA }} # https://github.com/lerna/lerna/issues/1957

      # https://github.com/actions/checkout#push-a-commit-using-the-built-in-token
      - run: |
          git config --global user.email ${{ secrets.CARBON_BOT_EMAIL }}
          git config --global user.name ${{ secrets.CARBON_BOT_NAME }}

      - name: Setup Node.js
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4.4.0
        with:
          node-version: '20.x'
          registry-url: https://registry.npmjs.org
          cache: 'yarn'
      - name: Install dependencies
        run: yarn install

      - name:
          Run @ibm/telemetry-js-config-generator to regenerate telemetry config
          file
        if: github.event.inputs.dry-run == 'true'
        working-directory: ./packages/ibm-products
        run: |
          yarn telemetry-config

      # This can be removed once @ibm/telemetry-js-config-generator has params to set the js scope
      - name: Add js scope to telemetry config
        if: github.event.inputs.dry-run == 'true'
        working-directory: ./packages/ibm-products
        run: |
          echo "  js:
              functions: {}
              tokens: null" >> telemetry.yml
          if [ -z "$(git status --porcelain)" ]; then
            echo "Mirror is clean, exiting..."
          else
            git add telemetry.yml
            git commit -m "chore(telemetry): update telemetry config"
            git push origin
          fi

      - name: Continuous integration check (includes build)
        run: yarn ci-check

      - name: Set NPM token
        run: |
          echo "//registry.npmjs.org/:_authToken=${{ secrets.CARBON_BOT_NPM_TOKEN }}" >> .npmrc

      # Set the PUBLISH environment variable to be used later in the Lerna publish command.
      # Lerna has dry run on by default, need to pass in '--yes' flag before it will go ahead and publish.
      - name: Set dry run env variable
        run: |
          if [ "${{ github.event.inputs.dry-run }}" == "false"  ]; then
            echo "PUBLISH=--yes" >> $GITHUB_ENV
          fi

      - name: Publish full minor release (ie. v1.x.0)
        if: github.event.inputs.type == 'full minor release'
        run: |
          yarn lerna publish minor --conventional-graduate $(echo "${{ env.PUBLISH }}")

      - name: Publish first minor RC (ie. v1.x.0-rc.0)
        if: github.event.inputs.type == 'first minor rc'
        run: |
          yarn lerna publish preminor --conventional-prerelease --preid rc --pre-dist-tag next $(echo "${{ env.PUBLISH }}")

      - name: Publish full patch release (ie. v1.0.x)
        if: github.event.inputs.type == 'full patch release'
        run: |
          yarn lerna publish patch --conventional-graduate $(echo "${{ env.PUBLISH }}")

      - name: Publish first patch RC (ie. v1.0.x-rc.0)
        if: github.event.inputs.type == 'first patch rc'
        run: |
          yarn lerna publish prepatch --conventional-prerelease --preid rc --pre-dist-tag next $(echo "${{ env.PUBLISH }}")

      - name: Publish subsequent RC (ie. v1.0.0-rc.x)
        if: github.event.inputs.type == 'subsequent rc'
        run: |
          yarn lerna publish --conventional-prerelease --preid rc --pre-dist-tag next $(echo "${{ env.PUBLISH }}")

      # After successfully publishing a release candidate, trigger the staging storybook environment deployment workflow.
      # Pass in the release branch name to the storybook deployment job so it build off the release branch
      - name: Dispatch staging storybook deployment workflow
        uses: peter-evans/repository-dispatch@v3
        with:
          event-type: deploy-staging-storybook
          client-payload: '{"branch": "${{ github.ref_name }}"}'

      # After successfully publishing a full release, trigger the production storybook environment deployment workflow.
      # Pass in the release branch name to the storybook deployment job so it build off the release branch
      - name: Dispatch production storybook deployment workflow
        if:
          ${{ (github.event.inputs.type  == 'full minor release') ||
          (github.event.inputs.type  == 'full patch release') }}
        uses: peter-evans/repository-dispatch@v3
        with:
          event-type: deploy-latest-storybook
          client-payload: '{"branch": "${{ github.ref_name }}"}'
