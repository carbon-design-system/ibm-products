import{e,r as o}from"./index-CPiZ6Cnx.js";import{S as Ee}from"./StoryDocsPage-BLDjGNdc.js";import{a as y}from"./chunk-D5ZWXAHU-CGElDDNX.js";import{B as b,p as N}from"./settings-iwZeeh4T.js";import"./index-CXyjPnaX.js";import{B as _}from"./ButtonSet-DCPCKVSR.js";import{D as Oe}from"./Dropdown-DDWTfRxS.js";import{F as ue}from"./Form--JAB0_ak.js";import{F as de}from"./FormGroup-9BStNhuZ.js";import{T as xe,a as M,b as we,c as Ae,d as F}from"./Tabs-f3msY8sL.js";import{T as Be,a as Se,b as Ie,A as Pe,c as De}from"./index-DFTsbWWI.js";import{T as B}from"./TextInput-D6QswYlg.js";import{T as g,d as Ne}from"./Tearsheet-Mj_NKq9Q.js";import{s as Me,a as Fe,b as _e,c as Re}from"./_storybook-styles-PO4T6scg.js";import{g as ze}from"./props-helper-Dlg0HCIz.js";import{T as Le}from"./TearsheetNarrow--jmzU21R.js";import{e as $e}from"./bucket-9-BSWQ2dSd.js";import"./_commonjsHelpers-BosuxZz1.js";import"./index--RGRayqE.js";import"./iframe-B0XBN4z8.js";import"../sb-preview/runtime.js";import"./index-BSHYryQu.js";import"./index-Bsyy8W_U.js";import"./index-Df9so8jS.js";import"./index-DMCuvgYY.js";import"./index-DrFu-skq.js";import"./story-helper-xvx7_7ek.js";import"./tslib.es6-B4_xh3D5.js";import"./v4-CQkTLCs1.js";import"./events-OVwOsPzJ.js";import"./index-DJK44odq.js";import"./index-BwLm7_-6.js";import"./FormContext-CgeSXHS1.js";import"./mergeRefs-CTUecegF.js";import"./bucket-18-By6NmkK1.js";import"./bucket-2-L5Cs0C3i.js";import"./ComposedModal-BZzRRIGC.js";import"./index-Dcfl0vi2.js";import"./LayerContext-BGhaVt7n.js";import"./InlineLoading-DZri6jHG.js";import"./bucket-6-BQYdmIZX.js";import"./requiredIfGivenPropIsTruthy-CU7JwK8h.js";import"./wrapFocus-i_P_nIQh.js";import"./useControllableState-uQXf5Mu5.js";import"./useNoInteractiveChildren-DSuYsaq5.js";import"./useMatchMedia-FpSN34ox.js";import"./Text-vNWzJqus.js";import"./bucket-17-Ddrrb1BH.js";import"./useNormalizedInputProps-Dv8FHz9Q.js";import"./useAnnouncer-Dwt0jqXi.js";import"./TearsheetShell-bqG2YThR.js";import"./useResizeObserver-CZKdqPxj.js";import"./getNodeTextContent-C8IeKkUQ.js";import"./usePortalTarget-2TvXB9Ir.js";import"./feature-flags-B_abUzZ5.js";import"./index-BLF2Ep9P.js";import"./useFocus-szDTkabV.js";import"./wait-CTNFjQS8.js";import"./usePreviousValue-CSEZflXC.js";import"./ActionSet-B09sMic5.js";import"./devtools-CjVY-wQW.js";const me=()=>e.createElement(Ee,{blocks:[{story:v},{story:k},{story:E},{story:S},{story:O},{story:x},{story:w},{story:A},{title:"With AI Label",description:"An AI Label is intended for any scenario where something is being generated by AI to reinforce AI transparency, accountability, and explainability at the UI level. A Carbon AI Label can be provided to the Tearsheet component by including an `decorator` property on it and providing the carbon AILabel component as its own custom component.<br/> The `decorator` is versatile and can also be used to render other components.",source:{language:"html",code:`
<Tearsheet
  {...args}
  decorator={
    // carbon AILabel component
    <AILabel
      className="ai-label-container"
      autoAlign={false}
      align="bottom-right"
    >
      <AILabelContent>... ...</AILabelContent>
    </AILabel>
  }
>
  ...
</Tearsheet>
          `}}]});me.__docgenInfo={description:"",methods:[],displayName:"DocsPage"};const Qt={title:"IBM Products/Components/Tearsheet",component:g,tags:["autodocs"],parameters:{styles:Me,layout:"fullscreen",docs:{page:me}},argTypes:{...ze(Ne),actions:{control:{type:"select",labels:Fe},options:_e,mapping:Re({primary:"Replace",danger:"Delete",secondary:"Back",secondary2:"Keep Both",dangerGhost:"Abort",ghost:"Cancel"},y)},description:{control:{type:"text"}},headerActions:{control:{type:"select",labels:{0:"none",1:"drop-down",2:"buttons"}},options:[0,1,2],mapping:{0:null,1:e.createElement(Oe,{id:"tss-had",label:"Choose an option",titleText:"Choose an option",items:["option 1","option 2","option 3","option 4"]}),2:e.createElement(_,null,e.createElement(b,{kind:"secondary",size:"sm",style:{width:"initial"}},"Secondary"),e.createElement(b,{kind:"primary",size:"sm",style:{width:"initial"}},"Primary"))}},label:{control:{type:"text"}},title:{control:{type:"text"}},influencer:{control:{disable:!0}},onClose:{control:{disable:!0}},navigation:{control:{disable:!0}},open:{control:{disable:!0}},portalTarget:{control:{disable:!0}},decorator:{control:{type:"select",labels:{0:"No AI Label",1:"with AI Label",2:"With non AI Label component"},default:0},description:"Optional prop that allows you to pass any component.",options:[0,1,2]},slug:{control:{type:"select",labels:{0:"No AI Slug",1:"with AI Slug"},default:0},description:'Deprecated: Property replaced by "decorator"',options:[0,1]}}},T="Close the tearsheet",C="This is a description for the tearsheet, providing an opportunity to   describe the flow over a couple of lines in the header of the tearsheet.",R=e.createElement("div",{className:"tearsheet-stories__dummy-content-block"},"Influencer"),z="The label of the tearsheet",fe=e.createElement("div",{className:"tearsheet-stories__dummy-content-block"},e.createElement(ue,null,e.createElement("p",null,"Main content"),e.createElement(de,{legendId:"tearsheet-form-group",legendText:"FormGroup Legend"},e.createElement(B,{id:"tss-ft1",labelText:"Enter an important value here",style:{marginBottom:"1em"}}),e.createElement(B,{id:"tss-ft2",labelText:"Here is an entry field:",style:{marginBottom:"1em"}})))),I="Title of the tearsheet",p=s=>{switch(s){case 1:return e.createElement(Pe,{className:"decorator-container",size:"xs"},e.createElement(De,null,e.createElement("div",null,e.createElement("p",{className:"secondary"},"AI Explained"),e.createElement("h1",null,"84%"),e.createElement("p",{className:"secondary bold"},"Confidence score"),e.createElement("p",{className:"secondary"},"This is not really Lorem Ipsum but the spell checker did not like the previous text with it's non-words which is why this unwieldy sentence, should one choose to call it that, here."),e.createElement("hr",null),e.createElement("p",{className:"secondary"},"Model type"),e.createElement("p",{className:"bold"},"Foundation model"))));case 2:return e.createElement(Be,null,e.createElement(Se,{label:"Additional information"},e.createElement($e,null)),e.createElement(Ie,null,e.createElement("p",null,"Custom content here")));default:return}},he=({actions:s,decorator:r,slug:a,...l},m)=>{const[f,t]=o.useState(!1);o.useEffect(()=>{setTimeout(()=>t(m.viewMode!=="docs"),0)},[]);const u=s&&Array.prototype.map.call(s,n=>{if(n.label==="Cancel"){const i=n.onClick;return{...n,onClick:d=>{t(!1),i(d)}}}return n}),h=o.useRef(void 0);return e.createElement(e.Fragment,null,e.createElement("style",null,`.${N.prefix}--tearsheet { opacity: 0 }`,";"),e.createElement(b,{onClick:()=>t(!0)},"Open Tearsheet"),e.createElement("div",{ref:h},e.createElement(g,{...l,actions:u,open:f,onClose:()=>t(!1),decorator:r&&p(r),slug:a&&p(a)},fe)))},be=e.createElement("div",{className:"tearsheet-stories__tabs"},e.createElement(xe,{"aria-label":"Tab list"},e.createElement(M,null,"Tab 1"),e.createElement(M,null,"Tab 2"),e.createElement(M,null,"Tab 3"),e.createElement(M,null,"Tab 4"))),ge=({actions:s,decorator:r,slug:a,...l},m)=>{const[f,t]=o.useState(!1);o.useEffect(()=>{setTimeout(()=>t(m.viewMode!=="docs"),0)},[]);const u=s&&Array.prototype.map.call(s,n=>{if(n.label==="Cancel"){const i=n.onClick;return{...n,onClick:d=>{t(!1),i(d)}}}return n}),h=o.useRef(void 0);return e.createElement(e.Fragment,null,e.createElement("style",null,`.${N.prefix}--tearsheet { opacity: 0 }`,";"),e.createElement(b,{onClick:()=>t(!0)},"Open Tearsheet"),e.createElement("div",{ref:h},e.createElement(we,{onChange:y("Tab selection changed")},e.createElement(g,{...l,actions:u,open:f,onClose:()=>t(!1),decorator:r&&p(r),slug:a&&p(a)},e.createElement(Ae,null,e.createElement(F,null,"Tab 1"),e.createElement(F,null,"Tab 2"),e.createElement(F,null,"Tab 3"),e.createElement(F,null,"Tab 4"))))))},Ge=({actions:s,decorator:r,slug:a,...l},m)=>{const[f,t]=o.useState(!1),u=o.useRef(void 0),h=s&&Array.prototype.map.call(s,i=>{if(i.label==="Cancel"){const d=i.onClick;return{...i,onClick:L=>{t(!1),d(L)}}}return i}),n=o.useRef(void 0);return o.useEffect(()=>{setTimeout(()=>t(m.viewMode!=="docs"),0)},[]),e.createElement(e.Fragment,null,e.createElement("style",null,`.${N.prefix}--tearsheet { opacity: 0 }`,";"),e.createElement(b,{ref:u,onClick:()=>t(!0)},"Open Tearsheet"),e.createElement("div",{ref:n},e.createElement(g,{...l,actions:h,open:f,onClose:()=>t(!1),decorator:r&&p(r),slug:a&&p(a),launcherButtonRef:u},fe)))},Ve=({actions:s,decorator:r,slug:a,...l},m)=>{const[f,t]=o.useState(!1),u=s&&Array.prototype.map.call(s,n=>{if(n.label==="Cancel"){const i=n.onClick;return{...n,onClick:d=>{t(!1),i(d)}}}return n}),h=o.useRef(void 0);return o.useEffect(()=>{setTimeout(()=>t(m.viewMode!=="docs"),0)},[]),e.createElement(e.Fragment,null,e.createElement("style",null,`.${N.prefix}--tearsheet { opacity: 0 }`,";"),e.createElement(b,{onClick:()=>t(!0)},"Open Tearsheet"),e.createElement("div",{ref:h},e.createElement(g,{...l,actions:u,open:f,onClose:()=>t(!1),decorator:r&&p(r),slug:a&&p(a)},e.createElement("div",{className:"tearsheet-stories__dummy-content-block"},e.createElement(ue,null,e.createElement("p",null,"Main content"),e.createElement(de,{legendId:"tearsheet-form-group",legendText:"FormGroup Legend"},e.createElement(B,{id:"tss-ft1",labelText:"Enter an important value here",style:{marginBottom:"1em"},disabled:!0}),e.createElement(B,{id:"tss-ft2",labelText:"Here is an entry field:",style:{marginBottom:"1em"}})))))))},ye=({mixedSizes:s,actions:r,decorator:a,slug:l,...m},f)=>{const[t,u]=o.useState(!1),[h,n]=o.useState(!1),[i,d]=o.useState(!1),L=o.useRef(void 0),$=o.useRef(),Te=Array.prototype.map.call(r,c=>{if(c.label==="Cancel"){const P=c.onClick;return{...c,onClick:D=>{u(!1),P(D)}}}return c}),Ce=Array.prototype.map.call(r,c=>{if(c.label==="Cancel"){const P=c.onClick;return{...c,onClick:D=>{n(!1),P(D)}}}return c}),ve=Array.prototype.map.call(r,c=>{if(c.label==="Cancel"){const P=c.onClick;return{...c,onClick:D=>{d(!1),P(D)}}}return c}),ke=s?Le:g;return o.useEffect(()=>{setTimeout(()=>{u(f.viewMode!=="docs"),n(f.viewMode!=="docs"),d(f.viewMode!=="docs")},0)},[]),e.createElement(e.Fragment,null,e.createElement("style",null,`.${N.prefix}--tearsheet { opacity: 0 }`,";"),e.createElement("div",{style:{height:"3rem"},"data-reserve-space":"for toggle buttons"}),e.createElement(_,{style:{display:"flex",position:"fixed",top:0,left:0,zIndex:1e4}},e.createElement(b,{onClick:()=>u(!t),ref:$},"Toggle tearsheet 1"),e.createElement(b,{onClick:()=>n(!h)},"Toggle tearsheet 2"),!s&&e.createElement(b,{onClick:()=>d(!i)},"Toggle tearsheet 3")),e.createElement("div",{ref:L},e.createElement(g,{...m,actions:Te,headerActions:e.createElement(_,null,e.createElement(b,{kind:"primary",size:"sm",style:{width:"initial"},onClick:()=>n(!0),disabled:h},"Open tearsheet 2")),title:"Tearsheet 1",open:t,onClose:()=>u(!1),selectorPrimaryFocus:"#stacked-input-1",decorator:a&&p(a),slug:l&&p(l),launcherButtonRef:$},e.createElement("div",{className:"tearsheet-stories__dummy-content-block"},"Main content 1",e.createElement(B,{id:"stacked-input-1",labelText:"Enter an important value here"}))),e.createElement(ke,{...m,actions:Ce,headerActions:e.createElement(_,null,e.createElement(b,{kind:"primary",size:"sm",style:{width:"initial"},onClick:()=>d(!0),disabled:i},"Open tearsheet 3")),title:"Tearsheet 2",open:h,onClose:()=>n(!1),selectorPrimaryFocus:"#stacked-input-2",decorator:a&&p(a),slug:l&&p(l)},e.createElement("div",{className:"tearsheet-stories__dummy-content-block"},"Main content 2",e.createElement(B,{id:"stacked-input-2",labelText:"Enter an important value here"}))),!s&&e.createElement(g,{...m,actions:ve,title:"Tearsheet 3",open:i,onClose:()=>d(!1),selectorPrimaryFocus:"#stacked-input-3",decorator:a&&p(a),slug:l&&p(l)},e.createElement("div",{className:"tearsheet-stories__dummy-content-block"},"Main content 3",e.createElement(B,{id:"stacked-input-3",labelText:"Enter an important value here"})))))},v=he.bind({});v.storyName="Tearsheet";v.args={closeIconDescription:T,description:C,onClose:y("onClose called"),title:I,actions:7,selectorPrimaryFocus:"#tss-ft1"};const k=ge.bind({});k.storyName="Tearsheet with navigation";k.args={closeIconDescription:T,description:C,label:z,navigation:be,onClose:y("onClose called"),title:I,actions:7};const E=he.bind({});E.storyName="Tearsheet with influencer";E.args={closeIconDescription:T,description:C,influencer:R,influencerPosition:"left",influencerWidth:"narrow",onClose:y("onClose called"),title:I,actions:7};const S=Ge.bind({});S.args={closeIconDescription:T,description:C,onClose:y("onClose called"),title:I,actions:7};const O=Ve.bind({});O.storyName="First Element Disabled";O.args={closeIconDescription:T,hasCloseIcon:!0,description:C,onClose:y("onClose called"),title:I,actions:7,selectorPrimaryFocus:"#tss-ft1"};const x=ge.bind({});x.storyName="Tearsheet with all header items and influencer";x.args={closeIconDescription:T,description:C,hasCloseIcon:!0,headerActions:2,influencer:R,influencerPosition:"left",influencerWidth:"narrow",label:z,navigation:be,onClose:y("onClose called"),title:I,actions:0,decorator:1,slug:0};const w=ye.bind({});w.storyName="Stacking tearsheets";w.args={closeIconDescription:T,description:C,height:"lower",influencer:R,label:z,actions:7};const A=ye.bind({});A.storyName="Stacking tearsheets, different sizes";A.args={mixedSizes:!0,closeIconDescription:T,description:C,height:"lower",influencer:R,label:z,actions:7};var G,V,W;v.parameters={...v.parameters,docs:{...(G=v.parameters)==null?void 0:G.docs,source:{originalSource:`({
  actions,
  decorator,
  slug,
  ...args
}, context) => {
  const [open, setOpen] = useState(false);
  useEffect(() => {
    setTimeout(() => setOpen(context.viewMode !== 'docs'), 0);
  }, []);
  const wiredActions = actions && Array.prototype.map.call(actions, action => {
    if (action.label === 'Cancel') {
      const previousClick = action.onClick;
      return {
        ...action,
        onClick: evt => {
          setOpen(false);
          previousClick(evt);
        }
      };
    }
    return action;
  });
  const ref = useRef(undefined);
  return <>
      <style>{\`.\${pkg.prefix}--tearsheet { opacity: 0 }\`};</style>
      <Button onClick={() => setOpen(true)}>Open Tearsheet</Button>
      <div ref={ref}>
        <Tearsheet {...args} actions={wiredActions} open={open} onClose={() => setOpen(false)} decorator={decorator && sampleDecorator(decorator)} slug={slug && sampleDecorator(slug)}>
          {mainContent}
        </Tearsheet>
      </div>
    </>;
}`,...(W=(V=v.parameters)==null?void 0:V.docs)==null?void 0:W.source}}};var H,K,U;k.parameters={...k.parameters,docs:{...(H=k.parameters)==null?void 0:H.docs,source:{originalSource:`({
  actions,
  decorator,
  slug,
  ...args
}, context) => {
  const [open, setOpen] = useState(false);
  useEffect(() => {
    setTimeout(() => setOpen(context.viewMode !== 'docs'), 0);
  }, []);
  const wiredActions = actions && Array.prototype.map.call(actions, action => {
    if (action.label === 'Cancel') {
      const previousClick = action.onClick;
      return {
        ...action,
        onClick: evt => {
          setOpen(false);
          previousClick(evt);
        }
      };
    }
    return action;
  });
  const ref = useRef(undefined);
  return <>
      <style>{\`.\${pkg.prefix}--tearsheet { opacity: 0 }\`};</style>
      <Button onClick={() => setOpen(true)}>Open Tearsheet</Button>
      <div ref={ref}>
        <Tabs onChange={action('Tab selection changed')}>
          <Tearsheet {...args} actions={wiredActions} open={open} onClose={() => setOpen(false)} decorator={decorator && sampleDecorator(decorator)} slug={slug && sampleDecorator(slug)}>
            <TabPanels>
              <TabPanel>Tab 1</TabPanel>
              <TabPanel>Tab 2</TabPanel>
              <TabPanel>Tab 3</TabPanel>
              <TabPanel>Tab 4</TabPanel>
            </TabPanels>
          </Tearsheet>
        </Tabs>
      </div>
    </>;
}`,...(U=(K=k.parameters)==null?void 0:K.docs)==null?void 0:U.source}}};var j,q,J;E.parameters={...E.parameters,docs:{...(j=E.parameters)==null?void 0:j.docs,source:{originalSource:`({
  actions,
  decorator,
  slug,
  ...args
}, context) => {
  const [open, setOpen] = useState(false);
  useEffect(() => {
    setTimeout(() => setOpen(context.viewMode !== 'docs'), 0);
  }, []);
  const wiredActions = actions && Array.prototype.map.call(actions, action => {
    if (action.label === 'Cancel') {
      const previousClick = action.onClick;
      return {
        ...action,
        onClick: evt => {
          setOpen(false);
          previousClick(evt);
        }
      };
    }
    return action;
  });
  const ref = useRef(undefined);
  return <>
      <style>{\`.\${pkg.prefix}--tearsheet { opacity: 0 }\`};</style>
      <Button onClick={() => setOpen(true)}>Open Tearsheet</Button>
      <div ref={ref}>
        <Tearsheet {...args} actions={wiredActions} open={open} onClose={() => setOpen(false)} decorator={decorator && sampleDecorator(decorator)} slug={slug && sampleDecorator(slug)}>
          {mainContent}
        </Tearsheet>
      </div>
    </>;
}`,...(J=(q=E.parameters)==null?void 0:q.docs)==null?void 0:J.source}}};var Q,X,Y;S.parameters={...S.parameters,docs:{...(Q=S.parameters)==null?void 0:Q.docs,source:{originalSource:`({
  actions,
  decorator,
  slug,
  ...args
}, context) => {
  const [open, setOpen] = useState(false);
  const buttonRef = useRef(undefined);
  const wiredActions = actions && Array.prototype.map.call(actions, action => {
    if (action.label === 'Cancel') {
      const previousClick = action.onClick;
      return {
        ...action,
        onClick: evt => {
          setOpen(false);
          previousClick(evt);
        }
      };
    }
    return action;
  });
  const ref = useRef(undefined);
  useEffect(() => {
    setTimeout(() => setOpen(context.viewMode !== 'docs'), 0);
  }, []);
  return <>
      <style>{\`.\${pkg.prefix}--tearsheet { opacity: 0 }\`};</style>
      <Button ref={buttonRef} onClick={() => setOpen(true)}>
        Open Tearsheet
      </Button>
      <div ref={ref}>
        <Tearsheet {...args} actions={wiredActions} open={open} onClose={() => setOpen(false)} decorator={decorator && sampleDecorator(decorator)} slug={slug && sampleDecorator(slug)} launcherButtonRef={buttonRef}>
          {mainContent}
        </Tearsheet>
      </div>
    </>;
}`,...(Y=(X=S.parameters)==null?void 0:X.docs)==null?void 0:Y.source}}};var Z,ee,te;O.parameters={...O.parameters,docs:{...(Z=O.parameters)==null?void 0:Z.docs,source:{originalSource:`({
  actions,
  decorator,
  slug,
  ...args
}, context) => {
  const [open, setOpen] = useState(false);
  const wiredActions = actions && Array.prototype.map.call(actions, action => {
    if (action.label === 'Cancel') {
      const previousClick = action.onClick;
      return {
        ...action,
        onClick: evt => {
          setOpen(false);
          previousClick(evt);
        }
      };
    }
    return action;
  });
  const ref = useRef(undefined);
  useEffect(() => {
    setTimeout(() => setOpen(context.viewMode !== 'docs'), 0);
  }, []);
  return <>
      <style>{\`.\${pkg.prefix}--tearsheet { opacity: 0 }\`};</style>
      <Button onClick={() => setOpen(true)}>Open Tearsheet</Button>
      <div ref={ref}>
        <Tearsheet {...args} actions={wiredActions} open={open} onClose={() => setOpen(false)} decorator={decorator && sampleDecorator(decorator)} slug={slug && sampleDecorator(slug)}>
          <div className="tearsheet-stories__dummy-content-block">
            <Form>
              <p>Main content</p>
              <FormGroup legendId="tearsheet-form-group" legendText="FormGroup Legend">
                <TextInput id="tss-ft1" labelText="Enter an important value here" style={
              // stylelint-disable-next-line carbon/layout-use
              {
                marginBottom: '1em'
              }} disabled />
                <TextInput id="tss-ft2" labelText="Here is an entry field:" style={
              // stylelint-disable-next-line carbon/layout-use
              {
                marginBottom: '1em'
              }} />
              </FormGroup>
            </Form>
          </div>
        </Tearsheet>
      </div>
    </>;
}`,...(te=(ee=O.parameters)==null?void 0:ee.docs)==null?void 0:te.source}}};var ne,oe,ae;x.parameters={...x.parameters,docs:{...(ne=x.parameters)==null?void 0:ne.docs,source:{originalSource:`({
  actions,
  decorator,
  slug,
  ...args
}, context) => {
  const [open, setOpen] = useState(false);
  useEffect(() => {
    setTimeout(() => setOpen(context.viewMode !== 'docs'), 0);
  }, []);
  const wiredActions = actions && Array.prototype.map.call(actions, action => {
    if (action.label === 'Cancel') {
      const previousClick = action.onClick;
      return {
        ...action,
        onClick: evt => {
          setOpen(false);
          previousClick(evt);
        }
      };
    }
    return action;
  });
  const ref = useRef(undefined);
  return <>
      <style>{\`.\${pkg.prefix}--tearsheet { opacity: 0 }\`};</style>
      <Button onClick={() => setOpen(true)}>Open Tearsheet</Button>
      <div ref={ref}>
        <Tabs onChange={action('Tab selection changed')}>
          <Tearsheet {...args} actions={wiredActions} open={open} onClose={() => setOpen(false)} decorator={decorator && sampleDecorator(decorator)} slug={slug && sampleDecorator(slug)}>
            <TabPanels>
              <TabPanel>Tab 1</TabPanel>
              <TabPanel>Tab 2</TabPanel>
              <TabPanel>Tab 3</TabPanel>
              <TabPanel>Tab 4</TabPanel>
            </TabPanels>
          </Tearsheet>
        </Tabs>
      </div>
    </>;
}`,...(ae=(oe=x.parameters)==null?void 0:oe.docs)==null?void 0:ae.source}}};var se,re,le;w.parameters={...w.parameters,docs:{...(se=w.parameters)==null?void 0:se.docs,source:{originalSource:`({
  mixedSizes,
  actions,
  decorator,
  slug,
  ...args
}, context) => {
  const [open1, setOpen1] = useState(false);
  const [open2, setOpen2] = useState(false);
  const [open3, setOpen3] = useState(false);
  const ref = useRef(undefined);
  const openButton1 = useRef();
  const wiredActions1 = Array.prototype.map.call(actions, action => {
    if (action.label === 'Cancel') {
      const previousClick = action.onClick;
      return {
        ...action,
        onClick: evt => {
          setOpen1(false);
          previousClick(evt);
        }
      };
    }
    return action;
  });
  const wiredActions2 = Array.prototype.map.call(actions, action => {
    if (action.label === 'Cancel') {
      const previousClick = action.onClick;
      return {
        ...action,
        onClick: evt => {
          setOpen2(false);
          previousClick(evt);
        }
      };
    }
    return action;
  });
  const wiredActions3 = Array.prototype.map.call(actions, action => {
    if (action.label === 'Cancel') {
      const previousClick = action.onClick;
      return {
        ...action,
        onClick: evt => {
          setOpen3(false);
          previousClick(evt);
        }
      };
    }
    return action;
  });
  const VariableSizeTearsheet = mixedSizes ? TearsheetNarrow : Tearsheet;
  useEffect(() => {
    setTimeout(() => {
      setOpen1(context.viewMode !== 'docs');
      setOpen2(context.viewMode !== 'docs');
      setOpen3(context.viewMode !== 'docs');
    }, 0);
  }, []);
  return <>
      <style>{\`.\${pkg.prefix}--tearsheet { opacity: 0 }\`};</style>
      <div style={{
      height: '3rem'
    }} data-reserve-space="for toggle buttons" />
      <ButtonSet style={{
      display: 'flex',
      position: 'fixed',
      top: 0,
      left: 0,
      zIndex: 10000
    }}>
        <Button onClick={() => setOpen1(!open1)} ref={openButton1}>
          Toggle&nbsp;tearsheet&nbsp;1
        </Button>
        <Button onClick={() => setOpen2(!open2)}>
          Toggle&nbsp;tearsheet&nbsp;2
        </Button>
        {!mixedSizes && <Button onClick={() => setOpen3(!open3)}>
            Toggle&nbsp;tearsheet&nbsp;3
          </Button>}
      </ButtonSet>
      <div ref={ref}>
        <Tearsheet {...args} actions={wiredActions1} headerActions={<ButtonSet>
              <Button kind="primary" size="sm" style={{
          width: 'initial'
        }} onClick={() => setOpen2(true)} disabled={open2}>
                Open tearsheet 2
              </Button>
            </ButtonSet>} title="Tearsheet 1" open={open1} onClose={() => setOpen1(false)} selectorPrimaryFocus="#stacked-input-1" decorator={decorator && sampleDecorator(decorator)} slug={slug && sampleDecorator(slug)} launcherButtonRef={openButton1}>
          <div className="tearsheet-stories__dummy-content-block">
            Main content 1
            <TextInput id="stacked-input-1" labelText="Enter an important value here" />
          </div>
        </Tearsheet>
        <VariableSizeTearsheet {...args} actions={wiredActions2} headerActions={<ButtonSet>
              <Button kind="primary" size="sm" style={{
          width: 'initial'
        }} onClick={() => setOpen3(true)} disabled={open3}>
                Open tearsheet 3
              </Button>
            </ButtonSet>} title="Tearsheet 2" open={open2} onClose={() => setOpen2(false)} selectorPrimaryFocus="#stacked-input-2" decorator={decorator && sampleDecorator(decorator)} slug={slug && sampleDecorator(slug)}>
          <div className="tearsheet-stories__dummy-content-block">
            Main content 2
            <TextInput id="stacked-input-2" labelText="Enter an important value here" />
          </div>
        </VariableSizeTearsheet>
        {!mixedSizes && <Tearsheet {...args} actions={wiredActions3} title="Tearsheet 3" open={open3} onClose={() => setOpen3(false)} selectorPrimaryFocus="#stacked-input-3" decorator={decorator && sampleDecorator(decorator)} slug={slug && sampleDecorator(slug)}>
            <div className="tearsheet-stories__dummy-content-block">
              Main content 3
              <TextInput id="stacked-input-3" labelText="Enter an important value here" />
            </div>
          </Tearsheet>}
      </div>
    </>;
}`,...(le=(re=w.parameters)==null?void 0:re.docs)==null?void 0:le.source}}};var ie,ce,pe;A.parameters={...A.parameters,docs:{...(ie=A.parameters)==null?void 0:ie.docs,source:{originalSource:`({
  mixedSizes,
  actions,
  decorator,
  slug,
  ...args
}, context) => {
  const [open1, setOpen1] = useState(false);
  const [open2, setOpen2] = useState(false);
  const [open3, setOpen3] = useState(false);
  const ref = useRef(undefined);
  const openButton1 = useRef();
  const wiredActions1 = Array.prototype.map.call(actions, action => {
    if (action.label === 'Cancel') {
      const previousClick = action.onClick;
      return {
        ...action,
        onClick: evt => {
          setOpen1(false);
          previousClick(evt);
        }
      };
    }
    return action;
  });
  const wiredActions2 = Array.prototype.map.call(actions, action => {
    if (action.label === 'Cancel') {
      const previousClick = action.onClick;
      return {
        ...action,
        onClick: evt => {
          setOpen2(false);
          previousClick(evt);
        }
      };
    }
    return action;
  });
  const wiredActions3 = Array.prototype.map.call(actions, action => {
    if (action.label === 'Cancel') {
      const previousClick = action.onClick;
      return {
        ...action,
        onClick: evt => {
          setOpen3(false);
          previousClick(evt);
        }
      };
    }
    return action;
  });
  const VariableSizeTearsheet = mixedSizes ? TearsheetNarrow : Tearsheet;
  useEffect(() => {
    setTimeout(() => {
      setOpen1(context.viewMode !== 'docs');
      setOpen2(context.viewMode !== 'docs');
      setOpen3(context.viewMode !== 'docs');
    }, 0);
  }, []);
  return <>
      <style>{\`.\${pkg.prefix}--tearsheet { opacity: 0 }\`};</style>
      <div style={{
      height: '3rem'
    }} data-reserve-space="for toggle buttons" />
      <ButtonSet style={{
      display: 'flex',
      position: 'fixed',
      top: 0,
      left: 0,
      zIndex: 10000
    }}>
        <Button onClick={() => setOpen1(!open1)} ref={openButton1}>
          Toggle&nbsp;tearsheet&nbsp;1
        </Button>
        <Button onClick={() => setOpen2(!open2)}>
          Toggle&nbsp;tearsheet&nbsp;2
        </Button>
        {!mixedSizes && <Button onClick={() => setOpen3(!open3)}>
            Toggle&nbsp;tearsheet&nbsp;3
          </Button>}
      </ButtonSet>
      <div ref={ref}>
        <Tearsheet {...args} actions={wiredActions1} headerActions={<ButtonSet>
              <Button kind="primary" size="sm" style={{
          width: 'initial'
        }} onClick={() => setOpen2(true)} disabled={open2}>
                Open tearsheet 2
              </Button>
            </ButtonSet>} title="Tearsheet 1" open={open1} onClose={() => setOpen1(false)} selectorPrimaryFocus="#stacked-input-1" decorator={decorator && sampleDecorator(decorator)} slug={slug && sampleDecorator(slug)} launcherButtonRef={openButton1}>
          <div className="tearsheet-stories__dummy-content-block">
            Main content 1
            <TextInput id="stacked-input-1" labelText="Enter an important value here" />
          </div>
        </Tearsheet>
        <VariableSizeTearsheet {...args} actions={wiredActions2} headerActions={<ButtonSet>
              <Button kind="primary" size="sm" style={{
          width: 'initial'
        }} onClick={() => setOpen3(true)} disabled={open3}>
                Open tearsheet 3
              </Button>
            </ButtonSet>} title="Tearsheet 2" open={open2} onClose={() => setOpen2(false)} selectorPrimaryFocus="#stacked-input-2" decorator={decorator && sampleDecorator(decorator)} slug={slug && sampleDecorator(slug)}>
          <div className="tearsheet-stories__dummy-content-block">
            Main content 2
            <TextInput id="stacked-input-2" labelText="Enter an important value here" />
          </div>
        </VariableSizeTearsheet>
        {!mixedSizes && <Tearsheet {...args} actions={wiredActions3} title="Tearsheet 3" open={open3} onClose={() => setOpen3(false)} selectorPrimaryFocus="#stacked-input-3" decorator={decorator && sampleDecorator(decorator)} slug={slug && sampleDecorator(slug)}>
            <div className="tearsheet-stories__dummy-content-block">
              Main content 3
              <TextInput id="stacked-input-3" labelText="Enter an important value here" />
            </div>
          </Tearsheet>}
      </div>
    </>;
}`,...(pe=(ce=A.parameters)==null?void 0:ce.docs)==null?void 0:pe.source}}};const Xt=["tearsheet","withNavigation","withInfluencer","ReturnFocusToOpenButton","firstElementDisabled","fullyLoaded","stacked","stackedMixedSizes"];export{S as ReturnFocusToOpenButton,Xt as __namedExportsOrder,Qt as default,O as firstElementDisabled,x as fullyLoaded,w as stacked,A as stackedMixedSizes,v as tearsheet,E as withInfluencer,k as withNavigation};
