import{d as c,P as t,G as J,r as Q,aa as X}from"./index-5As4T26e.js";import{p as T,I as Z,B as P}from"./settings-CP9zVSjJ.js";import{S as D,H as x}from"./index-pOgDNIY8.js";import{e,r as m}from"./index-DzvNrmz8.js";import{p as ee,g as te,a as ae}from"./index-Cwv8QpiQ.js";import{g as E}from"./devtools-B_dijMH7.js";import{c as le}from"./clamp-CsXXRQhr.js";import{c as ne}from"./bucket-18-D-cwffHE.js";import{b as re}from"./bucket-9-DBhRplFe.js";import{u as z}from"./uuidv4-BN2rGLQG.js";var s=(l=>(l.light="light",l.dark="dark",l))(s||{}),r=(l=>(l.unchecked="unchecked",l.indeterminate="indeterminate",l.checked="checked",l.disabled="disabled",l.error="error",l))(r||{});const B=`${T.prefix}--checklist__chart`,S="ChecklistChart",se={theme:s.light};let _=e.forwardRef(({className:l,value:d,theme:p=se.theme,...h},g)=>{const i=le(d*360,0,360),y=p===s.light?te:ae,f=ee;return m.useEffect(()=>{const C=document.getElementsByClassName(`${B}`);setTimeout(()=>{for(const k of C)k instanceof HTMLElement&&(k.style.setProperty("background-image",`conic-gradient(${f} ${i}deg, ${y} ${i}deg 360deg)`),k.style.setProperty("border-radius","50%"))},0)}),e.createElement("div",{...h,className:c(B,l),ref:g,role:"img",...E(S)})});_.displayName=S;_.propTypes={className:t.string,theme:t.oneOf([s.light,s.dark]),value:t.number.isRequired};_.__docgenInfo={description:"Custom chart component used within Checklist PLG component",methods:[],displayName:"ChecklistChart",props:{theme:{defaultValue:{value:"Themes.light",computed:!0},description:"Determines the theme of the component.",type:{name:"enum",value:[{value:"Themes.light",computed:!0},{value:"Themes.dark",computed:!0}]},required:!1},className:{description:"Optional class name for this component.",type:{name:"string"},required:!1},value:{description:"Number between 0 and 1.",type:{name:"number"},required:!0}}};const q=`${T.prefix}--checklist__icon`,ie="ChecklistIcon",oe={theme:s.light};let w=e.forwardRef(({className:l,kind:d,theme:p=oe.theme,...h},g)=>{let i;switch(d){case"error":i=ne;break;case"indeterminate":i=re;break;case"checked":i=Q;break;default:i=J;break}return e.createElement("span",{...h,className:c(q,l,`${q}--${d}`,`${q}__${p}`),ref:g,...E(ie)},e.createElement(i,{size:16}))});w.propTypes={className:t.string,kind:t.oneOf([r.unchecked,r.indeterminate,r.checked,r.disabled,r.error]),theme:t.oneOf([s.light,s.dark])};w.__docgenInfo={description:"TODO: A description of the component.",methods:[],displayName:"ChecklistIcon",props:{theme:{defaultValue:{value:"Themes.light",computed:!0},description:"Determines the theme of the component.",type:{name:"enum",value:[{value:"Themes.light",computed:!0},{value:"Themes.dark",computed:!0}]},required:!1},className:{description:"Provide an optional class to be applied to the containing node.",type:{name:"string"},required:!1},kind:{description:"The icon to be displayed.",type:{name:"enum",value:[{value:"Kinds.unchecked",computed:!0},{value:"Kinds.indeterminate",computed:!0},{value:"Kinds.checked",computed:!0},{value:"Kinds.disabled",computed:!0},{value:"Kinds.error",computed:!0}]},required:!1}}};const a=`${T.prefix}--checklist`,L="Checklist",o={checklistAriaLabel:"Checklist",checklistToggleAriaLabel:"Checklist toggle",onClickViewAll:()=>{},onToggle:()=>{},open:!0,enableToggle:!0,taskLists:[],theme:s.light,toggleLabel:"Toggle"};let b=e.forwardRef(({chartValue:l,chartLabel:d,checklistAriaLabel:p=o.checklistAriaLabel,checklistToggleAriaLabel:h=o.checklistToggleAriaLabel,className:g,onClickViewAll:i=o.onClickViewAll,onToggle:y=o.onToggle,open:f=o.open,enableToggle:C=o.enableToggle,taskLists:k=o.taskLists,theme:A=o.theme,title:$,toggleLabel:H=o.toggleLabel,toggleLabelAlign:W="top",viewAllLabel:V,...j},G)=>{const[v,K]=m.useState(f),O=m.useRef(z()).current,I=m.useRef(z()).current,N=typeof l=="number"&&d,M=()=>{K(u=>!u)},U=()=>{i()};return m.useEffect(()=>{y(v)},[v,y]),m.useEffect(()=>{K(f)},[f]),e.createElement(D,{...j,"aria-label":p,as:"aside",className:c(a,g,{[`${a}__closed`]:!v}),ref:G,...E(L)},($||N)&&e.createElement("header",{className:`${a}__header`},N&&e.createElement(_,{"aria-labelledby":I,theme:A,value:l}),e.createElement("div",{className:`${a}__titles`},$&&e.createElement(x,{className:`${a}__title`},$),N&&e.createElement("p",{id:I,className:`${a}__chart-label`},d)),C&&e.createElement(Z,{align:W,"aria-controls":O,"aria-expanded":v,"aria-label":h,className:`${a}__toggle`,kind:"ghost",label:H,onClick:M,size:"sm"},e.createElement(X,{size:16,className:c(`${a}__chevron`)}))),e.createElement("div",{id:O,className:`${a}__content-outer`},e.createElement("div",{className:`${a}__content-inner`},e.createElement("div",{className:c(`${a}__body`)},k.map((u,Y)=>e.createElement(D,{className:`${a}__list-group`,key:`${u.title}-${Y}`},u.title&&e.createElement(x,{title:u.title,className:`${a}__list-title`},u.title),e.createElement("ol",{className:`${a}__list`},u.tasks.map((n,F)=>e.createElement("li",{className:`${a}__list-item`,key:`${n.label}-${F}`},e.createElement(w,{kind:n.kind,theme:A}),typeof n.onClick=="function"?e.createElement(P,{className:c(`${a}__button`,{[`${a}__button--error`]:n.kind==="error"}),onClick:()=>{var R;(R=n.onClick)==null||R.call(n,n)},size:"sm",title:n.label},e.createElement("div",null,n.label)):e.createElement("div",{className:c(`${a}__label`,`${a}__label--${n.kind}`),title:n.label},n.label))))))),V&&e.createElement("footer",{className:`${a}__footer`},e.createElement(P,{className:c(`${a}__button`,`${a}__view-all`),onClick:U,size:"sm"},e.createElement("div",null,V))))))});b=T.checkComponentEnabled(b,L);b.displayName=L;b.propTypes={chartLabel:t.string,chartValue:t.number,checklistAriaLabel:t.string,checklistToggleAriaLabel:t.string,className:t.string,enableToggle:t.bool,onClickViewAll:t.func,onToggle:t.func,open:t.bool,taskLists:t.arrayOf(t.shape({title:t.string,tasks:t.arrayOf(t.shape({kind:t.oneOf([r.unchecked,r.indeterminate,r.checked,r.disabled,r.error]).isRequired,label:t.string.isRequired,onClick:t.func})).isRequired})).isRequired,theme:t.oneOf([s.light,s.dark]),title:t.node,toggleLabel:t.string,toggleLabelAlign:t.oneOf(["top","top-left","top-right","bottom","bottom-left","bottom-right","left","right"]),viewAllLabel:t.string};b.__docgenInfo={description:`The Checklist tracks a user's progress much like Your Learning or
WalkMe. Each item in the list can be clickable, and each item has
an icon that defines the item's state as "not started", "in progress",
and "complete".`,methods:[],displayName:"Checklist",props:{chartLabel:{required:!1,tsType:{name:"string"},description:"Define both `chartLabel` and `chartValue` to show the chart and its label together.",type:{name:"string"}},chartValue:{required:!1,tsType:{name:"number"},description:"A number between 0 and 1.\n\nDefine both `chartLabel` and `chartValue` to show the chart and its label together.",type:{name:"number"}},checklistAriaLabel:{required:!1,tsType:{name:"string"},description:"Aria-label for the Checklist component.",defaultValue:{value:"'Checklist'",computed:!1},type:{name:"string"}},checklistToggleAriaLabel:{required:!1,tsType:{name:"string"},description:"Aria-label for the Checklist's toggle component.",defaultValue:{value:"'Checklist toggle'",computed:!1},type:{name:"string"}},className:{required:!1,tsType:{name:"string"},description:"Provide an optional class to be applied to the containing node.",type:{name:"string"}},enableToggle:{required:!1,tsType:{name:"boolean"},description:"Whether or not to show the open/close toggle.",defaultValue:{value:"true",computed:!1},type:{name:"bool"}},open:{required:!1,tsType:{name:"boolean"},description:`Specifies whether the component is opened or closed.
This can be set during initialization, or changed after being rendered.`,defaultValue:{value:"true",computed:!1},type:{name:"bool"}},taskLists:{required:!1,tsType:{name:"Array",elements:[{name:"signature",type:"object",raw:`{
  title?: string;
  tasks: Array<Task>;
}`,signature:{properties:[{key:"title",value:{name:"string",required:!1}},{key:"tasks",value:{name:"Array",elements:[{name:"signature",type:"object",raw:`{
  kind: Kind;
  label: string;
  onClick?(task?: Task): void;
}`,signature:{properties:[{key:"kind",value:{name:"union",raw:`| Kinds.unchecked
| Kinds.indeterminate
| Kinds.checked
| Kinds.disabled
| Kinds.error`,elements:[{name:"Kinds.unchecked"},{name:"Kinds.indeterminate"},{name:"Kinds.checked"},{name:"Kinds.disabled"},{name:"Kinds.error"}],required:!0}},{key:"label",value:{name:"string",required:!0}},{key:"onClick",value:{name:"void",required:!1}}]}}],raw:"Array<Task>",required:!0}}]}}],raw:"Array<TaskList>"},description:"The task list can be broken down into sub-lists.\n\nEach sub-list can include an optional `title`.\n\nEach task must specify the appropriate icon (`kind`) and `label`.\n\nIf any task has an `onClick` callback function defined,\nthen the `label` will be rendered as a button,\nelse the `label` will be rendered as plain text.",defaultValue:{value:"[]",computed:!1},type:{name:"arrayOf",value:{name:"shape",value:{title:{name:"string",required:!1},tasks:{name:"arrayOf",value:{name:"shape",value:{kind:{name:"enum",value:[{value:"Kinds.unchecked",computed:!0},{value:"Kinds.indeterminate",computed:!0},{value:"Kinds.checked",computed:!0},{value:"Kinds.disabled",computed:!0},{value:"Kinds.error",computed:!0}],required:!0},label:{name:"string",required:!0},onClick:{name:"func",required:!1}}},required:!0}}}}},theme:{required:!1,tsType:{name:"union",raw:"Themes.light | Themes.dark",elements:[{name:"Themes.light"},{name:"Themes.dark"}]},description:"Determines the theme of the component.",defaultValue:{value:"Themes.light",computed:!0},type:{name:"enum",value:[{value:"Themes.light",computed:!0},{value:"Themes.dark",computed:!0}]}},title:{required:!1,tsType:{name:"ReactNode"},description:"The title of the component.",type:{name:"node"}},toggleLabel:{required:!1,tsType:{name:"string"},description:"The label for the toggle's tooltip.",defaultValue:{value:"'Toggle'",computed:!1},type:{name:"string"}},toggleLabelAlign:{required:!1,tsType:{name:"ReactComponentProps['align']",raw:"React.ComponentProps<typeof IconButton>['align']"},description:"The alignment of the toggle's tooltip.",defaultValue:{value:"'top'",computed:!1},type:{name:"enum",value:[{value:"'top'",computed:!1},{value:"'top-left'",computed:!1},{value:"'top-right'",computed:!1},{value:"'bottom'",computed:!1},{value:"'bottom-left'",computed:!1},{value:"'bottom-right'",computed:!1},{value:"'left'",computed:!1},{value:"'right'",computed:!1}]}},viewAllLabel:{required:!1,tsType:{name:"string"},description:'If defined, will show and enable the "View all (#)" button at the bottom of the list.',type:{name:"string"}},onClickViewAll:{defaultValue:{value:"() => {}",computed:!1},description:'Callback for the "View all" button. See also `viewAllLabel`.',type:{name:"func"},required:!1},onToggle:{defaultValue:{value:"() => {}",computed:!1},description:"Optional callback for when the list is opened/closed.",type:{name:"func"},required:!1}}};export{b as C};
