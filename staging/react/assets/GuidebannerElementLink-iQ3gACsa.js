import{e,r as b,c as l,p as c,B as v,I as x,n as j,P as t,cO as H}from"./iframe-Cbdf71kV.js";import{b as J,c as K}from"./index-CS-Uexcx.js";import{g as f}from"./devtools-BsT0_Owc.js";import{u as Q}from"./uuidv4-BN2rGLQG.js";import{C as U}from"./Carousel-CuNgyfm0.js";import{C as X,a as Y}from"./bucket-2-D5C3PV8a.js";import{e as Z}from"./bucket-9-DiKgF3S5.js";import{L as ee}from"./Link-CCRD-roz.js";const n=`${c.prefix}--guidebanner`,I="Guidebanner",d={collapsible:!1,withLeftGutter:!1,closeIconDescription:"Close",collapseButtonLabel:"Read less",expandButtonLabel:"Read more",nextIconDescription:"Next",previousIconDescription:"Back"};let g=e.forwardRef((o,i)=>{const{children:s,className:r,collapsible:a=d.collapsible,onClose:p,withLeftGutter:L=d.withLeftGutter,closeIconDescription:R=d.closeIconDescription,collapseButtonLabel:D=d.collapseButtonLabel,expandButtonLabel:B=d.expandButtonLabel,nextIconDescription:P=d.nextIconDescription,previousIconDescription:z=d.previousIconDescription,title:S,...O}=o,k=b.useRef(null),A=b.useRef(null),[N,W]=b.useState(0),[q,F]=b.useState(!1),[m,M]=b.useState(!!a),V=()=>{M(u=>!u)},C=`${Q()}--carousel-content-id`;return e.createElement("div",{...O,"aria-owns":m?void 0:C,className:l(n,r,a&&`${n}__collapsible`,m&&`${n}__collapsible-collapsed`,L&&`${n}__with-left-gutter`),ref:i,...f(I)},e.createElement(Z,{size:20,className:`${n}__icon-idea`}),e.createElement("div",{className:`${n}__title`},S),e.createElement(U,{id:C,className:`${n}__carousel`,fadedEdgeColor:{left:K,right:J},ref:k,onChangeIsScrollable:u=>{F(u)},onScroll:u=>{W(u)},isScrollMode:!0},s),e.createElement("div",{className:l([a||q?`${n}__navigation`:null])},a&&e.createElement(v,{kind:"ghost",size:"md",className:`${n}__toggle-button`,onClick:V,ref:A,"aria-controls":m?void 0:C,"aria-expanded":!m},m?B:D),q&&e.createElement(e.Fragment,null,e.createElement("span",{className:l(`${n}__back-button`,[N===0?`${n}__back-button--disabled`:null])},e.createElement(x,{align:"top",disabled:N===0,kind:"ghost",label:z,onClick:()=>{k.current.scrollPrev()},size:"md"},e.createElement(X,{size:16}))),e.createElement("span",{className:l(`${n}__next-button`,[N===1?`${n}__next-button--disabled`:null])},e.createElement(x,{align:"top-right",disabled:N===1,kind:"ghost",label:P,onClick:()=>{k.current.scrollNext()},size:"md"},e.createElement(Y,{size:16}))))),p&&e.createElement("span",{className:`${n}__close-button`},e.createElement(x,{align:"bottom-end",kind:"ghost",label:R,onClick:p,size:"md"},e.createElement(j,{size:16}))))});g=c.checkComponentEnabled(g,I);g.displayName=I;g.propTypes={children:t.node,className:t.string,closeIconDescription:t.string,collapseButtonLabel:t.string,collapsible:t.bool,expandButtonLabel:t.string,nextIconDescription:t.string,onClose:t.func,previousIconDescription:t.string,title:t.string.isRequired,withLeftGutter:t.bool};g.__docgenInfo={description:`The guide banner sits at the top of a page, or page-level tab,
to introduce foundational concepts related to the page's content.`,methods:[],displayName:"Guidebanner",props:{children:{required:!1,tsType:{name:"ReactNode"},description:`Provide the contents of the Guidebanner.
One or more GuidebannerElement components are required.`,type:{name:"node"}},className:{required:!1,tsType:{name:"string"},description:"Provide an optional class to be applied to the containing node.",type:{name:"string"}},closeIconDescription:{required:!1,tsType:{name:"string"},description:"Tooltip text and aria label for the Close button icon.",type:{name:"string"}},collapseButtonLabel:{required:!1,tsType:{name:"string"},description:"Text label for the Collapse button.",type:{name:"string"}},collapsible:{required:!1,tsType:{name:"boolean"},description:`When true, the Guidebanner will initialize in a collapsed state,
showing the title and the Expand button.

When expanded, it will show the GuidebannerElement child components and the Collapse button.`,type:{name:"bool"}},expandButtonLabel:{required:!1,tsType:{name:"string"},description:"Text label for the Expand button.",type:{name:"string"}},nextIconDescription:{required:!1,tsType:{name:"string"},description:"Tooltip text and aria label for the Next button icon.",type:{name:"string"}},onClose:{required:!1,tsType:{name:"signature",type:"function",raw:"() => void",signature:{arguments:[],return:{name:"void"}}},description:`If defined, a Close button will render in the top-right corner and a
callback function will be triggered when button is clicked.`,type:{name:"func"}},previousIconDescription:{required:!1,tsType:{name:"string"},description:"Tooltip text and aria label for the Back button icon.",type:{name:"string"}},title:{required:!0,tsType:{name:"string"},description:"Title text.",type:{name:"string"}},withLeftGutter:{required:!1,tsType:{name:"boolean"},description:`If true, insert 1 rem of "space" on the left of the component.
This will allow the component's content to line up with other
content on the page under special circumstances.`,type:{name:"bool"}}}};const T=`${c.prefix}--guidebanner__element`,G="GuidebannerElement";let h=e.forwardRef(({button:o,className:i,description:s,title:r,...a},p)=>e.createElement("div",{...a,className:l(T,i),ref:p,...f(G)},r&&e.createElement("h2",{className:`${T}-title`},r),s&&e.createElement("p",{className:`${T}-content`},s),o&&e.createElement("div",{className:`${T}-buttons`},o)));h=c.checkComponentEnabled(h,G);h.displayName=G;h.propTypes={button:t.node,className:t.string,description:t.oneOfType([t.string,t.node]).isRequired,title:t.string};h.__docgenInfo={description:`The GuidebannerElement is a required child component of the Guidebanner,
and acts as a container for a CarouselItem.`,methods:[],displayName:"GuidebannerElement",props:{button:{required:!1,tsType:{name:"ReactNode"},description:`An optional button can be rendered below the description.
This can be a link, button, Coachmark button, etc.`,type:{name:"node"}},className:{required:!1,tsType:{name:"string"},description:"Provide an optional class to be applied to the containing node.",type:{name:"string"}},description:{required:!0,tsType:{name:"ReactNode"},description:"The description of the element.",type:{name:"union",value:[{name:"string"},{name:"node"}]}},title:{required:!1,tsType:{name:"string"},description:"The title of the element.",type:{name:"string"}}}};const w=`${c.prefix}--guidebanner__element-button`,_="GuidebannerElementButton",te={iconDescription:"Crossroads"};let y=e.forwardRef(({children:o,className:i,iconDescription:s=te.iconDescription,type:r,...a},p)=>r==="primary"?e.createElement(v,{...a,className:l(w,i),iconDescription:s,kind:"tertiary",ref:p,renderIcon:()=>e.createElement(H,{size:16}),role:"button",size:"md",...f(_)},o):e.createElement(v,{...a,className:l(w,i),kind:"ghost",role:"button",size:"md",...f(_)},o));y=c.checkComponentEnabled(y,_);y.displayName=_;y.propTypes={children:t.node.isRequired,className:t.string,type:t.string};y.__docgenInfo={description:"One of two buttons styled specifically for the GuidebannerElement.",methods:[],displayName:"GuidebannerElementButton",props:{children:{required:!0,tsType:{name:"ReactNode"},description:"Provide the contents of the GuidebannerElementLink.",type:{name:"node"}},className:{required:!1,tsType:{name:"string"},description:"Provide an optional class to be applied to the containing node.",type:{name:"string"}},iconDescription:{required:!1,tsType:{name:"string"},description:"Provide a description for the icon.",defaultValue:{value:"'Crossroads'",computed:!1}},type:{required:!1,tsType:{name:"string"},description:`If type is "primary", then return a tertiary button with the "crossroads" icon,
else return a ghost button.`,type:{name:"string"}}}};const ne=`${c.prefix}--guidebanner__element-link`,$="GuidebannerElementLink";let E=e.forwardRef(({children:o,className:i,...s},r)=>e.createElement(ee,{...s,className:l(ne,i),kind:"ghost",ref:r,role:"link",size:"md",...f($)},o));E=c.checkComponentEnabled(E,$);E.displayName=$;E.propTypes={children:t.node.isRequired,className:t.string};E.__docgenInfo={description:"A link styled specifically for the GuidebannerElement.",methods:[],displayName:"GuidebannerElementLink",props:{children:{required:!0,tsType:{name:"ReactNode"},description:"Provide the contents of the GuidebannerElementLink.",type:{name:"node"}},className:{required:!1,tsType:{name:"string"},description:"Provide an optional class to be applied to the containing node.",type:{name:"string"}}}};export{g as G,h as a,y as b,E as c};
