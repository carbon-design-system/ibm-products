import{e as i,r as w}from"./index-BOZkNhcz.js";import{a as p}from"./chunk-D5ZWXAHU-DlerbUHg.js";import{g as f}from"./getBatchActions-CX_vHG6S.js";import{a as E,D as m,m as h,u as D}from"./_storybook-styles-BjK23sID.js";import{D as S}from"./DatagridActions-CiDU9ILQ.js";import{D as T}from"./DatagridPagination-UrZhPsOx.js";import{A as r}from"./getArgTypes-Ci8wh0IQ.js";import{S as C}from"./StoryDocsPage-DUYNgJVx.js";import{u as b}from"./useExpandedRow-C7UHdOHk.js";import{u as H}from"./useSelectRows-BDRUYYol.js";import{u as R}from"./useStickyColumn-Cs8aDI7R.js";import{b as B}from"./settings-BYgtfLKl.js";import{a as y}from"./bucket-6-B5NNCZ27.js";import{T as k}from"./bucket-17-Dbz5FtJu.js";import"./_commonjsHelpers-BosuxZz1.js";import"./v4-CtRu48qb.js";import"./bucket-0-tjTgXQWL.js";import"./index--clQM3eT.js";import"./index-hBZdtWkn.js";import"./index-2uioG_CI.js";import"./devtools-BSXGZlBP.js";import"./feature-flags-opBMwCDq.js";import"./TableRow-B3UC0sp5.js";import"./index-YZUn1U4D.js";import"./wrapComponent-Bc-EthYV.js";import"./TableToolbar-DT-kZZ1C.js";import"./Text-C-NQiyV2.js";import"./ErrorEmptyState-DP7zsOwL.js";import"./Link-BFsW3ySJ.js";import"./EmptyState-gDUsG0U-.js";import"./props-helper-BNocl_Zr.js";import"./index-Cz7DMDvM.js";import"./EmptyStateV2-CflP1-8z.js";import"./iframe--Hb3m1kv.js";import"./ErrorIllustration-Dz1tKV6c.js";import"./useId-3RkIcX0R.js";import"./uuidv4-BN2rGLQG.js";import"./events-OVwOsPzJ.js";import"./NoDataEmptyState-6gyqpqAD.js";import"./NoDataIllustration-DXQPoSCV.js";import"./NotFoundEmptyState-BRDl4Kj7.js";import"./NotFoundIllustration-BrUgbhvY.js";import"./index.esm-C32hhDZ_.js";import"./usePreviousValue-BEwlonP-.js";import"./useResizeObserver-DcNhBpO-.js";import"./useIsomorphicEffect-C0ObacuX.js";import"./MenuItem-BSeNOHR5.js";import"./useControllableState-BHFQnaNh.js";import"./useAttachedMenu-BS0JXRSz.js";import"./bucket-2-rFuAlaTW.js";import"./useWindowResize-C1HduLvd.js";import"./mergeRefs-CTUecegF.js";import"./getFocusableElements-BW7cf991.js";import"./index-CtW6Lsnp.js";import"./index-D8bRXWRJ.js";import"./useClickOutside-DHVF5Qo6.js";import"./AccordionItem-CFt1CKpn.js";import"./Search-Cvevq9lI.js";import"./FormContext-qEw5DNxz.js";import"./bucket-14-CgdCrYMN.js";import"./index-_87NmGAs.js";import"./LayerContext-DxTbsTfh.js";import"./index-BfLKLwdO.js";import"./Checkbox-BkhXuVvJ.js";import"./bucket-18-Dly-sSmK.js";import"./DatePicker-CfM7iejN.js";import"./bucket-1-Dse7f7ir.js";import"./Dropdown-DUiNNuDy.js";import"./index-CVAOgdFx.js";import"./FormGroup-C9yKEUD9.js";import"./NumberInput-wLF2-I7y.js";import"./useNormalizedInputProps-BDKhkbhJ.js";import"./bucket-16-BFXGSpzc.js";import"./RadioButton-BG56v3Z_.js";import"./RadioButtonGroup-BNG-Ca3n.js";import"./MultiSelect-D4ulrWpb.js";import"./ActionSet-UhZB57-y.js";import"./ButtonSet-BHSafAHF.js";import"./InlineLoading-CRp3J8hh.js";import"./TagSet-heaoH4__.js";import"./Tag-poJ4g3DE.js";import"./DefinitionTooltip-Dmd5thZA.js";import"./DismissibleTag-CCIQD6y1.js";import"./ComposedModal-B5GOofnJ.js";import"./requiredIfGivenPropIsTruthy-CU7JwK8h.js";import"./wrapFocus-DuCohhwL.js";import"./usePortalTarget-BnwBxO9W.js";import"./OperationalTag-Dy-8SFeE.js";import"./SkeletonText-CEI9dtvU.js";import"./bucket-15-BIyYeSsH.js";import"./getNodeTextContent-C8IeKkUQ.js";import"./index-CKq6Ewiq.js";import"./bucket-7-DfvGlUO7.js";import"./index-0E3e6jj2.js";import"./bucket-12-BQFRxjkG.js";import"./OverflowMenuItem-vAGvlICf.js";import"./TableToolbarSearch-Bicm2rxe.js";import"./bucket-5-D_VnmO9x.js";import"./Select-kVYetUw6.js";import"./SelectItem-DRPT6sUr.js";import"./index-KgSg3jcr.js";import"./index-CO8sV34W.js";import"./index-ogSvIofg.js";import"./story-helper-DEC8H8IF.js";import"./useFocusRowExpander-UbaPBXPx.js";import"./TableSelectRow-DN4YIujg.js";const P=()=>B.prefix,c=()=>i.createElement(C,{omitCodedExample:!0,blocks:[{description:"The `Datagrid` supports expandable rows with the use of the `useExpandedRow` hook.",source:{language:"jsx",code:`
import { Datagrid, useDatagrid, useExpandedRow } from '@carbon/ibm-products';

const App = () => {
  const columns = React.useMemo(() => defaultHeader, []); // These are the columns that will be used by the datagrid
  const [data] = useState(makeData(10)); // This is the data that will be rendered by the datagrid

  const expansionRenderer = ({ row }) => {
    return <div>Content for row index: {row.id}</div>;
  };

  const datagridState = useDatagrid(
    {
      columns,
      data,
      ExpandedRowContentComponent: expansionRenderer,
      expanderButtonTitleExpanded: 'Collapse row',
      expanderButtonTitleCollapsed: 'Expand row',
    },
    useExpandedRow
  );

  return <Datagrid datagridState={datagridState} />;
};
          `}}]});c.__docgenInfo={description:"",methods:[],displayName:"DocsPage"};const Gt={title:"Deprecated/Datagrid/Datagrid/ExpandableRow",component:m,tags:["autodocs"],parameters:{styles:E,docs:{page:c},layout:"fullscreen",argTypes:{featureFlags:{table:{disable:!0}}}}},A=[{Header:"Row Index",accessor:(t,o)=>o,sticky:"left",id:"rowIndex"},{Header:"First Name",accessor:"firstName"},{Header:"Last Name",accessor:"lastName"},{Header:"Age",accessor:"age",width:50},{Header:"Visits",accessor:"visits",width:60},{Header:"Someone 1",accessor:"someone1"},{Header:"Someone 2",accessor:"someone2"},{Header:"Someone 3",accessor:"someone3"},{Header:"Someone 4",accessor:"someone4"},{Header:"Someone 5",accessor:"someone5"},{Header:"Someone 6",accessor:"someone6"},{Header:"Someone 7",accessor:"someone7"},{Header:"Someone 8",accessor:"someone8"},{Header:"Someone 9",accessor:"someone9"},{Header:"Someone 10",accessor:"someone10"}],a={gridTitle:"Data table title",gridDescription:"Additional information if needed",rowActions:[{id:"edit",itemText:"Edit",icon:y,onClick:p("Clicked row action: edit")},{id:"delete",itemText:"Delete",icon:k,isDelete:!0,onClick:p("Clicked row action: delete")}],expandedContentHeight:96,expanderButtonTitleExpanded:"Collapse row",expanderButtonTitleCollapsed:"Expand row"},N=({row:t})=>{const o=P();return i.createElement("div",{className:`${o}__test-class-with-prefix-hook`},"Content for row index: ",t.id)},_=({...t})=>{const o=i.useMemo(()=>[...A],[]),[l]=w.useState(h(10)),u=D({columns:o,data:l,initialState:{pageSize:10,pageSizes:[5,10,25,50]},DatagridActions:S,DatagridPagination:T,ExpandedRowContentComponent:N,tags:["autodocs"],batchActions:!0,toolbarBatchActions:f(),onRowExpand:(x,g)=>console.log(x,g),...t.defaultGridProps},R,H,b);return i.createElement(m,{datagridState:u})},v=({...t})=>i.createElement(_,{defaultGridProps:{...t}}),G={gridTitle:a.gridTitle,gridDescription:a.gridDescription,expandedContentHeight:a.expandedContentHeight,expanderButtonTitleExpanded:a.expanderButtonTitleExpanded,expanderButtonTitleCollapsed:a.expanderButtonTitleCollapsed},I="With expandable row",e=v.bind({});e.storyName=I;e.argTypes={gridTitle:r.gridTitle,gridDescription:r.gridDescription,expandedContentHeight:r.expandedContentHeight,expanderButtonTitleExpanded:r.expanderButtonTitleExpanded,expanderButtonTitleCollapsed:r.expanderButtonTitleCollapsed};e.args={...G};var s,n,d;e.parameters={...e.parameters,docs:{...(s=e.parameters)==null?void 0:s.docs,source:{originalSource:`({
  ...args
}) => {
  return <ExpandedRows defaultGridProps={{
    ...args
  }} />;
}`,...(d=(n=e.parameters)==null?void 0:n.docs)==null?void 0:d.source}}};const It=["ExpandableRowStory"];export{e as ExpandableRowStory,It as __namedExportsOrder,Gt as default};
