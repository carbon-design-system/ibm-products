import{r as V,e as o}from"./index-BOZkNhcz.js";import{c as N,P as n}from"./index--clQM3eT.js";import{p as w,T as K,B as J}from"./settings-BYgtfLKl.js";import{a as Z}from"./chunk-D5ZWXAHU-DlerbUHg.js";import{j as a,a as Q,h as Y,C as ee}from"./index-KgSg3jcr.js";import{useMDXComponents as F}from"./index-aaDvWpb8.js";import"./DocsRenderer-CFRXHY34-A56J-102.js";import{g as _}from"./devtools-BSXGZlBP.js";import{S as k}from"./SkeletonText-CEI9dtvU.js";import{T as te}from"./TooltipTrigger-TH7VaB48.js";import{e as ae}from"./bucket-9-C6VBS02H.js";import{d as oe}from"./bucket-0-tjTgXQWL.js";import{a as ne}from"./bucket-6-B5NNCZ27.js";import"./_commonjsHelpers-BosuxZz1.js";import"./index-hBZdtWkn.js";import"./index-2uioG_CI.js";import"./events-OVwOsPzJ.js";import"./index-YZUn1U4D.js";import"./v4-CtRu48qb.js";import"./iframe--Hb3m1kv.js";import"./index-CO8sV34W.js";import"./index-ogSvIofg.js";import"./react-18-Cs6RDBhU.js";const re=(t,e="en-US")=>{let l;try{Intl.NumberFormat.supportedLocalesOf(t),l=t}catch{l=e}return l};var i=(t=>(t.Default="default",t.Large="lg",t.XLarge="xl",t))(i||{}),T=(t=>(t.Dash="â€“",t.Slash="/",t))(T||{});const C="en-US",q=(t,e,l,c)=>e==null||typeof e!="number"?null:c?Intl.NumberFormat(t,{notation:"compact",minimumFractionDigits:l,maximumFractionDigits:Math.round(l)}).format(e):Intl.NumberFormat(t).format(e),le=t=>{switch(t){case"lg":return 20;case"xl":return 24;default:return 16}},m=`${w.prefix}--big-numbers-skeleton`,R="BigNumbersSkeleton",h=V.forwardRef(({className:t,size:e,...l},c)=>{const g=N(t,m,{[`${m}--lg`]:e===i.Large,[`${m}--xl`]:e===i.XLarge});return o.createElement("div",{...l,className:g,ref:c,..._(R)},o.createElement(k,{className:`${m}__label`}),o.createElement(k,{heading:!0,className:`${m}__value`,width:"80%"}))});h.displayName=R;h.propTypes={className:n.string,size:n.oneOf([i.Default,i.Large,i.XLarge])};h.__docgenInfo={description:"",methods:[],displayName:"BigNumbersSkeleton",props:{className:{description:"Provide an optional class to be applied to the containing node.",type:{name:"string"},required:!1},size:{description:"",type:{name:"enum",value:[{value:"BigNumbersSize.Default",computed:!0},{value:"BigNumbersSize.Large",computed:!0},{value:"BigNumbersSize.XLarge",computed:!0}]},required:!1}}};const r=`${w.prefix}--big-numbers`,f="BigNumbers";let p=V.forwardRef(({className:t,forceShowTotal:e=!1,fractionDigits:l=1,iconButton:c,loading:g=!1,label:X,locale:M=C,percentage:j=!1,size:d="default",tooltipDescription:E,total:b,trending:W=!1,truncate:S=!0,value:v,...B},D)=>{const G=N(t,{[`${r}--lg`]:d==="lg",[`${r}--xl`]:d==="xl"}),O=re(M,C),y=q(O,v,l,S)??T.Dash,$=q(O,b,l,S)??"Unknown",H=e||!j&&b&&v&&b>v&&y!==$;return g?o.createElement(h,{...B,ref:D,className:t,size:d,..._(f)}):o.createElement("div",{...B,className:N(r,G,t),ref:D,..._(f)},o.createElement("span",{className:`${r}__row`},o.createElement("h4",{className:`${r}__label`},X),E&&o.createElement(K,{description:E,align:"right",className:`${r}__info`},o.createElement(te,{className:`${r}__tooltip-trigger`},o.createElement(ae,{size:16})))),o.createElement("span",{className:`${r}__row`,role:"math"},W&&o.createElement(oe,{className:`${r}__trend`,size:le(d)}),o.createElement("span",{className:`${r}__value`},j?o.createElement("div",{className:`${r}__percentage`},y,o.createElement("span",{className:`${r}__percentage-mark`},"%")):y),H&&o.createElement("span",{className:`${r}__total`},o.createElement("span",null,`${T.Slash}${$}`)),o.createElement("span",{className:`${r}__icon-button`},c)))});p=w.checkComponentEnabled(p,f);p.displayName=f;p.propTypes={className:n.string,forceShowTotal:n.bool,fractionDigits:n.number,iconButton:n.node,label:n.string.isRequired,loading:n.bool,locale:n.string,percentage:n.bool,size:n.oneOf(["default","lg","xl"]),tooltipDescription:n.string,total:n.number,trending:n.bool,truncate:n.bool,value:n.number};p.__docgenInfo={description:`BigNumbers is used to display large values in a small area. The display of
values can be the value itself, or grouped in a \`numerator/denominator\` fashion.
Control over the total fraction decimals displayed as well as how the
values/totals are displayed are done via a locale prop. Other optional props
allow control over size, truncation, if the value is a percentage, the addition
of a button as well as tool tip functionality.
The default locale is English (\`en-US\`) if one is not provided or if the provided one is not supported.`,methods:[],displayName:"BigNumbers",props:{className:{required:!1,tsType:{name:"string"},description:"Provide an optional class to be applied to the containing node.",type:{name:"string"}},forceShowTotal:{required:!1,tsType:{name:"boolean"},description:"The default behavior will hide `total` if `undefined` or is the same as `value`.\n\nSet to `true` to ignore the default behavior and show the `total`.",defaultValue:{value:"false",computed:!1},type:{name:"bool"}},fractionDigits:{required:!1,tsType:{name:"number"},description:"Specifies the number of fraction digits when truncating `value` and `total`.",defaultValue:{value:"1",computed:!1},type:{name:"number"}},iconButton:{required:!1,tsType:{name:"ReactNode"},description:"Displays an icon button next to `value`.",type:{name:"node"}},loading:{required:!1,tsType:{name:"boolean"},description:"When `true`, will show the loading state.",defaultValue:{value:"false",computed:!1},type:{name:"bool"}},label:{required:!0,tsType:{name:"string"},description:"Text label above the `value`.",type:{name:"string"}},locale:{required:!1,tsType:{name:"string"},description:"Determines how `value` and `total` will be formatted.",defaultValue:{value:"'en-US'",computed:!1},type:{name:"string"}},percentage:{required:!1,tsType:{name:"boolean"},description:"Appends a percent sign (_%_) after `value` and hides `total`.",defaultValue:{value:"false",computed:!1},type:{name:"bool"}},size:{required:!1,tsType:{name:"literal",value:"`${BigNumbersSize}`"},description:"",defaultValue:{value:"'default'",computed:!1},type:{name:"enum",value:[{value:"'default'",computed:!1},{value:"'lg'",computed:!1},{value:"'xl'",computed:!1}]}},tooltipDescription:{required:!1,tsType:{name:"string"},description:"When applied, an information icon will be rendered next to the\n`label` and the description will be applied to its tooltip.",type:{name:"string"}},total:{required:!1,tsType:{name:"number"},description:'The number that will appear after the slash (i.e. the "denominator" of a fraction).\n\nThis number will not be rendered if it\'s the same as `value` or\n`percentage` is true. See also the **forceShowTotal** prop.',type:{name:"number"}},trending:{required:!1,tsType:{name:"boolean"},description:'When `true`, will render a "trending up" icon.',defaultValue:{value:"false",computed:!1},type:{name:"bool"}},truncate:{required:!1,tsType:{name:"boolean"},description:"Abbreviates the number when `true`. E.g. from _1,000_ to _1K_.",defaultValue:{value:"true",computed:!1},type:{name:"bool"}},value:{required:!1,tsType:{name:"number"},description:'The primary value to display (or the "numerator" of a fraction).',type:{name:"number"}}}};function L(t){const e={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",ul:"ul",...F(),...t.components};return a.jsxs(a.Fragment,{children:[a.jsx(e.h1,{id:"bignumbers",children:"BigNumbers"}),`
`,a.jsx(e.h2,{id:"table-of-contents",children:"Table of Contents"}),`
`,a.jsxs(e.ul,{children:[`
`,a.jsx(e.li,{children:a.jsx(e.a,{href:"#overview",children:"Overview"})}),`
`,a.jsx(e.li,{children:a.jsx(e.a,{href:"#example-usage",children:"Example usage"})}),`
`,a.jsx(e.li,{children:a.jsx(e.a,{href:"#component-api",children:"Component API"})}),`
`]}),`
`,a.jsx(e.h2,{id:"overview",children:"Overview"}),`
`,a.jsxs(e.p,{children:[`BigNumbers is used to display large values in a small area. The display of
values can be the value itself, or grouped in a `,a.jsx(e.code,{children:"numerator/denominator"}),` fashion.
Control over the total fraction decimals displayed as well as how the
values/totals are displayed are done via a locale prop. Other optional props
allow control over size, truncation, if the value is a percentage, the addition
of a button as well as tool tip functionality. The default locale is English
(`,a.jsx(e.code,{children:"en-US"}),") if one is not provided or if the provided one is not supported."]}),`
`,a.jsx(e.p,{children:a.jsx(e.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat#locales",rel:"nofollow",children:"Supported locales"})}),`
`,a.jsx(e.h2,{id:"example-usage",children:"Example usage"}),`
`,`
`,a.jsx(e.h3,{id:"big-numbers",children:"Big numbers"}),`
`,a.jsx(Q,{children:a.jsx(Y,{of:s})}),`
`,a.jsx(e.h2,{id:"code-sample",children:"Code sample"}),`
`,`
`,a.jsx(e.h2,{id:"component-api",children:"Component API"}),`
`,a.jsx(ee,{})]})}function se(t={}){const{wrapper:e}={...F(),...t.components};return e?a.jsx(e,{...t,children:a.jsx(L,{...t})}):L(t)}const ie="",u={"-123 ":-123,"0 ":0,"12 ":12,"345 ":345,"6789 ":6789,"12345.678 ":12345.678,"678901.2456 ":678901.2456,"1000000 ":1e6,"2345678 ":2345678,"90123456 ":90123456,"789012345 ":789012345,"6789012345 ":6789012345,"null ":null,"undefined ":void 0},x={"undefined ":null,"Example <Button> ":o.createElement(J,{renderIcon:ne,iconDescription:"Icon Description",kind:"ghost",size:"sm",hasIconOnly:!0,onClick:Z("Button.onClick()"),tooltipPosition:"bottom"})},qe={title:"Experimental/Components/Big numbers/BigNumbers",component:p,tags:["autodocs"],argTypes:{forceShowTotal:{options:[!0,!1],control:{type:"boolean"}},iconButton:{control:{type:"select",labels:Object.keys(x)},options:Object.values(x).map((t,e)=>e),mapping:Object.values(x)},loading:{options:[!0,!1],control:{type:"boolean"}},locale:{options:["bg","cs","da-DK","de-CH","de","en-AU","en-GB","en-US","en-ZA","es-ES","es","et","fi","fr-CA","fr-CH","fr","hu","it","ja","lv","nl-BE","nl-NL","no","pl","pt-BR","pt-PT","ru-UA","ru","sk","sl","th","tr","uk-UA","vi"],control:{type:"select"}},percentage:{options:[!0,!1],control:{type:"boolean"}},size:{options:Object.values(i),control:{type:"radio"}},total:{control:{type:"select",labels:Object.keys(u)},options:Object.values(u).map((t,e)=>e),mapping:Object.values(u)},trending:{options:[!0,!1],control:{type:"boolean"}},truncate:{options:[!0,!1],control:{type:"boolean"}},value:{control:{type:"select",labels:Object.keys(u)},options:Object.values(u).map((t,e)=>e),mapping:Object.values(u)}},parameters:{styles:ie,docs:{page:se}}},pe={forceShowTotal:!1,fractionDigits:1,iconButton:0,label:"Label",loading:!1,locale:"en-US",percentage:!1,size:"default",tooltipDescription:"",total:13,trending:!1,truncate:!0,value:5},ce=t=>o.createElement(p,{...t}),s=ce.bind({});s.args={...pe};var I,U,z,P,A;s.parameters={...s.parameters,docs:{...(I=s.parameters)==null?void 0:I.docs,source:{originalSource:`args => {
  return <BigNumbers {...args} />;
}`,...(z=(U=s.parameters)==null?void 0:U.docs)==null?void 0:z.source},description:{story:`TODO: Declare one or more stories, generally one per design scenario.
NB no need for a 'Playground' because all stories have all controls anyway.`,...(A=(P=s.parameters)==null?void 0:P.docs)==null?void 0:A.description}}};const Le=["bigNumbers"];export{Le as __namedExportsOrder,s as bigNumbers,qe as default};
